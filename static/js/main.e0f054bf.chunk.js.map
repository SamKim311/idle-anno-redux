{"version":3,"sources":["js/actions/game.js","js/reducers/island.js","js/actions/warehouse.js","js/actions/construction.js","js/reducers/building-definitions.js","js/actions/housing.js","js/actions/trade.js","js/reducers/warehouse.js","js/reducers/construction.js","js/reducers/building.js","js/reducers/couriers.js","js/reducers/housing.js","js/reducers/population.js","js/reducers/amenities.js","js/reducers/population-definitions.js","js/reducers/consume.js","js/reducers/growth.js","js/reducers/finance.js","js/reducers/level-up-definitions.js","js/reducers/level-up.js","js/actions/cheats.js","js/reducers/cheat.js","js/data/trader-info.js","js/reducers/resource-definitions.js","js/reducers/trader.js","js/reducers/root-reducer.js","js/store/initial-state.js","js/scheduler.js","js/components/cheats/TimeFactor.js","js/selectors.js","js/components/ResourcePanel.js","js/components/CourierMonitor.js","js/components/ConstructionPanel.js","js/components/BuildingPanel.js","js/components/PopulationPanel.js","js/components/HousingPanel.js","js/components/SaveLoad.js","js/components/TradePanel.js","js/Game.js","js/serviceWorker.js","index.js","js/store/store.js"],"names":["ACTIONS","INIT","TICK","LOAD_GAME","BUILD_WAREHOUSE","UPDGRADE_WAREHOUSE","CONSTRUCT_BUILDING","DESTROY_BUILDING","BUILDING_CATEGORY","AMENITY","PRODUCER","HOUSE","WAREHOUSE","BuildingDefinitions","marketplace","name","description","category","produces","community","upkeep","chapel","faith","fishinghut","consumes","fish","produceTime","lumberjackhut","wood","orchard","apple","ciderfarm","cider","hempfarm","hemp","weavers","linen","quarry","stone","stonemason","stonebrick","peasanthouse","populationCategory","populationCap","ascendsTo","citizenhouse","cost","tool","smallwarehouse","couriers","capacity","upgradesTo","upgradeCost","gold","mediumwarehouse","smallstockpile","BUILD_HOUSE","ASCEND_HOUSE","BUY_GOODS","SELL_GOODS","DISMISS_TRADER","resourceDecorations","reserved","pending","deductCost","resources","resourceCopy","Object","assign","entries","ingredient","amount","ingredientCopy","owned","buildingStatus","AWAITING_RESOURCES","WORKING","OUTBOX_FULL","DISABLED","initialProducerState","status","progress","efficiency","efficiencyTimer","efficiencySupplied","inbox","outbox","EFFICIENCY_FACTOR","EFFICIENCY_TIMER","EFFICIENCY_MINIMUM","BASE_EFFICIENCY_MAXIMUM","BASE_IN_OUT_BOX_CAPACITY","initializeInOutBox","building","keys","good","doProductionTick","timeIntervalS","buildingCopy","consumed","canAfford","progressEfficiency","produced","outboxHasRoom","inboxCopy","outboxCopy","Math","min","max","courierState","initCourier","timeThreshold","jobDescription","payload","markedForDeath","state","action","type","gameActions","startingWarehouse","warehouse","courierArrayCopy","slice","addCouriers","courierObjCopy","warehouseActions","nextWarehouse","toUpgrade","toConstruct","id","builtWarehouse","addedCouriers","newState","newCouriers","newArray","constructionActions","toDestroy","courierList","courierIndex","length","courier","markmarkedForDeath","splice","stateCopy","couriersCopy","warehouseMax","totalCapacity","buildings","buildingRefCopy","newJobs","findJobs","jobArrayCopy","jobQueue","concat","jobList","jobRefCopy","jobQueueMap","jobRef","courierListCopy","map","newCourier","nextJobIndex","getNextAvailableJob","nextJob","pickupFromId","from","deliverToId","to","carrying","pickupFrom","deliverTo","inboxRoom","currentSupply","floor","currentOutbox","warehouseRoom","tickIntervalSeconds","fromId","toId","product","hasOwnProperty","resourceToTake","resourceToDeliver","killedCouriers","filter","courierArray","numToAdd","i","uuidv4","push","SUPPLY_SUFFIX","PICKUP_SUFFIX","existingJobs","supplies","values","supplyKey","resource","newJob","pickups","reduce","accumulator","pickupKey","jobArray","jobIndex","initHouseState","popProgress","currentPop","ascensionFactors","rightsLists","patricianhouse","calculateAscensionRights","allTypes","toCheck","totalHouses","sum","pop","totalAscensionRights","ascendTo","alreadyAscended","remainingAscensionRights","initValues","maxPopulation","happiness","canAscend","consumeInfo","amenities","amenity","PopulationDefinitions","peasant","taxRate","quantity","weight","citizen","spice","population","popType","popOriginal","currentHappiness","pctSatisfied","happinessDiff","abs","houses","housing","populationCounts","newAbodes","abodes","abodeOriginal","abode","curHappiness","growthFactor","popCount","newPop","financeInfo","maintenanceCost","taxRevenue","warehouseMaintenance","totalMaintenance","construction","totalTaxes","happinessFactor","unlockThresholds","unlocks","title","island","level","unlockPopType","popRequired","unlocked","constructions","forEach","conId","resId","popUnlocked","types","houseId","unlockedHouse","SET_TIME_FACTOR","cheat","timeFactor","Traders","lord","rates","buy","sell","baseCapacity","prince","ResourceDefinitions","baseTradePrice","BASE_TRADER_STAY_TIME_SECONDS","INIT_STATE","traderId","timer","timeToLeave","wares","newGame","dismissCost","newTrader","currentState","traders","selectedTrader","random","traderInfo","maxCapacity","goodBasePrice","buyPrice","sellPrice","held","combinedReducer","combineReducers","warehouseCopy","newResources","resourceId","newResource","housingActions","warehouseToBuild","currentWarehouse","tradeActions","updatedResources","atPrice","goodBought","toConstructId","newOwned","toDestroyId","buildingId","GAME_ACTIONS","updatedBuilding","CONSTRUCTION_ACTIONS","buildingToBuild","newBuilding","newBuildings","buildingToDestroy","toBuild","fromHouseId","fromHouse","toHouseId","fromType","toType","nextHouse","ascendIndex","findIndex","house","populationState","houseBuilt","modifiedPop","currentHouse","oldPop","nextPop","trader","toBuy","time","rootReducer","saveState","cheatState","intermediateState","amenityState","consumptionState","consume","growthState","growth","financeState","finance","levelUp","INITIAL_STATE","noblehouse","Scheduler","functionToRun","targetInterval","this","targetFunction","running","lastTick","Date","now","setTimeout","repeater","currentTime","elapsedTime","bind","TimeFactor","dispatch","useDispatch","useState","setTf","className","onSubmit","event","setTimeFactor","preventDefault","onChange","e","target","value","required","filterUnlocked","collectionObject","key","setAffordable","buyable","ResourcePanel","warehouseType","useSelector","shallowEqual","warehouseInfo","Buildings","upgradeButton","onClick","item","resourceName","toFixed","CourierMonitor","JSON","stringify","ConstructionPanel","buyableCollection","buyableId","setAllAffordable","constructionList","buildingInfo","ingredientPanel","buyFunction","disabled","Building","props","destroyFunc","BuildingPanel","buildingState","destroyBuildingFn","destroyBuilding","buildingList","PopulationPanel","populationList","popName","HousingPanel","housingList","housedPopulation","availableAscensions","toHouse","toBuilding","ascendHouse","SaveLoad","btoa","navigator","clipboard","writeText","then","alert","loadState","parse","atob","prompt","TradePanel","traderState","goldOnHand","goodsToTrade","tradeData","goodInWarehouse","canBuy","canSell","Resources","goodToBuy","goodToSell","MS_TO_S","Game","timeIntervalMs","scheduler","useEffect","start","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","localStorage","getItem","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0f054bf.chunk.js","sourcesContent":["export const ACTIONS = {\n  INIT: 'INIT',\n  TICK: 'TICK',\n  LOAD_GAME: 'LOAD_GAME'\n};\n\nexport function init() {\n  return { type: ACTIONS.INIT };\n}\n\nexport function tick(tickIntervalSeconds) {\n  return { type: ACTIONS.TICK, payload: { tickIntervalSeconds: tickIntervalSeconds }};\n}\n\nexport function loadGame(saveState) {\n  return { type: ACTIONS.LOAD_GAME, payload: { saveState: saveState }};\n}\n","export default function(island={}, action) {\n  return island;\n}\n","export const ACTIONS = {\n  BUILD_WAREHOUSE: 'BUILD_WAREHOUSE',\n  UPDGRADE_WAREHOUSE: 'UPGRADE_WAREHOUSE'\n};\n\nexport function buildWarehouse(warehouse) {\n  return { type: ACTIONS.BUILD_WAREHOUSE, payload: { toConstruct: warehouse }};\n}\n\nexport function upgradeWarehouse(currentWarehouse) {\n  return { type: ACTIONS.UPDGRADE_WAREHOUSE, payload: { toUpgrade: currentWarehouse }};\n}\n","export const ACTIONS = {\n  CONSTRUCT_BUILDING: 'CONSTRUCT_BUILDING',\n  DESTROY_BUILDING: 'DESTROY_BUILDING'\n};\n\nexport function constructBuilding(toConstruct) {\n  return { type: ACTIONS.CONSTRUCT_BUILDING, payload: { toConstruct: toConstruct } };\n};\n\nexport function destroyBuilding(toDestroy) {\n  return { type: ACTIONS.DESTROY_BUILDING, payload: { toDestroy: toDestroy }};\n};\n","export const BUILDING_CATEGORY = {\n  AMENITY: 'AMENITY',\n  PRODUCER: 'PRODUCER',\n  HOUSE: 'HOUSE',\n  WAREHOUSE: 'WAREHOUSE'\n}\n\nconst BuildingDefinitions = {\n  // Amenities\n  marketplace: {\n    name: 'Marketplace',\n    description: 'Provides a place for villagers to meet',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      community: 2.5\n    },\n    upkeep: 10\n  },\n  chapel: {\n    name: 'Chapel',\n    description: 'A basic building for villagers to worship',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      faith: 2\n    },\n    upkeep: 15\n  },\n\n  // Producers\n  fishinghut: {\n    name: 'Fisherman\\'s Hut',\n    description: 'Gathers fish',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      fish: 1\n    },\n    produceTime: 30,\n    upkeep: 15\n  },\n  lumberjackhut: {\n    name: 'Lumberjack\\'s Hut',\n    description: 'Gathers wood',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      wood: 1\n    },\n    produceTime: 40,\n    upkeep: 5\n  },\n  orchard: {\n    name: 'Orchard',\n    description: 'Grows apples to be turned into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      apple: 1\n    },\n    produceTime: 100,\n    upkeep: 0\n  },\n  ciderfarm: {\n    name: 'Cider Farm',\n    description: 'Processes apples into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      apple: 1\n    },\n    produces: {\n      cider: 1\n    },\n    produceTime: 40,\n    upkeep: 15\n  },\n  hempfarm: {\n    name: 'Hemp Plantation',\n    description: 'Grows hemp',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hemp: 1\n    },\n    produceTime: 60,\n    upkeep: 20\n  },\n  weavers: {\n    name: 'Weaver\\'s Hut',\n    description: 'Uses hemp to create clothing',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hemp: 1\n    },\n    produces: {\n      linen: 1\n    },\n    produceTime: 30,\n    upkeep: 25\n  },\n  quarry: {\n    name: 'Stone Quarry',\n    description: 'Gathers raw stone',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      stone: 1\n    },\n    produceTime: 30,\n    upkeep: 20\n  },\n  stonemason: {\n    name: 'Stonemason',\n    description: 'Turns raw stone into useable bricks',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      stone: 1\n    },\n    produces: {\n      stonebrick: 1\n    },\n    produceTime: 30,\n    upkeep: 20\n  },\n\n  // Houses\n  peasanthouse: {\n    name: 'Peasant Shack',\n    description: 'Basic home for villagers. Houses 8',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'peasant',\n    populationCap: 8,\n    ascendsTo: 'citizenhouse'\n  },\n  citizenhouse: {\n    name: 'Citizen House',\n    description: 'Home for citizens',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'citizen',\n    populationCap: 15,\n    ascendsTo: 'patricianhouse',\n    cost: {\n      wood: 1,\n      tool: 1\n    }\n  },\n\n  // Warehouses\n  smallwarehouse: {\n    name: 'Small Warehouse',\n    description: 'Basic warehouse for your island',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 3,\n    capacity: 40,\n    upgradesTo: 'mediumwarehouse',\n    upgradeCost: {\n      gold: 150,\n      wood: 2,\n      tool: 3,\n      stonebrick: 4\n    }\n  },\n  mediumwarehouse: {\n    name: 'Medium Warehouse',\n    description: 'Expanded warehouse',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 15,\n    couriers: 1,\n    capacity: 10\n  },\n  smallstockpile: {\n    name: 'Small Stockpile',\n    description: 'Small depot. Provides 1 courier',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 1,\n    capacity: 0\n  }\n};\n\nexport default BuildingDefinitions;\n","import BuildingDefinitions from '../reducers/building-definitions';\n\nexport const ACTIONS = {\n  BUILD_HOUSE: 'BUILD_HOUSE',\n  ASCEND_HOUSE: 'ASCEND_HOUSE'\n};\n\nexport function buildHouse(house) {\n  return { type: ACTIONS.BUILD_HOUSE, payload: { toConstruct: house } };\n}\n\nexport function ascendHouse(fromHouse, toHouse) {\n  const toBuilding = BuildingDefinitions[toHouse];\n  return { type: ACTIONS.ASCEND_HOUSE, payload: { toConstruct: toBuilding, fromHouse: fromHouse }};\n}\n","export const ACTIONS = {\n  BUY_GOODS: 'BUY_GOODS',\n  SELL_GOODS: 'SELL_GOODS',\n  DISMISS_TRADER: 'DISMISS_TRADER'\n};\n\nexport function buyGood(goodToBuy, amount, atPrice) {\n  return { type: ACTIONS.BUY_GOODS, payload: { product: goodToBuy, amount: amount, atPrice: atPrice }};\n};\n\nexport function sellGood(goodToSell, amount, atPrice) {\n  return { type: ACTIONS.SELL_GOODS, payload: { product: goodToSell, amount: amount, atPrice: atPrice }};\n};\n\nexport function dismissTrader(dismissCost) {\n  return { type: ACTIONS.DISMISS_TRADER, payload: { cost: { gold: dismissCost }}};\n}\n","import { ACTIONS } from '../actions/warehouse';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as tradeActions } from '../actions/trade';\nimport BuildingDefinitions from './building-definitions';\n\nconst resourceDecorations = {\n  reserved: 0,\n  pending: 0\n}\n\nexport default function(warehouse = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case gameActions.INIT: {\n      // go through each resource and add the decorator, because I don't wanna copy and paste it a billion times\n      const warehouseCopy = Object.assign({}, warehouse);\n      const newResources = Object.entries(warehouseCopy.resources).reduce((accumulator, [resourceId, resource]) => {\n        const newResource = Object.assign({}, resource, resourceDecorations);\n        accumulator[resourceId] = newResource;\n        return accumulator;\n      }, {});\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case housingActions.BUILD_HOUSE:\n    case housingActions.ASCEND_HOUSE:\n    case constructionActions.CONSTRUCT_BUILDING: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case ACTIONS.BUILD_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      const warehouseToBuild = BuildingDefinitions[payload.toConstruct.id];\n\n      warehouseCopy.totalCapacity += warehouseToBuild.capacity;\n\n      return warehouseCopy;\n    }\n    case ACTIONS.UPDGRADE_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      const currentWarehouse = BuildingDefinitions[warehouse.type];\n      const nextWarehouse = BuildingDefinitions[currentWarehouse.upgradesTo];\n      if (!nextWarehouse) {\n        return warehouse;\n      }\n\n      const cost = currentWarehouse.upgradeCost;\n      const newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      warehouseCopy.totalCapacity += nextWarehouse.capacity;\n      warehouseCopy.type = BuildingDefinitions[warehouse.type].upgradesTo;\n\n      return warehouseCopy;\n    }\n    case tradeActions.DISMISS_TRADER: {\n      const cost = payload.cost;\n      const updatedResources = deductCost(warehouse.resources, cost);\n      return {...warehouse, resources: updatedResources};\n    }\n    case tradeActions.BUY_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned -= amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned += amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    case tradeActions.SELL_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned += amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned -= amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    default:\n      return warehouse;\n  }\n}\n\nfunction deductCost(resources, cost) {\n  let resourceCopy = Object.assign({}, resources);\n  for (let [ingredient, amount] of Object.entries(cost)) {\n    let ingredientCopy = Object.assign({}, resourceCopy[ingredient]);\n    ingredientCopy.owned -= amount;\n    resourceCopy[ingredient] = ingredientCopy;\n  }\n  return resourceCopy;\n}\n","import { ACTIONS } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\n\nexport default function(constructions = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case warehouseActions.BUILD_WAREHOUSE:\n    case housingActions.BUILD_HOUSE:\n    case ACTIONS.CONSTRUCT_BUILDING:\n      let toConstructId = payload.toConstruct.id;\n      let toConstruct = constructions[toConstructId];\n      let newOwned = Object.assign({}, toConstruct, {owned: toConstruct.owned+1});\n      return Object.assign({}, constructions, {[toConstructId]: newOwned});\n    case ACTIONS.DESTROY_BUILDING:\n      const toDestroyId = payload.toDestroy.buildingId;\n      const toDestroy = {...constructions[toDestroyId]};\n      toDestroy.owned--;\n      return {...constructions, [toDestroyId]: toDestroy};\n    default:\n      return constructions;\n  }\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as CONSTRUCTION_ACTIONS } from '../actions/construction';\nimport { ACTIONS as GAME_ACTIONS } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from './building-definitions';\n\nconst buildingStatus = {\n  AWAITING_RESOURCES: 'AWAITING_RESOURCES',\n  WORKING: 'WORKING',\n  OUTBOX_FULL: 'OUTBOX_FULL',\n  DISABLED: 'DISABLED'\n}\n\nconst initialProducerState = {\n  status: buildingStatus.AWAITING_RESOURCES,\n  progress: 0,\n  efficiency: 1,\n  efficiencyTimer: 0,\n  efficiencySupplied: false,\n  inbox: {},\n  outbox: {}\n}\n\nconst EFFICIENCY_FACTOR = 1 / 100.0;\nconst EFFICIENCY_TIMER = 2;\nconst EFFICIENCY_MINIMUM = 1;\nconst BASE_EFFICIENCY_MAXIMUM = 100;\nexport const BASE_IN_OUT_BOX_CAPACITY = 5;\n\nexport default function(buildings = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case GAME_ACTIONS.TICK: {\n      if (!buildings.owned) {\n        return buildings;\n      }\n      const newState = Object.assign({}, buildings);\n      const newOwned = Object.assign({}, newState.owned);\n      newState.owned = newOwned;\n\n      const timeIntervalS = payload.tickIntervalSeconds;\n      Object.values(buildings.owned).forEach((building) => {\n        let updatedBuilding = null;\n        if (building.category === BUILDING_CATEGORY.PRODUCER) {\n          updatedBuilding = doProductionTick(building, timeIntervalS);\n        } else {\n          updatedBuilding = building;\n        }\n        newOwned[updatedBuilding.id] = updatedBuilding;\n      });\n      return newState;\n    }\n    case warehouseActions.BUILD_WAREHOUSE:\n    case CONSTRUCTION_ACTIONS.CONSTRUCT_BUILDING:\n      const buildingToBuild = BuildingDefinitions[payload.toConstruct.id];\n      let newBuilding = Object.assign({}, buildingToBuild, {id: uuidv4(), buildingId: payload.toConstruct.id});\n      if (buildingToBuild.category === BUILDING_CATEGORY.PRODUCER) {\n        newBuilding = Object.assign(newBuilding, initialProducerState);\n        initializeInOutBox(newBuilding);\n      }\n      const newBuildings = Object.assign({}, buildings.owned);\n      newBuildings[newBuilding.id] = newBuilding;\n      return Object.assign({}, buildings, {owned: newBuildings});\n    case CONSTRUCTION_ACTIONS.DESTROY_BUILDING:\n      const buildingToDestroy = payload.toDestroy;\n      const newOwned = {...buildings.owned};\n      delete newOwned[buildingToDestroy.id];\n      return {...buildings, owned: newOwned};\n    default:\n      return buildings;\n  }\n}\n\nfunction initializeInOutBox(building) {\n  building.inbox = {};\n  for (let ingredient of Object.keys(building.consumes)) {\n    building.inbox[ingredient] = 0;\n  }\n\n  building.outbox = {};\n  for (let good of Object.keys(building.produces)) {\n    building.outbox[good] = 0;\n  }\n}\n\nfunction doProductionTick(building, timeIntervalS) {\n  let buildingCopy = Object.assign({}, building);\n\n  if (!canAfford(buildingCopy)) {\n    buildingCopy.status = buildingStatus.AWAITING_RESOURCES;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  if (!outboxHasRoom(buildingCopy)) {\n    buildingCopy.status = buildingStatus.OUTBOX_FULL;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  buildingCopy.status = buildingStatus.WORKING;\n  if (!buildingCopy.efficiencySupplied) {\n    buildingCopy.efficiencySupplied = true;\n    buildingCopy.efficiencyTimer = 0;\n  }\n  buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n  buildingCopy.progress += timeIntervalS * buildingCopy.efficiency * EFFICIENCY_FACTOR;\n  if (buildingCopy.progress > buildingCopy.produceTime) {\n    buildingCopy.progress -= buildingCopy.produceTime;\n    let inboxCopy = Object.assign({}, buildingCopy.inbox);\n    let outboxCopy = Object.assign({}, buildingCopy.outbox);\n\n    for (let [ingredient, consumed] of Object.entries(buildingCopy.consumes)) {\n      inboxCopy[ingredient] -= consumed;\n    }\n\n    for (let [good, produced] of Object.entries(buildingCopy.produces)) {\n      outboxCopy[good] += produced;\n    }\n\n    buildingCopy.inbox = inboxCopy;\n    buildingCopy.outbox = outboxCopy;\n  }\n\n  return buildingCopy;\n}\n\nfunction canAfford(building) {\n  for (let [ingredient, consumed] of Object.entries(building.consumes)) {\n    if (building.inbox[ingredient] < consumed) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction outboxHasRoom(building) {\n  for (let [good, produced] of Object.entries(building.produces)) {\n    let outboxGood = building.outbox[good];\n    if (outboxGood + produced > BASE_IN_OUT_BOX_CAPACITY) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction progressEfficiency(building, timeIntervalS) {\n  building.efficiencyTimer += timeIntervalS;\n  if (building.efficiencyTimer > EFFICIENCY_TIMER) {\n    building.efficiencyTimer -= EFFICIENCY_TIMER;\n    if (building.efficiencySupplied) {\n      // efficiency going up\n      building.efficiency = Math.min(BASE_EFFICIENCY_MAXIMUM, building.efficiency + 1);\n    } else {\n      // efficiency going down\n      building.efficiency = Math.max(EFFICIENCY_MINIMUM, building.efficiency - 1);\n    }\n  }\n  return building;\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from './building-definitions';\nimport { BASE_IN_OUT_BOX_CAPACITY } from './building';\n\nconst courierState = {\n  IDLE: 'IDLE',\n  PICKING_UP: 'PICKING_UP',\n  EN_ROUTE: 'EN_ROUTE',\n  DROPPING_OFF: 'DROPPING_OFF'\n}\n\nconst BASE_TRAVEL_TIME_SECONDS = 20;\nconst BASE_PICK_UP_DROP_OFF_TIME_SECONDS = 8;\n\nconst initCourier = {\n  status: courierState.IDLE,\n  progress: 0,\n  timeThreshold: 0,\n  jobDescription: {},\n  payload: {},\n  markedForDeath: false\n}\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  const couriers = state.couriers;\n  if (!couriers) {\n    return state;\n  }\n  switch(action.type) {\n    case gameActions.INIT:\n      const startingWarehouse = BuildingDefinitions[state.warehouse.type];\n      const courierArrayCopy = couriers.couriers.slice(0);\n      addCouriers(courierArrayCopy, startingWarehouse.couriers);\n      const courierObjCopy = Object.assign({}, couriers);\n      courierObjCopy.couriers = courierArrayCopy;\n      return Object.assign({}, state, {couriers: courierObjCopy});\n    case warehouseActions.UPDGRADE_WAREHOUSE:\n      // \"cheat\" and modify the payload a bit so we can reuse the code for the below case\n      const nextWarehouse = BuildingDefinitions[payload.toUpgrade].upgradesTo;\n      payload.toConstruct = {\n        id: nextWarehouse\n      };\n    case warehouseActions.BUILD_WAREHOUSE: {\n      const builtWarehouse = BuildingDefinitions[payload.toConstruct.id];\n      const addedCouriers = builtWarehouse.couriers;\n      const newState = Object.assign({}, state);\n      const newCouriers = Object.assign({}, newState.couriers);\n      newState.couriers = newCouriers;\n      const newArray = newCouriers.couriers.slice(0);\n      addCouriers(newArray, addedCouriers);\n      newCouriers.couriers = newArray;\n      return newState;\n    }\n    case constructionActions.DESTROY_BUILDING: {\n      const toDestroy = payload.toDestroy;\n      if (toDestroy.category !== BUILDING_CATEGORY.WAREHOUSE) {\n        return state;\n      }\n\n      const courierList = [...state.couriers.couriers];\n      const couriers = {...state.couriers, couriers: courierList};\n      const newState = {...state, couriers: couriers};\n\n      // try to find a courier that's idle\n      for (let courierIndex = 0; courierIndex < courierList.length; courierIndex++) {\n        const courier = courierList[courierIndex];\n        if (courier.status === courierState.IDLE && !courier.markmarkedForDeath) {\n          courierList.splice(courierIndex, 1);\n          return newState;\n        }\n      }\n\n      // if not, mark the last one for death that isn't already marked\n      for (let courierIndex = courierList.length-1; courierIndex >= 0; courierIndex--) {\n        const courier = courierList[courierIndex];\n        if (!courier.markmarkedForDeath) {\n          courier.markedForDeath = true;\n          return newState;\n        }\n      }\n\n      // no idle couriers, and all active ones are already marked for death so...uh...\n      return newState;\n    }\n    case gameActions.TICK: {\n      const stateCopy = Object.assign({}, state);\n      const couriersCopy = Object.assign({}, stateCopy.couriers);\n      const warehouse = Object.assign({}, stateCopy.warehouse);\n      const warehouseMax = warehouse.totalCapacity;\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const buildings = Object.assign({}, stateCopy.buildings);\n      const buildingRefCopy = Object.assign({}, buildings.owned);\n      buildings.owned = buildingRefCopy;\n      stateCopy.warehouse = warehouse;\n      stateCopy.buildings = buildings;\n      stateCopy.couriers = couriersCopy;\n\n      // add new jobs\n      const newJobs = findJobs(couriers, warehouse, buildingRefCopy);\n      let jobArrayCopy = couriers.jobQueue.slice(0).concat(newJobs.jobList);\n      const jobRefCopy = Object.assign({}, couriers.jobQueueMap, newJobs.jobRef);\n\n      // if any couriers are available, pick from the top of the queue\n      const courierListCopy = couriersCopy.couriers.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          const newCourier = Object.assign({}, courier);\n\n          let nextJobIndex = getNextAvailableJob(jobArrayCopy, buildingRefCopy);\n          const nextJob = jobArrayCopy[nextJobIndex];\n          jobArrayCopy = jobArrayCopy.slice(nextJobIndex+1);\n          if (!nextJob) {\n            return courier;\n          }\n\n          const pickupFromId = nextJob.from;\n          const deliverToId = nextJob.to;\n          const good = nextJob.carrying;\n          let pickupFrom = null;\n          let deliverTo = null;\n          let amount = 0;\n\n          if (pickupFromId !== 'warehouse') {\n            pickupFrom = buildings.owned[pickupFromId];\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (deliverToId !== 'warehouse') {\n            deliverTo = buildings.owned[deliverToId];\n          } else {\n            deliverTo = warehouse;\n          }\n\n          if (pickupFromId === 'warehouse') {\n            const inboxRoom = BASE_IN_OUT_BOX_CAPACITY - deliverTo.inbox[good];\n            const currentSupply = Math.floor(resources[good].owned - resources[good].reserved);\n            amount = Math.min(inboxRoom, currentSupply);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.reserved += amount;\n            resources[good] = resourceCopy;\n          } else {\n            const currentOutbox = pickupFrom.outbox[good];\n            const warehouseRoom = Math.floor(warehouseMax - resources[good].owned - resources[good].pending);\n            amount = Math.min(currentOutbox, warehouseRoom);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.pending += amount;\n            resources[good] = resourceCopy;\n          }\n\n          nextJob.amount = amount;\n\n          newCourier.status = courierState.PICKING_UP;\n          newCourier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n          newCourier.jobDescription = nextJob;\n\n          return newCourier;\n        } else {\n          return courier;\n        }\n      });\n\n      couriersCopy.jobQueue = jobArrayCopy;\n      couriersCopy.jobQueueMap = jobRefCopy;\n\n      // work the couriers already on the job (look into merging with the map function up above)\n      const progressedCouriers = courierListCopy.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          return courier;\n        }\n\n        courier.progress += payload.tickIntervalSeconds;\n        if (courier.progress >= courier.timeThreshold) {\n          courier.progress -= courier.timeThreshold;\n          const jobDescription = courier.jobDescription;\n          const fromId = jobDescription.from;\n          const toId = jobDescription.to;\n          const product = jobDescription.carrying;\n          const amount = jobDescription.amount;\n          let pickupFrom = null;\n          let deliverTo = null;\n\n          if (fromId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(fromId)) {\n              pickupFrom = Object.assign({}, buildingRefCopy[fromId]);\n              buildingRefCopy[fromId] = pickupFrom;\n            }\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (toId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(toId)) {\n              deliverTo = Object.assign({}, buildingRefCopy[toId]);\n              buildingRefCopy[toId] = deliverTo;\n            }\n          } else {\n            deliverTo = warehouse;\n          }\n\n          switch (courier.status) {\n            case courierState.PICKING_UP: {\n              const payload = Object.assign({}, courier.payload);\n              courier.payload = payload;\n\n              if (fromId === 'warehouse') {\n                const resourceToTake = Object.assign({}, resources[product]);\n                resources[product] = resourceToTake;\n                resourceToTake.owned -= amount;\n                resourceToTake.reserved -= amount;\n                payload[product] = amount;\n              } else {\n                if (!pickupFrom) { // building got deleted...\n                  courier.payload = {};\n                  courier.status = courierState.IDLE;\n                  courier.jobDescription = {};\n                  courier.progress = 0;\n                  courier.timeThreshold = 0;\n\n                  delete jobRefCopy[courier.jobDescription.id];\n                  break;\n                }\n                const outbox = Object.assign({}, pickupFrom.outbox);\n                pickupFrom.outbox = outbox;\n                outbox[product] -= amount;\n                payload[product] = amount;\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.status = courierState.EN_ROUTE;\n              courier.timeThreshold = BASE_TRAVEL_TIME_SECONDS;\n              break;\n            }\n            case courierState.EN_ROUTE:\n              courier.status = courierState.DROPPING_OFF;\n              courier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n              break;\n            case courierState.DROPPING_OFF: {\n              // drop off goods\n              const payload = Object.assign({}, courier.payload);\n\n              if (toId === 'warehouse') {\n                const resourceToDeliver = Object.assign({}, resources[product]);\n                resources[product] = resourceToDeliver;\n                resourceToDeliver.owned += payload[product];\n                resourceToDeliver.pending -= amount;\n              } else {\n                if (!deliverTo) { // building got deleted...\n                  // return to warehouse\n                  const resourceToDeliver = Object.assign({}, resources[product]);\n                  resources[product] = resourceToDeliver;\n                  resourceToDeliver.owned += payload[product];\n                } else {\n                  const inbox = Object.assign({}, deliverTo.inbox);\n                  deliverTo.inbox = inbox;\n                  inbox[product] += amount;\n                }\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.payload = {};\n              courier.status = courierState.IDLE;\n              courier.jobDescription = {};\n              courier.progress = 0;\n              courier.timeThreshold = 0;\n              break;\n            }\n            default:\n              break;\n          }\n        }\n        return courier;\n      });\n\n      // check for any idle couriers marked for death\n      const killedCouriers = courierListCopy.filter((courier) => courier.status !== courierState.IDLE || !courier.markedForDeath);\n\n      couriersCopy.couriers = killedCouriers;\n\n      stateCopy.couriers = couriersCopy;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n}\n\nfunction addCouriers(courierArray, numToAdd) {\n  for (let i=0; i<numToAdd; i++) {\n    const newCourier = Object.assign({}, initCourier, {id: uuidv4()});\n    courierArray.push(newCourier);\n  }\n}\n\nconst SUPPLY_SUFFIX = '_SUPPLY';\nconst PICKUP_SUFFIX = '_PICKUP';\nfunction findJobs(courier, warehouse, buildings) {\n  const existingJobs = courier.jobQueueMap;\n  const warehouseMax = warehouse.totalCapacity;\n  const resources = warehouse.resources;\n\n  // check buildings that need input fed\n  const supplies = {\n    jobList: [],\n    jobRef: {}\n  }\n  for (let building of Object.values(buildings)) {\n    if (building.category !== BUILDING_CATEGORY.PRODUCER) {\n      continue;\n    }\n    for (let [ingredient, amount] of Object.entries(building.inbox)) {\n      const supplyKey = building.id + '_' + ingredient + '_' + SUPPLY_SUFFIX;\n      if (amount < BASE_IN_OUT_BOX_CAPACITY && !existingJobs[supplyKey]) {\n        const resource = resources[ingredient];\n        const supplyRemaining = Math.floor(resource.owned - resource.reserved);\n        if (supplyRemaining > 0) {\n          const newJob = {\n            id: supplyKey,\n            from: 'warehouse',\n            to: building.id,\n            carrying: ingredient\n          };\n          supplies.jobList.push(newJob);\n          supplies.jobRef[supplyKey] = newJob;\n        }\n      }\n    }\n  }\n\n  // check buildings that need outbox picked up\n  const pickups = Object.values(buildings).reduce((accumulator, building) => {\n    if (building.category !== BUILDING_CATEGORY.PRODUCER) {\n      return accumulator;\n    }\n    for (let [product, amount] of Object.entries(building.outbox)) {\n      const pickupKey = building.id + PICKUP_SUFFIX;\n      if (amount > 0 && !existingJobs[pickupKey]) {\n        const resource = resources[product];\n        const spaceRemaining = Math.floor(warehouseMax - resource.owned - resource.pending);\n        if (spaceRemaining > 0) {\n          const newJob = {\n            id: pickupKey,\n            from: building.id,\n            to: 'warehouse',\n            carrying: product\n          };\n          accumulator.jobList.push(newJob);\n          accumulator.jobRef[pickupKey] = newJob;\n        }\n      }\n    }\n    return accumulator;\n  }, {jobList: [], jobRef: {}});\n\n  const jobList = supplies.jobList.concat(pickups.jobList);\n  const jobRefs = Object.assign({}, supplies.jobRef, pickups.jobRef);\n  return {jobList: jobList, jobRef: jobRefs}; // TODO, this will need to be changed to include supply jobs\n}\n\n// The way a job is invalid is if one of the buildings has since been destroyed\nfunction getNextAvailableJob(jobArray, buildings) {\n  for (let jobIndex = 0; jobIndex < jobArray.length; jobIndex++) {\n    const nextJob = jobArray[jobIndex];\n\n    const pickupFromId = nextJob.from;\n    const deliverToId = nextJob.to;\n\n    if (pickupFromId !== 'warehouse' && !buildings.hasOwnProperty(pickupFromId)) {\n      continue;\n    }\n\n    if (deliverToId !== 'warehouse' && !buildings.hasOwnProperty(deliverToId)) {\n      continue;\n    }\n\n    return jobIndex;\n  }\n}\n","import { ACTIONS } from '../actions/housing';\nimport BuildingDefinitions from './building-definitions';\n\nconst initHouseState = {\n  popProgress: 0,\n  currentPop: 1\n};\n\nconst ascensionFactors = {\n  peasanthouse: .8,\n  citizenhouse: .6\n}\n\n// precomputed list of current house and up because I'm lazy\nconst rightsLists = {\n  peasanthouse: ['peasanthouse', 'citizenhouse'],\n  citizenhouse: ['citizenhouse'],\n  patricianhouse: []\n}\n\nexport default function(housing = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUILD_HOUSE: {\n      const newState = Object.assign({}, housing);\n      const types = Object.assign({}, newState.types);\n      const abodes = newState.abodes.slice(0);\n      newState.types = types;\n      newState.abodes = abodes;\n\n      const toBuild = payload.toConstruct.id; // should really just be peasanthouse\n      const type = Object.assign({}, types[toBuild]);\n      types[toBuild] = type;\n      const abode = Object.assign({}, BuildingDefinitions[toBuild], initHouseState, {houseId: toBuild});\n\n      type.owned += 1;\n      abodes.push(abode);\n\n      calculateAscensionRights(types, type, toBuild);\n\n      return newState;\n    }\n    case ACTIONS.ASCEND_HOUSE: {\n      const fromHouseId = payload.fromHouse;\n      const toHouseId = BuildingDefinitions[fromHouseId].ascendsTo;\n\n      const fromType = {...housing.types[fromHouseId]};\n      const toType = {...housing.types[toHouseId]};\n      const types = {...housing.types, [fromHouseId]: fromType, [toHouseId]: toType};\n      const abodes = [...housing.abodes];\n      const newState = {...housing, types: types, abodes: abodes};\n      const nextHouse = BuildingDefinitions[toHouseId];\n\n      // find the first house that's able to be ascended\n      const ascendIndex = abodes.findIndex((house) => house.houseId === fromHouseId);\n      abodes.splice(ascendIndex, 1);\n      abodes.push({...nextHouse, ...initHouseState, houseId: toHouseId});\n      fromType.owned -= 1;\n      toType.owned += 1;\n\n      calculateAscensionRights(types, fromType, fromHouseId);\n      calculateAscensionRights(types, toType, toHouseId);\n\n      return newState;\n    }\n    default:\n      return housing;\n  }\n};\n\nfunction calculateAscensionRights(allTypes, type, toCheck) {\n  const totalHouses = rightsLists[toCheck].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.totalAscensionRights = Math.floor(ascensionFactors[toCheck] * totalHouses);\n  const ascendTo = BuildingDefinitions[toCheck].ascendsTo;\n  const alreadyAscended = rightsLists[ascendTo].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.remainingAscensionRights = type.totalAscensionRights - alreadyAscended;\n}\n","import { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport BuildingDefinitions from './building-definitions';\n\nconst POP_ASCENSION_HAPPINESS_THRESHOLD = 97;\n\nconst initValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  canAscend: false,\n  consumeInfo: ''\n}\n\nexport default function(populationState = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.INIT: {\n      const newState = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(newState)) {\n        const newPop = Object.assign({}, pop, initValues);\n        newState[popType] = newPop;\n      }\n\n      return newState;\n    }\n    case housingActions.BUILD_HOUSE: {\n      const houseBuilt = BuildingDefinitions[payload.toConstruct.id];\n      const newState = Object.assign({}, populationState);\n\n      const modifiedPop = Object.assign({}, newState[houseBuilt.populationCategory]);\n      newState[modifiedPop.id] = modifiedPop;\n\n      modifiedPop.maxPopulation += houseBuilt.populationCap;\n\n      return newState;\n    }\n    case gameActions.TICK: {\n      const population = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(population)) {\n        if (pop.happiness > POP_ASCENSION_HAPPINESS_THRESHOLD && pop.owned === pop.maxPopulation) {\n          population[popType] = { ...pop, canAscend: true };\n        } else {\n          population[popType] = { ...pop, canAscend: false}\n        }\n      }\n\n      return population;\n    }\n    case housingActions.ASCEND_HOUSE: {\n      const currentHouse = BuildingDefinitions[payload.fromHouse];\n      const nextHouse = BuildingDefinitions[currentHouse.ascendsTo];\n\n      const oldPop = {...populationState[currentHouse.populationCategory]};\n      const nextPop = {...populationState[nextHouse.populationCategory]};\n\n      oldPop.owned -= currentHouse.populationCap;\n      nextPop.owned += currentHouse.populationCap;\n      oldPop.maxPopulation -= currentHouse.populationCap;\n      nextPop.maxPopulation += nextHouse.populationCap;\n\n      return {...populationState, [currentHouse.populationCategory]: oldPop, [nextHouse.populationCategory]: nextPop};\n    }\n    default:\n      return populationState;\n  }\n};\n","// this could probably be done with thunk instead\nimport { ACTIONS } from '../actions/game';\nimport { BUILDING_CATEGORY } from './building-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const buildings = state.buildings;\n\n      const amenities = {};\n      for (let building of Object.values(buildings.owned)) {\n        if (building.category !== BUILDING_CATEGORY.AMENITY) {\n          continue;\n        }\n\n        for (let [amenity, amount] of Object.entries(building.produces)) {\n          if (!amenities[amenity]) {\n            amenities[amenity] = 0;\n          }\n\n          amenities[amenity] += amount * timeIntervalS * TIME_FACTOR;\n        }\n      }\n\n      newState.amenities = amenities;\n      return newState;\n    default:\n      return state;\n  }\n}\n","const PopulationDefinitions = {\n  peasant: {\n    name: 'Peasant',\n    taxRate: 0.8,\n    consumes: {\n      community: {\n        quantity: 1,\n        weight: 25\n      },\n      fish: {\n        quantity: 1,\n        weight: 25\n      },\n      cider: {\n        quantity: 0.44,\n        weight: 25\n      },\n      faith: {\n        quantity: 1,\n        weight: 25\n      }\n    }\n  },\n  citizen: {\n    name: 'Citizen',\n    taxRate: 0.95,\n    consumes: {\n      fish: {\n        quantity: .4,\n        weight: 8\n      },\n      spice: {\n        quantity: .4,\n        weight: 12\n      },\n      cider: {\n        quantity: .44,\n        weight: 20\n      },\n      linen: {\n        quantity: 0.42,\n        weight: 20\n      },\n      community: {\n        quantity: 1,\n        weight: 20\n      },\n      faith: {\n        quantity: 1,\n        weight: 20\n      }\n    }\n  }\n};\n\nexport default PopulationDefinitions;\n","import { ACTIONS } from '../actions/game';\nimport PopulationDefinitions from './population-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\nconst CONSUME_FACTOR = 1 / 100.0;\nconst MIN_HAPPINESS_DELTA = 0.001;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const amenities = newState.amenities;\n      const population = Object.assign({}, newState.population);\n      newState.warehouse = warehouse;\n      newState.population = population;\n\n      for (const [popType, popOriginal] of Object.entries(state.population)) {\n        const pop = Object.assign({}, popOriginal);\n        pop.consumeInfo = null;\n        let currentHappiness = 0;\n        if (popOriginal.owned !== 0) {\n          for (const [product, consumeInfo] of Object.entries(PopulationDefinitions[popType].consumes)) {\n            const consumed = consumeInfo.quantity * pop.owned * timeIntervalS * TIME_FACTOR * CONSUME_FACTOR;\n            let pctSatisfied = 1;\n\n            if (amenities[product]) {\n              if (amenities[product] < consumed) {\n                pctSatisfied = amenities[product] / consumed;\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              amenities[product] -= consumed;\n              if (amenities[product] < 0) {\n                amenities[product] = 0;\n              }\n            } else if (resources[product]) {\n              const resource = Object.assign({}, resources[product]);\n              resources[product] = resource;\n\n              if (resource.owned < consumed) {\n                pctSatisfied = resource.owned / consumed\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              resource.owned -= consumed;\n              if (resource.owned < 0) {\n                resource.owned = 0;\n              }\n            } else {\n              pctSatisfied = 0;\n              if (!pop.consumeInfo) {\n                pop.consumeInfo = 'Need ' + product;\n              }\n            }\n\n            currentHappiness += consumeInfo.weight * pctSatisfied;\n          }\n        }\n\n        let happinessDiff = (currentHappiness - pop.happiness) / 100.0;\n        if (Math.abs(happinessDiff) < MIN_HAPPINESS_DELTA) {\n          happinessDiff = MIN_HAPPINESS_DELTA;\n        }\n        pop.happiness += happinessDiff;\n        population[popType] = pop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import { ACTIONS } from '../actions/game';\n\nconst POP_GROWTH_TIME_SECONDS = 10;\nconst POP_GROWTH_THRESHOLD = 40;\nconst POP_DECLINE_THRESHOLD = 20;\n\nexport default function(state = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const houses = Object.assign({}, newState.housing);\n      const population = Object.assign({}, newState.population);\n      newState.housing = houses;\n      newState.population = population;\n\n      const populationCounts = {};\n      // go house by house, increment growth timer\n      const newAbodes = houses.abodes.map((abodeOriginal) => {\n        const abode = Object.assign({}, abodeOriginal);\n        const curHappiness = population[abode.populationCategory].happiness;\n        let growthFactor = 0;\n\n        if (curHappiness >= POP_GROWTH_THRESHOLD && abode.currentPop < abode.populationCap) {\n          growthFactor = 1;\n        }\n        if (curHappiness <= POP_DECLINE_THRESHOLD && abode.currentPop > 0) {\n          growthFactor = -1;\n        }\n\n        abode.popProgress += timeIntervalS * growthFactor;\n        if (abode.popProgress > POP_GROWTH_TIME_SECONDS || abode.popProgress < -POP_GROWTH_TIME_SECONDS) {\n          abode.popProgress -= POP_GROWTH_TIME_SECONDS * growthFactor;\n          abode.currentPop += growthFactor;\n        }\n\n        if (abode.currentPop < 1) {\n          abode.currentPop = 1;\n        }\n\n        if (!populationCounts[abode.populationCategory]) {\n          populationCounts[abode.populationCategory] = 0;\n        }\n\n        populationCounts[abode.populationCategory] += abode.currentPop;\n\n        return abode;\n      });\n      houses.abodes = newAbodes;\n\n      for (let [popType, popCount] of Object.entries(populationCounts)) {\n        const newPop = Object.assign({}, population[popType]);\n        newPop.owned = popCount;\n        population[popType] = newPop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import { ACTIONS } from '../actions/game';\nimport BuildingDefinitions from './building-definitions';\nimport PopulationDefinitions from './population-definitions';\n\nconst TIME_FACTOR = 1/60.0;\nconst TAX_HAPPINESS_FACTOR = 1 / 100.0;\nconst TAX_HAPPINESS_MINIMUM = 0.01;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      const gold = Object.assign({}, resources.gold);\n      newState.warehouse = warehouse;\n      warehouse.resources = resources;\n      resources.gold = gold;\n\n      const financeInfo = {\n        maintenanceCost: 0,\n        taxRevenue: 0\n      }\n\n      // start with Warehouse maintenance\n      const warehouseMaintenance = BuildingDefinitions[warehouse.type].upkeep * timeIntervalS * TIME_FACTOR;\n      const totalMaintenance = Object.values(state.construction).reduce((sum, construction) => {\n        return sum + (BuildingDefinitions[construction.id].upkeep * construction.owned * timeIntervalS * TIME_FACTOR);\n      }, warehouseMaintenance);\n\n      const totalTaxes = Object.values(state.population).reduce((sum, population) => {\n        let happinessFactor = population.happiness * TAX_HAPPINESS_FACTOR;\n        if (happinessFactor < TAX_HAPPINESS_MINIMUM) {\n          happinessFactor = TAX_HAPPINESS_MINIMUM;\n        }\n        return sum + (PopulationDefinitions[population.id].taxRate * population.owned * timeIntervalS * TIME_FACTOR * happinessFactor);\n      }, 0);\n\n      financeInfo.maintenanceCost = totalMaintenance;\n      financeInfo.taxRevenue = totalTaxes;\n      newState.financeInfo = financeInfo;\n\n      gold.owned = gold.owned + totalTaxes - totalMaintenance;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","export const unlockThresholds = [\n  ['peasant', 60],\n  ['peasant', 90],\n  ['citizen', 1],\n  ['citizen', 355],\n  ['patrician', 510],\n  ['patrician', 1190],\n  ['nobleman', 950],\n  ['nobleman', 2200],\n  ['nobleman', 3500],\n  ['nobleman', 7500]\n];\n\nexport const unlocks = [\n  // initial state\n  {\n    title: 'Small Settlement',\n    buildings: ['marketplace', 'fishinghut', 'lumberjackhut'],\n    population: 'peasant',\n    resources: ['gold', 'wood', 'tool', 'fish']\n  },\n  // 60 peasants\n  {\n    buildings: ['orchard', 'ciderfarm'],\n    resources: ['apple', 'cider']\n  },\n  // 90 peasants\n  {\n    title: 'Settlement',\n    buildings: ['chapel']\n  },\n  // 1 citizen\n  {\n    population: 'citizen',\n    resources: ['hemp', 'linen', 'stone', 'stonebrick', 'spice'],\n    buildings: ['hempfarm', 'weavers', 'quarry', 'stonemason'],\n    housing: ['citizenhouse']\n  }\n];\n","import { ACTIONS } from '../actions/game';\nimport { unlockThresholds, unlocks } from './level-up-definitions'\n\nexport default function(state = {}, action) {\n  switch (action.type) {\n    case ACTIONS.TICK: {\n      const [unlockPopType, popRequired] = unlockThresholds[state.island.level - 1];\n      const currentPop = state.population[unlockPopType].owned;\n      if (currentPop >= popRequired) {\n        const newState = Object.assign({}, state);\n        const island = Object.assign({}, newState.island);\n        newState.island = island;\n        island.level++;\n\n        const unlocked = unlocks[island.level - 1];\n        if (unlocked.title) {\n          island.title = unlocked.title;\n        }\n        if (unlocked.buildings) {\n          const constructions = Object.assign({}, newState.construction);\n          newState.construction = constructions;\n          unlocked.buildings.forEach(conId => {\n            const construction = Object.assign({}, constructions[conId]);\n            construction.unlocked = true;\n            constructions[conId] = construction;\n          });\n        }\n        if (unlocked.resources) {\n          const warehouse = Object.assign({}, newState.warehouse);\n          const resources = Object.assign({}, warehouse.resources);\n          newState.warehouse = warehouse;\n          warehouse.resources = resources;\n          unlocked.resources.forEach(resId => {\n            const resource = Object.assign({}, resources[resId]);\n            resources[resId] = resource;\n            resource.unlocked = true;\n          });\n        }\n        if (unlocked.population) {\n          const population = Object.assign({}, newState.population);\n          newState.population = population;\n          const popUnlocked = Object.assign({}, population[unlocked.population]);\n          popUnlocked.unlocked = true;\n          population[unlocked.population] = popUnlocked;\n        }\n        if (unlocked.housing) {\n          const types = {...newState.housing.types}\n          const housing = {...newState.housing, types: types};\n          newState.housing = housing;\n          unlocked.housing.forEach(houseId => {\n            const unlockedHouse = {...types[houseId], unlocked: true};\n            types[houseId] = unlockedHouse;\n          });\n        }\n\n        return newState;\n      }\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","export const ACTIONS = {\n  SET_TIME_FACTOR: 'SET_TIME_FACTOR'\n}\n\nexport function setTimeFactor(timeFactor) {\n  return { type: ACTIONS.SET_TIME_FACTOR, payload: { timeFactor: timeFactor }};\n}\n","import { ACTIONS } from '../actions/cheats';\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.SET_TIME_FACTOR:\n      return {\n        ...state,\n        cheat: {\n          timeFactor: payload.timeFactor\n        }\n      }\n    default:\n      return state;\n  }\n}\n","const Traders = {\n  lord: {\n    name: 'Lord Farquaad',\n    rates: {\n      wood: {\n        buy: .5,\n        sell: 1.2\n      },\n      tool: {\n        buy: .5,\n        sell: 1.2\n      },\n      stonebrick: {\n        buy: .5,\n        sell: 1.2\n      },\n      spice: {\n        buy: 1,\n        sell: 0\n      }\n    },\n    baseCapacity: 30\n  },\n  prince: {\n    name: 'Prince Ali',\n    rates: {\n      wood: {\n        buy: 1,\n        sell: 1\n      },\n      tool: {\n        buy: 1,\n        sell: 1.2\n      },\n      spice: {\n        buy: 0,\n        sell: 1.25\n      }\n    },\n    baseCapacity: 40\n  }\n};\n\nexport default Traders;\n","const ResourceDefinitions = {\n  gold: {\n    name: 'Gold',\n    baseTradePrice: 1\n  },\n  tool: {\n    name: 'Tool',\n    baseTradePrice: 15\n  },\n  fish: {\n    name: 'Fish',\n    baseTradePrice: 3\n  },\n  wood: {\n    name: 'Wood',\n    baseTradePrice: 1\n  },\n  apple: {\n    name: 'Apple',\n    baseTradePrice: 0.2\n  },\n  cider: {\n    name: 'Cider',\n    baseTradePrice: 3\n  },\n  hemp: {\n    name: 'Hemp',\n    baseTradePrice: 4\n  },\n  linen: {\n    name: 'Clothing',\n    baseTradePrice: 27\n  },\n  stone: {\n    name: 'Stone',\n    baseTradePrice: 6\n  },\n  stonebrick: {\n    name: 'Stone Brick',\n    baseTradePrice: 8\n  },\n  spice: {\n    name: 'Spice',\n    baseTradePrice: 6\n  },\n};\n\nexport default ResourceDefinitions;\n","import { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS } from '../actions/trade';\nimport Traders from '../data/trader-info';\nimport ResourceDefinitions from './resource-definitions';\n\nconst BASE_TRADER_STAY_TIME_SECONDS = 360;\nconst BASE_TRADER_VACANCY_TIME_SECONDS = 180;\nconst BASE_DISMISS_COST = 100;\n\nconst INIT_STATE = {\n  traderId: 0,\n  timer: 0,\n  timeToLeave: BASE_TRADER_STAY_TIME_SECONDS,\n  wares: {},\n  newGame: true,\n  dismissCost: BASE_DISMISS_COST\n};\n\nexport default function(trader=INIT_STATE, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUY_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held -= amount;\n\n      return newState;\n    }\n    case ACTIONS.SELL_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held += amount;\n\n      return newState;\n    }\n    case gameActions.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = {...trader};\n      newState.timer += timeIntervalS;\n      if (newState.timer > newState.timeToLeave) {\n        newState.timer -= newState.timeToLeave;\n        return newTrader(newState);\n      }\n      return newState;\n    case ACTIONS.DISMISS_TRADER: {\n      const newState = {...trader};\n      newState.traderId = 0;\n      newState.wares = {};\n      newState.time = 0;\n      newState.timeToLeave = BASE_TRADER_VACANCY_TIME_SECONDS;\n      return newState;\n    }\n    default:\n      return trader;\n  }\n};\n\nfunction newTrader(currentState) { // atm, more like \"restock goods\"\n  const traders = Object.keys(Traders);\n  let selectedTrader = traders[Math.floor(Math.random() * traders.length)];\n  if (currentState.newGame) {\n    currentState.newGame = false;\n    selectedTrader = 'lord';\n  }\n  const traderInfo = Traders[selectedTrader];\n  const wares = {};\n  const maxCapacity = traderInfo.baseCapacity;\n  const timeToLeave = BASE_TRADER_STAY_TIME_SECONDS;\n  const newState = {\n    ...currentState,\n    traderId: selectedTrader,\n    wares: wares,\n    maxCapacity: maxCapacity,\n    timeToLeave: timeToLeave\n  };\n\n  for (let [good, rates] of Object.entries(traderInfo.rates)) {\n    const goodBasePrice = ResourceDefinitions[good].baseTradePrice;\n    const buyPrice = rates.buy * goodBasePrice;\n    const sellPrice = rates.sell * goodBasePrice;\n\n    wares[good] = {\n      buyPrice: buyPrice,\n      sellPrice: sellPrice,\n      held: 0\n    }\n    if (sellPrice > 0) {\n      wares[good].held = Math.floor(maxCapacity * 0.75);\n    }\n  }\n\n  return newState;\n}\n","import { ACTIONS } from '../actions/game';\nimport { combineReducers } from 'redux';\nimport island from './island';\nimport warehouse from './warehouse';\nimport construction from './construction';\nimport buildings from './building';\nimport couriers from './couriers';\nimport housing from './housing';\nimport population from './population';\nimport amenity from './amenities';\nimport consume from './consume';\nimport growth from './growth';\nimport finance from './finance';\nimport levelUp from './level-up';\nimport cheat from './cheat';\nimport trader from './trader';\n\nconst combinedReducer = combineReducers({\n  cheat: (state = {}) => { return state },\n  island: island,\n  warehouse: warehouse,\n  construction: construction,\n  buildings: buildings,\n  couriers: (state = {}) => { return state }, // no op\n  housing: housing,\n  population: population,\n  trader: trader\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === ACTIONS.LOAD_GAME) {\n    return action.payload.saveState;\n  }\n  if (action.type === ACTIONS.TICK) {\n    let timeFactor = state.cheat.timeFactor;\n    if (!timeFactor) {\n      timeFactor = 1;\n    }\n    action.payload.tickIntervalSeconds *= timeFactor;\n  }\n  const cheatState = cheat(state, action);\n  const intermediateState = combinedReducer(cheatState, action);\n  const courierState = couriers(intermediateState, action);\n  if (action.type === ACTIONS.TICK) {\n    const amenityState = amenity(courierState, action);\n    const consumptionState = consume(amenityState, action);\n    const growthState = growth(consumptionState, action);\n    const financeState = finance(growthState, action);\n    const levelUpState = levelUp(financeState, action);\n    return levelUpState;\n  } else {\n    return courierState;\n  }\n}\n\nexport default rootReducer;\n","const INITIAL_STATE = {\n  island: {\n    level: 1,\n    title: 'Small Settlement',\n    name: 'New Island'\n  },\n  construction: {\n    peasanthouse: {\n      id: 'peasanthouse',\n      owned: 0,\n      cost: {\n        wood: 2\n      },\n      unlocked: true\n    },\n    marketplace: {\n      id: 'marketplace',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      },\n      unlocked: true\n    },\n    fishinghut: {\n      id: 'fishinghut',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 3,\n        tool: 2\n      },\n      unlocked: true\n    },\n    lumberjackhut: {\n      id: 'lumberjackhut',\n      owned: 0,\n      cost: {\n        gold: 50,\n        tool: 2\n      },\n      unlocked: true\n    },\n    smallstockpile: {\n      id: 'smallstockpile',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 2,\n        tool: 3\n      },\n      unlocked: true\n    },\n    orchard: {\n      id: 'orchard',\n      owned: 0,\n      cost: {\n        gold: 25\n      },\n      unlocked: false\n    },\n    ciderfarm: {\n      id: 'ciderfarm',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 5,\n        tool: 1\n      },\n      unlocked: false\n    },\n    chapel: {\n      id: 'chapel',\n      owned: 0,\n      cost: {\n        gold: 1500,\n        wood: 12,\n        tool: 5\n      },\n      unlocked: false\n    },\n    hempfarm: {\n      id: 'hempfarm',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 2\n      },\n      unlocked: false\n    },\n    weavers: {\n      id: 'weavers',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      }\n    },\n    quarry: {\n      id: 'quarry',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    },\n    stonemason: {\n      id: 'stonemason',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    }\n  },\n  buildings: {\n    owned: {}\n  },\n  warehouse: {\n    type: 'smallwarehouse',\n    totalCapacity: 40,\n    resources: {\n      gold: {\n        id: 'gold',\n        owned: 5000,\n        unlocked: true\n      },\n      tool: {\n        id: 'tool',\n        owned: 40,\n        unlocked: true\n      },\n      fish: {\n        id: 'fish',\n        owned: 2,\n        unlocked: true\n      },\n      wood: {\n        id: 'wood',\n        owned: 40,\n        unlocked: true\n      },\n      apple: {\n        id: 'apple',\n        owned: 0,\n        unlocked: false\n      },\n      cider: {\n        id: 'cider',\n        owned: 0,\n        unlocked: false\n      },\n      hemp: {\n        id: 'hemp',\n        owned: 0,\n        unlocked: false\n      },\n      spice: {\n        id: 'spice',\n        owned: 0,\n        unlocked: false\n      },\n      linen: {\n        id: 'linen',\n        owned: 0,\n        unlocked: false\n      },\n      stone: {\n        id: 'stone',\n        owned: 0,\n        unlocked: false\n      },\n      stonebrick: {\n        id: 'stonebrick',\n        owned: 0,\n        unlocked: false\n      }\n    },\n  },\n  couriers: {\n    couriers:[],\n    jobQueue: [],\n    jobQueueMap: {}\n  },\n  housing: {\n    types: {\n      peasanthouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: true,\n      },\n      citizenhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      patricianhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      noblehouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      }\n    },\n    abodes: []\n  },\n  population: {\n    peasant: {\n      id: 'peasant',\n      unlocked: true\n    },\n    citizen: {\n      id: 'citizen',\n      unlocked: false\n    }\n  }\n};\n\nexport default INITIAL_STATE;\n","export default class Scheduler {\n  constructor(functionToRun, targetInterval) {\n    this.targetFunction = functionToRun;\n    this.targetInterval = targetInterval;\n    this.running = false;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n    let lastTick = Date.now();\n    this.running = true;\n    let repeater = () => {\n      if (!this.running) {\n          return;\n      }\n      let currentTime = Date.now();\n      let elapsedTime = currentTime - lastTick;\n      this.targetFunction(elapsedTime);\n      lastTick = currentTime;\n      setTimeout(repeater.bind(this), this.targetInterval);\n    }\n    setTimeout(repeater.bind(this), this.targetInterval);\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setTimeFactor } from '../../actions/cheats';\n\nconst TimeFactor = () => {\n  const dispatch = useDispatch();\n  const [timeFactor, setTf] = useState(1);\n\n  const handleSubmit = (event) => {\n    dispatch(setTimeFactor(timeFactor));\n    event.preventDefault();\n  }\n\n  return (\n    <div className='time-factor'>\n      <form onSubmit={handleSubmit}>\n        <input type='number' name='timeFactor' onChange={e => setTf(e.target.value)} required></input>\n        <input type='submit' value='Set time factor' />\n      </form>\n    </div>\n  )\n};\n\nexport default TimeFactor;\n","export const filterUnlocked = (collectionObject) => {\n  return Object.entries(collectionObject).reduce((accumulator, [key, value]) => {\n    if (value.unlocked) {\n      accumulator[key] = value;\n    }\n    return accumulator;\n  }, {});\n};\n\nexport const setAffordable = (buyable, resources) => {\n  for (let [resource, amount] of Object.entries(buyable.cost)) {\n    if (!resources[resource]) {\n      // thing costs a resource the player hasn't unlocked\n      return {...buyable, canAfford: false};\n    } else if (resources[resource].owned < amount) {\n      return Object.assign({}, buyable, {canAfford: false});\n    }\n  }\n  return Object.assign({}, buyable, {canAfford: true});\n};\n\nexport const setAllAffordable = (buyableCollection, resources) => {\n  return Object.entries(buyableCollection).reduce((accumulator, [buyableId, buyable]) => {\n    accumulator[buyableId] = setAffordable(buyable, resources);\n    return accumulator;\n  }, {});\n};\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { upgradeWarehouse } from '../actions/warehouse';\nimport { filterUnlocked, setAffordable } from '../selectors';\nimport Buildings from '../reducers/building-definitions';\nimport ResourceDefinitions from '../reducers/resource-definitions';\n\nimport '../../style/resource.css';\n\nconst ResourcePanel = () => {\n  const warehouseType = useSelector(state => state.warehouse.type);\n  const resources = useSelector(state => filterUnlocked(state.warehouse.resources), shallowEqual);\n  const max = useSelector(state => state.warehouse.totalCapacity);\n  const warehouseInfo = Buildings[warehouseType];\n  const dispatch = useDispatch();\n\n  const upgradeWarehouseFn = () => {\n    dispatch(upgradeWarehouse(warehouseType));\n  }\n\n  let upgradeButton = null;\n  if (warehouseInfo.upgradesTo && setAffordable({cost: warehouseInfo.upgradeCost}, resources).canAfford) {\n    upgradeButton = (\n      <button onClick={upgradeWarehouseFn}>Upgrade</button>\n    );\n  }\n\n  return (\n    <div className='resource-panel'>\n      <h4>{warehouseInfo.name}</h4>\n      {upgradeButton}\n      <div className='resource-list'>\n        {Object.keys(resources).map((item, key) => {\n            const resourceName = ResourceDefinitions[item].name;\n            if (item !== 'gold') {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)} / {max}</div>;\n            } else {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)}</div>;\n            }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResourcePanel;\n","import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport ResourceDefinitions from '../reducers/resource-definitions';\n\nimport '../../style/courier.css';\n\nconst CourierMonitor = () => {\n  const couriers = useSelector(state => state.couriers, shallowEqual);\n  const buildings = useSelector(state => state.buildings, shallowEqual);\n\n  function jobDescriptionToString(jobDescription) {\n    if (!jobDescription.id) {\n      return 'Sitting idly';\n    }\n    const what = ResourceDefinitions[jobDescription.carrying].name;\n    const howMuch = jobDescription.amount;\n    const fromWhereId = jobDescription.from;\n    let fromWhere = 'nowhere?!';\n    if (fromWhereId === 'warehouse') {\n      fromWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[fromWhereId];\n      if (!building) {\n        fromWhere = '???';\n      } else {\n        fromWhere = building.name;\n      }\n    }\n    const toWhereId = jobDescription.to;\n    let toWhere = 'nowhere?!';\n    if (toWhereId === 'warehouse') {\n      toWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[toWhereId];\n      if (!building) {\n        toWhere = '???';\n      } else {\n        toWhere = building.name;\n      }\n    }\n    return `Delivering ${howMuch} ton of ${what} from ${fromWhere} to ${toWhere}`;\n  }\n\n  const courierList = couriers.couriers.map((courier) => {\n    return (\n      <div className='courier' key={courier.id}>\n        <div>{courier.status}</div>\n        <div>{courier.progress.toFixed(1)}</div>\n        {/**<div>{jobDescriptionToString(courier.jobDescription)}</div>**/}\n        <div>{JSON.stringify(courier.payload)}</div>\n      </div>\n    );\n  });\n\n  return (\n    <div className='courier-monitor'>\n      {courierList}\n    </div>\n  );\n};\n\nexport default CourierMonitor;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked, setAllAffordable } from '../selectors';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../reducers/building-definitions';\nimport ResourceDefinitions from '../reducers/resource-definitions';\nimport { constructBuilding } from '../actions/construction';\nimport { buildHouse } from '../actions/housing';\nimport { buildWarehouse } from '../actions/warehouse';\n\nimport '../../style/construction.css';\n\nconst ConstructionPanel = () => {\n  const resources = useSelector(state => state.warehouse.resources);\n  const construction = useSelector(state => setAllAffordable(filterUnlocked(state.construction), resources), shallowEqual);\n  const dispatch = useDispatch();\n\n  const constructionList = Object.entries(construction).map(([buildingId, construction]) => {\n    const buildingInfo = BuildingDefinitions[buildingId];\n    const ingredientPanel = Object.keys(construction.cost).map((ingredient) => (\n      <div className='construction-ingredient' key={ingredient}>{ResourceDefinitions[ingredient].name}: {construction.cost[ingredient]}</div>\n    ));\n\n    let buyFunction = null;\n    if (buildingInfo.category === BUILDING_CATEGORY.HOUSE) {\n      buyFunction = () => dispatch(buildHouse(construction));\n    } else if (buildingInfo.category === BUILDING_CATEGORY.WAREHOUSE) {\n      buyFunction = () => dispatch(buildWarehouse(construction));\n    } else {\n      buyFunction = () => dispatch(constructBuilding(construction));\n    }\n\n    return (\n      <div className='construction' key={buildingId}>\n        <div className='construction-header'><h4>{buildingInfo.name}</h4></div>\n        <div className='description'><h5>{buildingInfo.description}</h5></div>\n        <div>Owned: {construction.owned}</div>\n        <div className='ingredientList'>{ingredientPanel}</div>\n        <button className='purchase' onClick={buyFunction} disabled={!construction.canAfford}>Buy</button>\n      </div>\n    )\n  });\n  return (\n    <div className='construction-panel'>\n      {constructionList}\n    </div>\n  )\n};\n\nexport default ConstructionPanel;\n","import React from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { BUILDING_CATEGORY } from '../reducers/building-definitions';\nimport { destroyBuilding } from '../actions/construction';\n\nimport '../../style/building.css';\n\nconst BuildingPanel = () => {\n  const buildingState = useSelector(state => state.buildings, shallowEqual);\n  const dispatch = useDispatch();\n  const buildings = buildingState.owned;\n\n  const destroyBuildingFn = (toDestroy) => {\n    dispatch(destroyBuilding(toDestroy));\n  }\n\n  let buildingList = Object.values(buildings).map((building) => {\n    if (building.category === BUILDING_CATEGORY.PRODUCER) {\n      return <Building building={building} key={building.id} destroyFunc={destroyBuildingFn}></Building>\n    } else {\n      return (\n        <div className='building' key={building.id}>\n          <div className='building-header'><h4>{building.name}</h4></div>\n          <button onClick={() => destroyBuildingFn(building)}>Destroy</button>\n        </div>\n      )\n    }\n  });\n\n  return (\n    <div className='building-panel'>\n      {buildingList}\n    </div>\n  );\n};\n\nconst Building = (props) => {\n  let building = props.building;\n  return (\n    <div className='building'>\n      <div className='building-header'><h4>{building.name}</h4></div>\n      <div className='status'>{building.status}</div>\n      <div>{building.progress.toFixed(1)} / {building.produceTime}</div>\n      <div>Efficiency: {building.efficiency}</div>\n      <div className='inbox'>Inbox: {JSON.stringify(building.inbox)}</div>\n      <div className='outbox'>Outbox: {JSON.stringify(building.outbox)}</div>\n      <button onClick={() => props.destroyFunc(building)}>Destroy</button>\n    </div>\n  )\n};\n\nexport default BuildingPanel;\n","import React from 'react';\nimport PopulationDefinitions from '../reducers/population-definitions';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/population.css';\n\nconst PopulationPanel = () => {\n  const populationState = useSelector(state => filterUnlocked(state.population), shallowEqual);\n\n  const populationList = Object.values(populationState).map((pop) => {\n      const popName = PopulationDefinitions[pop.id].name;\n      const happiness = pop.happiness ? pop.happiness.toFixed() : 0;\n      return <div className='population' key={pop.id}>\n        {popName}: {pop.owned} / {pop.maxPopulation} Happiness: {happiness} {pop.consumeInfo}\n      </div>\n  });\n\n  return (\n    <div className='population-panel'>\n      {populationList}\n    </div>\n  )\n}\n\nexport default PopulationPanel;\n","import React from 'react';\nimport BuildingDefinitions from '../reducers/building-definitions';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport { ascendHouse } from '../actions/housing';\n\nimport '../../style/housing.css';\n\nconst HousingPanel = () => {\n  const dispatch = useDispatch();\n\n  const houses = useSelector((state) => filterUnlocked(state.housing.types), shallowEqual);\n  const population = useSelector((state) => state.population, shallowEqual);\n  let housingList = Object.keys(houses).map((houseId) => {\n    const housedPopulation = population[BuildingDefinitions[houseId].populationCategory];\n    const canAscend = (houses[houseId].remainingAscensionRights > 0) && housedPopulation.canAscend;\n    const availableAscensions = canAscend ? houses[houseId].remainingAscensionRights : 0;\n    return <div className='housing' key={houseId}>\n      <div className='housing-data'>{BuildingDefinitions[houseId].name}: {houses[houseId].owned}</div>\n      <div><button onClick={() => {dispatch(ascendHouse(houseId, BuildingDefinitions[houseId].ascendsTo))}} disabled={!canAscend}>Ascend</button>{availableAscensions}</div>\n    </div>\n  });\n\n  return (\n    <div className='housing-panel'>\n      {housingList}\n    </div>\n  )\n};\n\nexport default HousingPanel;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { loadGame } from '../actions/game';\n\nconst SaveLoad = () => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const copyState = () => {\n    const saveState = btoa(JSON.stringify(state));\n    navigator.clipboard.writeText(saveState).then(() => {\n      alert('Saved to clipboard');\n    });\n  }\n\n  const loadState = () => {\n    const loadState = JSON.parse(atob(prompt('Enter load data')));\n    if (!loadState) {\n      alert('Invalid save state');\n    } else {\n      dispatch(loadGame(loadState));\n    }\n  }\n\n  return (\n    <div className='save-load'>\n      <button onClick={copyState}>Save</button>\n      <button onClick={loadState}>Load</button>\n    </div>\n  )\n}\n\nexport default SaveLoad;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport Resources from '../reducers/resource-definitions';\nimport Traders from '../data/trader-info';\nimport { buyGood, sellGood, dismissTrader } from '../actions/trade';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/trade.css';\n\nconst TradePanel = () => {\n  const traderState = useSelector(state => state.trader, shallowEqual);\n  const warehouse = useSelector(state => state.warehouse, shallowEqual);\n  const dispatch = useDispatch();\n\n  if (traderState.traderId === 0) {\n    return (\n      <div className='trade-panel'>\n        <h4>Your port is empty</h4>\n        Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      </div>\n    );\n  }\n\n  const resources = filterUnlocked(warehouse.resources);\n  const goldOnHand = resources.gold.owned;\n\n  const goodsToTrade = Object.entries(traderState.wares).map(([good, tradeData]) => {\n    const goodInWarehouse = resources[good];\n    if (!goodInWarehouse) {\n      // not unlocked, can't sell\n      return null;\n    }\n    const canBuy = (goldOnHand >= tradeData.sellPrice) && (tradeData.held > 0) && (goodInWarehouse.owned + goodInWarehouse.pending - goodInWarehouse.reserved < warehouse.totalCapacity);\n    const canSell = (tradeData.held < traderState.maxCapacity) && (goodInWarehouse.owned > 0);\n    return <div className='trade-good' key={good}>\n      {Resources[good].name} available: {tradeData.held}\n      <button onClick={() => dispatch(buyGood(good, 1, tradeData.sellPrice))} disabled={!canBuy}>Buy for {tradeData.sellPrice} Gold</button>\n      <button onClick={() => dispatch(sellGood(good, 1, tradeData.buyPrice))} disabled={!canSell}>Sell for {tradeData.buyPrice} Gold</button>\n    </div>\n  });\n\n  const dismissFn = () => {\n    dispatch(dismissTrader(traderState.dismissCost));\n  }\n\n  return (\n    <div className='trade-panel'>\n      <h4>{Traders[traderState.traderId].name} has visited your island!</h4>\n      Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      <button onClick={dismissFn}>Dismiss for {traderState.dismissCost} Gold</button>\n      {goodsToTrade}\n    </div>\n  );\n};\n\nexport default TradePanel;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { tick as dispatchTick, init as dispatchInit } from './actions/game';\nimport Scheduler from './scheduler';\n\nimport TimeFactor from './components/cheats/TimeFactor';\nimport ResourcePanel from './components/ResourcePanel';\nimport CourierMonitor from './components/CourierMonitor';\nimport ConstructionPanel from './components/ConstructionPanel';\nimport BuildingPanel from './components/BuildingPanel';\nimport PopulationPanel from './components/PopulationPanel';\nimport HousingPanel from './components/HousingPanel';\nimport SaveLoad from './components/SaveLoad';\nimport TradePanel from './components/TradePanel';\n\nconst MS_TO_S = 1/1000.0;\n\nfunction Game() {\n  const [scheduler] = useState(new Scheduler(tick, 100));\n  const dispatch = useDispatch();\n\n  function tick(timeIntervalMs) {\n    dispatch(dispatchTick(timeIntervalMs * MS_TO_S));\n  }\n\n  useEffect(() => {\n    dispatch(dispatchInit());\n    scheduler.start();\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <SaveLoad></SaveLoad>\n      <TimeFactor></TimeFactor>\n      <ResourcePanel></ResourcePanel>\n      <TradePanel></TradePanel>\n      <PopulationPanel></PopulationPanel>\n      <HousingPanel></HousingPanel>\n      <CourierMonitor></CourierMonitor>\n      <ConstructionPanel></ConstructionPanel>\n      <BuildingPanel></BuildingPanel>\n    </div>\n  );\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './js/store/store';\n\nimport './style/index.css';\nimport Game from './js/Game';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(\n<Provider store={configureStore()}>\n  <Game></Game>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root-reducer';\nimport INITIAL_STATE from './initial-state';\n\nexport default function configureStore(initialState=INITIAL_STATE) {\n  const saveState = localStorage.getItem('save');\n  if (saveState) {\n    initialState = JSON.parse(atob(prompt('Enter load data')));\n  }\n  if (!initialState) {\n    initialState = INITIAL_STATE;\n  }\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk) && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n );\n}\n"],"sourceRoot":""}