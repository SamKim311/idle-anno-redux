{"version":3,"sources":["js/actions/game.js","js/reducers/island.js","js/actions/warehouse.js","js/actions/construction.js","js/data/building-definitions.js","js/actions/housing.js","js/actions/trade.js","js/reducers/warehouse.js","js/reducers/construction.js","js/actions/building.js","js/reducers/building.js","js/reducers/couriers.js","js/reducers/housing.js","js/reducers/population.js","js/reducers/amenities.js","js/data/population-definitions.js","js/reducers/consume.js","js/reducers/growth.js","js/reducers/finance.js","js/data/level-up-definitions.js","js/reducers/level-up.js","js/actions/cheats.js","js/reducers/cheat.js","js/data/trader-info.js","js/data/resource-definitions.js","js/reducers/trader.js","js/reducers/root-reducer.js","js/store/initial-state.js","js/scheduler.js","js/components/IslandNameView.js","js/components/cheats/TimeFactor.js","js/selectors.js","js/components/ResourcePanel.js","js/components/CourierMonitor.js","js/components/ConstructionPanel.js","js/components/BuildingDetails.js","js/components/BuildingIcon.js","js/components/BuildingPanel.js","js/components/PopulationPanel.js","js/components/HousingPanel.js","js/components/SaveLoad.js","js/components/TradePanel.js","js/Game.js","js/serviceWorker.js","index.js","js/store/store.js"],"names":["ACTIONS","INIT","TICK","LOAD_GAME","CHANGE_NAME","BUILD_WAREHOUSE","UPDGRADE_WAREHOUSE","CONSTRUCT_BUILDING","DESTROY_BUILDING","destroyBuilding","toDestroy","type","payload","BUILDING_CATEGORY","AMENITY","PRODUCER","HOUSE","WAREHOUSE","buildingStatus","AWAITING_RESOURCES","WORKING","OUTBOX_FULL","DISABLED","BuildingDefinitions","marketplace","name","abbreviation","description","category","produces","community","upkeep","chapel","faith","fishinghut","consumes","fish","produceTime","disabledUpkeep","lumberjackhut","wood","orchard","apple","ciderfarm","cider","hempfarm","hemp","weavers","linen","quarry","stone","stonemason","stonebrick","peasanthouse","populationCategory","populationCap","ascendsTo","citizenhouse","cost","tool","smallwarehouse","couriers","capacity","upgradesTo","upgradeCost","gold","mediumwarehouse","smallstockpile","BUILD_HOUSE","ASCEND_HOUSE","BUY_GOODS","SELL_GOODS","DISMISS_TRADER","resourceDecorations","reserved","pending","deductCost","resources","resourceCopy","Object","assign","entries","ingredient","amount","ingredientCopy","owned","DISABLE_BUILDING","ENABLE_BUILDING","disableBuilding","id","enableBuilding","initialProducerState","status","progress","efficiency","efficiencyTimer","efficiencySupplied","inbox","outbox","EFFICIENCY_FACTOR","EFFICIENCY_TIMER","EFFICIENCY_MINIMUM","BASE_EFFICIENCY_MAXIMUM","BASE_IN_OUT_BOX_CAPACITY","initializeInOutBox","building","buildingInfo","buildingId","keys","good","doProductionTick","timeIntervalS","buildingCopy","enabled","progressEfficiency","consumed","canAfford","produced","outboxHasRoom","inboxCopy","outboxCopy","Math","min","max","courierState","initCourier","timeThreshold","jobDescription","markedForDeath","state","action","gameActions","startingWarehouse","warehouse","courierArrayCopy","slice","addCouriers","courierObjCopy","warehouseActions","nextWarehouse","toUpgrade","toConstruct","builtWarehouse","addedCouriers","newState","newCouriers","newArray","constructionActions","courierList","courierIndex","length","courier","markmarkedForDeath","splice","stateCopy","couriersCopy","warehouseMax","totalCapacity","buildings","buildingRefCopy","newJobs","findJobs","jobArrayCopy","jobQueue","concat","jobList","jobRefCopy","jobQueueMap","jobRef","courierListCopy","map","newCourier","nextJobIndex","getNextAvailableJob","nextJob","pickupFromId","from","deliverToId","to","carrying","pickupFrom","deliverTo","inboxRoom","currentSupply","floor","currentOutbox","warehouseRoom","tickIntervalSeconds","fromId","toId","product","hasOwnProperty","resourceToTake","resourceToDeliver","killedCouriers","filter","courierArray","numToAdd","i","uuidv4","push","SUPPLY_SUFFIX","PICKUP_SUFFIX","existingJobs","supplies","values","supplyKey","resource","newJob","pickups","reduce","accumulator","pickupKey","jobArray","jobIndex","initHouseState","popProgress","currentPop","ascensionFactors","rightsLists","patricianhouse","calculateAscensionRights","allTypes","toCheck","totalHouses","sum","pop","totalAscensionRights","ascendTo","alreadyAscended","remainingAscensionRights","initValues","maxPopulation","happiness","canAscend","consumeInfo","beggarValues","unhoused","beggarTimer","calculateBeggarCount","population","amenities","Buildings","amenity","PopulationDefinitions","beggar","taxRate","quantity","weight","peasant","citizen","spice","patrician","noble","popType","popOriginal","currentHappiness","pctSatisfied","happinessDiff","abs","BEGGAR_ARRIVAL_MIN","BEGGAR_ARRIVAL_MAX","houses","housing","populationCounts","newAbodes","abodes","abodeOriginal","abode","curHappiness","houseId","growthFactor","popCategory","popCount","newPop","incomingBeggars","getIncomingBeggars","beggarDeficit","lowerBound","upperBound","rn","integer","financeInfo","maintenanceCost","taxRevenue","warehouseMaintenance","totalMaintenance","totalTaxes","happinessFactor","unlockThresholds","unlocks","title","island","level","unlockPopType","popRequired","unlocked","constructions","construction","forEach","conId","resId","popUnlocked","types","unlockedHouse","SET_TIME_FACTOR","cheat","timeFactor","Traders","lord","rates","buy","sell","baseCapacity","prince","ResourceDefinitions","baseTradePrice","BASE_TRADER_STAY_TIME_SECONDS","INIT_STATE","traderId","timer","timeToLeave","wares","newGame","dismissCost","newTrader","currentState","traders","selectedTrader","random","traderInfo","maxCapacity","goodBasePrice","buyPrice","sellPrice","held","combinedReducer","combineReducers","warehouseCopy","newResources","resourceId","newResource","housingActions","warehouseToBuild","currentWarehouse","tradeActions","updatedResources","atPrice","goodBought","toConstructId","newOwned","toDestroyId","GAME_ACTIONS","updatedBuilding","CONSTRUCTION_ACTIONS","buildingToBuild","newBuilding","newBuildings","buildingToDestroy","toDisable","disabled","toEnable","toBuild","houseData","fromHouseId","fromHouse","toHouseId","fromType","toType","nextHouse","ascendIndex","findIndex","house","populationState","houseBuilt","modifiedPop","currentHouse","oldPop","nextPop","maxBeggars","trader","toBuy","time","rootReducer","saveState","cheatState","intermediateState","amenityState","consumptionState","consume","growthState","growth","financeState","finance","levelUp","INITIAL_STATE","noblehouse","Scheduler","functionToRun","targetInterval","this","targetFunction","running","lastTick","Date","now","setTimeout","repeater","currentTime","elapsedTime","bind","IslandNameView","useSelector","dispatch","useDispatch","className","onClick","toName","prompt","changeName","substring","TimeFactor","useState","setTf","onSubmit","event","setTimeFactor","preventDefault","onChange","e","target","value","required","filterUnlocked","collectionObject","key","setAffordable","buyable","ResourcePanel","warehouseType","shallowEqual","warehouseInfo","upgradeButton","item","resourceName","toFixed","CourierMonitor","JSON","stringify","ConstructionPanel","buyableCollection","buyableId","setAllAffordable","constructionList","ingredientPanel","buyFunction","BuildingDetails","props","Modal","show","onHide","onClose","Header","closeButton","Title","Body","Footer","toggleEnableFn","BuildingIcon","showDetails","setShowDetails","toolTipContent","statusColor","OverlayTrigger","placement","delay","hide","overlay","Tooltip","BuildingPanel","buildingState","buildingIcons","Container","PopulationPanel","populationList","popName","HousingPanel","housingList","housedPopulation","availableAscensions","toHouse","toBuilding","ascendHouse","SaveLoad","btoa","navigator","clipboard","writeText","then","alert","loadState","parse","atob","TradePanel","traderState","goldOnHand","goodsToTrade","tradeData","goodInWarehouse","canBuy","canSell","Resources","goodToBuy","goodToSell","MS_TO_S","Game","timeIntervalMs","scheduler","useEffect","start","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","localStorage","getItem","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uYAAaA,EAAU,CACrBC,KAAM,OACNC,KAAM,OACNC,UAAW,YACXC,YAAa,e,olBCFA,I,OCFFJ,EAAU,CACrBK,gBAAiB,kBACjBC,mBAAoB,qBCFf,IAAMN,EAAU,CACrBO,mBAAoB,qBACpBC,iBAAkB,oBAOb,SAASC,EAAgBC,GAC9B,MAAO,CAAEC,KAAMX,EAAQQ,iBAAkBI,QAAS,CAAEF,UAAWA,ICV1D,IAAMG,EAAoB,CAC/BC,QAAS,UACTC,SAAU,WACVC,MAAO,QACPC,UAAW,aAGAC,EAAiB,CAC5BC,mBAAoB,qBACpBC,QAAS,UACTC,YAAa,cACbC,SAAU,YAqMGC,EAlMa,CAE1BC,YAAa,CACXC,KAAM,cACNC,aAAc,IACdC,YAAa,yCACbC,SAAUf,EAAkBC,QAC5Be,SAAU,CACRC,UAAW,KAEbC,OAAQ,IAEVC,OAAQ,CACNP,KAAM,SACNC,aAAc,KACdC,YAAa,4CACbC,SAAUf,EAAkBC,QAC5Be,SAAU,CACRI,MAAO,GAETF,OAAQ,IAIVG,WAAY,CACVT,KAAM,kBACNC,aAAc,IACdC,YAAa,eACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,GACVN,SAAU,CACRO,KAAM,GAERC,YAAa,GACbN,OAAQ,GACRO,eAAgB,GAElBC,cAAe,CACbd,KAAM,mBACNC,aAAc,IACdC,YAAa,eACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,GACVN,SAAU,CACRW,KAAM,GAERH,YAAa,GACbN,OAAQ,EACRO,eAAgB,GAElBG,QAAS,CACPhB,KAAM,UACNC,aAAc,IACdC,YAAa,uCACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,GACVN,SAAU,CACRa,MAAO,GAETL,YAAa,IACbN,OAAQ,EACRO,eAAgB,GAElBK,UAAW,CACTlB,KAAM,SACNC,aAAc,IACdC,YAAa,8BACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,CACRO,MAAO,GAETb,SAAU,CACRe,MAAO,GAETP,YAAa,GACbN,OAAQ,GACRO,eAAgB,GAElBO,SAAU,CACRpB,KAAM,kBACNC,aAAc,IACdC,YAAa,aACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,GACVN,SAAU,CACRiB,KAAM,GAERT,YAAa,GACbN,OAAQ,GACRO,eAAgB,IAElBS,QAAS,CACPtB,KAAM,eACNC,aAAc,IACdC,YAAa,+BACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,CACRW,KAAM,GAERjB,SAAU,CACRmB,MAAO,GAETX,YAAa,GACbN,OAAQ,GACRO,eAAgB,IAElBW,OAAQ,CACNxB,KAAM,eACNC,aAAc,IACdC,YAAa,oBACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,GACVN,SAAU,CACRqB,MAAO,GAETb,YAAa,GACbN,OAAQ,GACRO,eAAgB,IAElBa,WAAY,CACV1B,KAAM,aACNC,aAAc,KACdC,YAAa,sCACbC,SAAUf,EAAkBE,SAC5BoB,SAAU,CACRe,MAAO,GAETrB,SAAU,CACRuB,WAAY,GAEdf,YAAa,GACbN,OAAQ,GACRO,eAAgB,IAIlBe,aAAc,CACZ5B,KAAM,gBACNE,YAAa,qCACbC,SAAUf,EAAkBG,MAC5Be,OAAQ,EACRuB,mBAAoB,UACpBC,cAAe,EACfC,UAAW,gBAEbC,aAAc,CACZhC,KAAM,gBACNE,YAAa,oBACbC,SAAUf,EAAkBG,MAC5Be,OAAQ,EACRuB,mBAAoB,UACpBC,cAAe,GACfC,UAAW,iBACXE,KAAM,CACJlB,KAAM,EACNmB,KAAM,IAKVC,eAAgB,CACdnC,KAAM,kBACNE,YAAa,kCACbC,SAAUf,EAAkBI,UAC5Bc,OAAQ,GACR8B,SAAU,EACVC,SAAU,GACVC,WAAY,kBACZC,YAAa,CACXC,KAAM,IACNzB,KAAM,EACNmB,KAAM,EACNP,WAAY,IAGhBc,gBAAiB,CACfzC,KAAM,mBACNE,YAAa,qBACbC,SAAUf,EAAkBI,UAC5Bc,OAAQ,GACR8B,SAAU,EACVC,SAAU,IAEZK,eAAgB,CACd1C,KAAM,kBACNC,aAAc,KACdC,YAAa,kCACbC,SAAUf,EAAkBI,UAC5Bc,OAAQ,GACR8B,SAAU,EACVC,SAAU,IC1MD9D,EAAU,CACrBoE,YAAa,cACbC,aAAc,gBCJT,IAAMrE,EAAU,CACrBsE,UAAW,YACXC,WAAY,aACZC,eAAgB,kB,ykBCIlB,IAAMC,EAAsB,CAC1BC,SAAU,EACVC,QAAS,GA6FX,SAASC,EAAWC,EAAWnB,GAE7B,IADA,IAAIoB,EAAeC,OAAOC,OAAO,GAAIH,GACrC,MAAiCE,OAAOE,QAAQvB,GAAhD,eAAuD,CAAC,IAAD,0BAA7CwB,EAA6C,KAAjCC,EAAiC,KACjDC,EAAiBL,OAAOC,OAAO,GAAIF,EAAaI,IACpDE,EAAeC,OAASF,EACxBL,EAAaI,GAAcE,EAE7B,OAAON,E,ykBCzGM,I,iBCJF9E,EAAU,CACrBsF,iBAAkB,mBAClBC,gBAAiB,mBAGZ,SAASC,EAAgBC,GAC9B,MAAO,CAAE9E,KAAMX,EAAQsF,iBAAkB1E,QAAS,CAAE6E,GAAIA,IAGnD,SAASC,EAAeD,GAC7B,MAAO,CAAE9E,KAAMX,EAAQuF,gBAAiB3E,QAAS,CAAE6E,GAAIA,I,ykBCHzD,IAAME,EAAuB,CAC3BC,OAAQ1E,EAAeC,mBACvB0E,SAAU,EACVC,WAAY,EACZC,gBAAiB,EACjBC,oBAAoB,EACpBC,MAAO,GACPC,OAAQ,IAGJC,EAAoB,IACpBC,EAAmB,EACnBC,EAAqB,EACrBC,EAA0B,IACnBC,EAA2B,EA2DxC,SAASC,EAAmBC,GAC1B,IAAMC,EAAenF,EAAoBkF,EAASE,YAClDF,EAASR,MAAQ,GACjB,cAAuBlB,OAAO6B,KAAKF,EAAavE,UAAhD,eAA2D,CAAtD,IAAI+C,EAAU,KACjBuB,EAASR,MAAMf,GAAc,EAG/BuB,EAASP,OAAS,GAClB,cAAiBnB,OAAO6B,KAAKF,EAAa7E,UAA1C,eAAqD,CAAhD,IAAIgF,EAAI,KACXJ,EAASP,OAAOW,GAAQ,GAI5B,SAASC,EAAiBL,EAAUM,GAClC,IAAIC,EAAejC,OAAOC,OAAO,GAAIyB,GAC/BC,EAAenF,EAAoByF,EAAaL,YAEtD,IAAKF,EAASQ,QAQZ,OAPAD,EAAapB,OAAS1E,EAAeI,SACjC0F,EAAahB,qBACfgB,EAAahB,oBAAqB,EAClCgB,EAAajB,gBAAkB,GAEjCiB,EAAeE,EAAmBF,EAAcD,GAKlD,IAkDF,SAAmBN,GAEjB,IADA,IAAMC,EAAenF,EAAoBkF,EAASE,YAClD,MAAmC5B,OAAOE,QAAQyB,EAAavE,UAA/D,eAA0E,CAAC,IAAD,0BAAhE+C,EAAgE,KAApDiC,EAAoD,KACxE,GAAIV,EAASR,MAAMf,GAAciC,EAC/B,OAAO,EAGX,OAAO,EAzDFC,CAAUJ,GAQb,OAPAA,EAAapB,OAAS1E,EAAeC,mBACjC6F,EAAahB,qBACfgB,EAAahB,oBAAqB,EAClCgB,EAAajB,gBAAkB,GAEjCiB,EAAeE,EAAmBF,EAAcD,GAKlD,IAiDF,SAAuBN,GAErB,IADA,IAAMC,EAAenF,EAAoBkF,EAASE,YAClD,MAA6B5B,OAAOE,QAAQyB,EAAa7E,UAAzD,eAAoE,CAAC,IAAD,0BAA1DgF,EAA0D,KAApDQ,EAAoD,KAElE,GADiBZ,EAASP,OAAOW,GAChBQ,EAAWd,EAC1B,OAAO,EAGX,OAAO,EAzDFe,CAAcN,GAQjB,OAPAA,EAAapB,OAAS1E,EAAeG,YACjC2F,EAAahB,qBACfgB,EAAahB,oBAAqB,EAClCgB,EAAajB,gBAAkB,GAEjCiB,EAAeE,EAAmBF,EAAcD,GAalD,GARAC,EAAapB,OAAS1E,EAAeE,QAChC4F,EAAahB,qBAChBgB,EAAahB,oBAAqB,EAClCgB,EAAajB,gBAAkB,IAEjCiB,EAAeE,EAAmBF,EAAcD,IAEnClB,UAAYkB,EAAgBC,EAAalB,WAAaK,EAC/Da,EAAanB,SAAWa,EAAarE,YAAa,CACpD2E,EAAanB,UAAYa,EAAarE,YAItC,IAHA,IAAIkF,EAAYxC,OAAOC,OAAO,GAAIgC,EAAaf,OAC3CuB,EAAazC,OAAOC,OAAO,GAAIgC,EAAad,QAEhD,MAAmCnB,OAAOE,QAAQyB,EAAavE,UAA/D,eAA0E,CAAC,IAAD,0BAAhE+C,EAAgE,KAApDiC,EAAoD,KACxEI,EAAUrC,IAAeiC,EAG3B,cAA6BpC,OAAOE,QAAQyB,EAAa7E,UAAzD,eAAoE,CAAC,IAAD,0BAA1DgF,EAA0D,KAApDQ,EAAoD,KAClEG,EAAWX,IAASQ,EAGtBL,EAAaf,MAAQsB,EACrBP,EAAad,OAASsB,EAGxB,OAAOR,EAwBT,SAASE,EAAmBT,EAAUM,GAYpC,OAXAN,EAASV,iBAAmBgB,EACxBN,EAASV,gBAAkBK,IAC7BK,EAASV,iBAAmBK,EACxBK,EAAST,mBAEXS,EAASX,WAAa2B,KAAKC,IAAIpB,EAAyBG,EAASX,WAAa,GAG9EW,EAASX,WAAa2B,KAAKE,IAAItB,EAAoBI,EAASX,WAAa,IAGtEW,E,qlBCvLT,IAAMmB,EACE,OADFA,EAEQ,aAFRA,EAGM,WAHNA,EAIU,eAMVC,EAAc,CAClBjC,OAAQgC,EACR/B,SAAU,EACViC,cAAe,EACfC,eAAgB,GAChBnH,QAAS,GACToH,gBAAgB,GAGH,aAA8B,IAArBC,EAAoB,uDAAZ,GAAIC,EAAQ,uCACpCtH,EAAUsH,EAAOtH,QACjBiD,EAAWoE,EAAMpE,SACvB,IAAKA,EACH,OAAOoE,EAET,OAAOC,EAAOvH,MACZ,KAAKwH,EAAYlI,KACf,IAAMmI,EAAoB7G,EAAoB0G,EAAMI,UAAU1H,MACxD2H,EAAmBzE,EAASA,SAAS0E,MAAM,GACjDC,GAAYF,EAAkBF,EAAkBvE,UAChD,IAAM4E,EAAiB1D,OAAOC,OAAO,GAAInB,GAEzC,OADA4E,EAAe5E,SAAWyE,EACnBvD,OAAOC,OAAO,GAAIiD,EAAO,CAACpE,SAAU4E,IAC7C,KAAKC,EAAiBpI,mBAEpB,IAAMqI,EAAgBpH,EAAoBX,EAAQgI,WAAW7E,WAC7DnD,EAAQiI,YAAc,CACpBpD,GAAIkD,GAER,KAAKD,EAAiBrI,gBACpB,IAAMyI,EAAiBvH,EAAoBX,EAAQiI,YAAYpD,IACzDsD,EAAgBD,EAAejF,SAC/BmF,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7BgB,EAAclE,OAAOC,OAAO,GAAIgE,EAASnF,UAC/CmF,EAASnF,SAAWoF,EACpB,IAAMC,EAAWD,EAAYpF,SAAS0E,MAAM,GAG5C,OAFAC,GAAYU,EAAUH,GACtBE,EAAYpF,SAAWqF,EAChBF,EAET,KAAKG,EAAoB3I,iBACvB,IAAME,EAAYE,EAAQF,UAC1B,GAAIA,EAAUkB,WAAaf,EAAkBI,UAC3C,OAAOgH,EAQT,IALA,IAAMmB,EAAW,YAAOnB,EAAMpE,SAASA,UACjCA,EAAQ,KAAOoE,EAAMpE,SAAb,CAAuBA,SAAUuF,IACzCJ,EAAQ,KAAOf,EAAP,CAAcpE,SAAUA,IAG7BwF,EAAe,EAAGA,EAAeD,EAAYE,OAAQD,IAAgB,CAC5E,IAAME,EAAUH,EAAYC,GAC5B,GAAIE,EAAQ3D,SAAWgC,IAAsB2B,EAAQC,mBAEnD,OADAJ,EAAYK,OAAOJ,EAAc,GAC1BL,EAKX,IAAK,IAAIK,EAAeD,EAAYE,OAAO,EAAGD,GAAgB,EAAGA,IAAgB,CAC/E,IAAME,EAAUH,EAAYC,GAC5B,IAAKE,EAAQC,mBAEX,OADAD,EAAQvB,gBAAiB,EAClBgB,EAKX,OAAOA,EAET,KAAKb,EAAYjI,KACf,IAAMwJ,EAAY3E,OAAOC,OAAO,GAAIiD,GAC9B0B,EAAe5E,OAAOC,OAAO,GAAI0E,EAAU7F,UAC3CwE,EAAYtD,OAAOC,OAAO,GAAI0E,EAAUrB,WACxCuB,EAAevB,EAAUwB,cACzBhF,EAAYE,OAAOC,OAAO,GAAIqD,EAAUxD,WAC9CwD,EAAUxD,UAAYA,EACtB,IAAMiF,EAAY/E,OAAOC,OAAO,GAAI0E,EAAUI,WACxCC,EAAkBhF,OAAOC,OAAO,GAAI8E,EAAUzE,OACpDyE,EAAUzE,MAAQ0E,EAClBL,EAAUrB,UAAYA,EACtBqB,EAAUI,UAAYA,EACtBJ,EAAU7F,SAAW8F,EAGrB,IAAMK,EAAUC,GAASpG,EAAUwE,EAAW0B,GAC1CG,EAAerG,EAASsG,SAAS5B,MAAM,GAAG6B,OAAOJ,EAAQK,SACvDC,EAAavF,OAAOC,OAAO,GAAInB,EAAS0G,YAAaP,EAAQQ,QAG7DC,EAAkBd,EAAa9F,SAAS6G,KAAI,SAACnB,GACjD,GAAIA,EAAQ3D,SAAWgC,EAAmB,CACxC,IAAM+C,EAAa5F,OAAOC,OAAO,GAAIuE,GAEjCqB,EAAeC,GAAoBX,EAAcH,GAC/Ce,EAAUZ,EAAaU,GAE7B,GADAV,EAAeA,EAAa3B,MAAMqC,EAAa,IAC1CE,EACH,OAAOvB,EAGT,IAAMwB,EAAeD,EAAQE,KACvBC,EAAcH,EAAQI,GACtBrE,EAAOiE,EAAQK,SACjBC,EAAa,KACbC,EAAY,KACZlG,EAAS,EAcb,GAXEiG,EADmB,cAAjBL,EACWjB,EAAUzE,MAAM0F,GAEhB1C,EAIbgD,EADkB,cAAhBJ,EACUnB,EAAUzE,MAAM4F,GAEhB5C,EAGO,cAAjB0C,EAA8B,CAChC,IAAMO,EAAY/E,EAA2B8E,EAAUpF,MAAMY,GACvD0E,EAAgB9D,KAAK+D,MAAM3G,EAAUgC,GAAMxB,MAAQR,EAAUgC,GAAMnC,UACzES,EAASsC,KAAKC,IAAI4D,EAAWC,GAC7B,IAAMzG,EAAeC,OAAOC,OAAO,GAAIH,EAAUgC,IACjD/B,EAAaJ,UAAYS,EACzBN,EAAUgC,GAAQ/B,MACb,CACL,IAAM2G,EAAgBL,EAAWlF,OAAOW,GAClC6E,EAAgBjE,KAAK+D,MAAM5B,EAAe/E,EAAUgC,GAAMxB,MAAQR,EAAUgC,GAAMlC,SACxFQ,EAASsC,KAAKC,IAAI+D,EAAeC,GACjC,IAAM5G,EAAeC,OAAOC,OAAO,GAAIH,EAAUgC,IACjD/B,EAAaH,SAAWQ,EACxBN,EAAUgC,GAAQ/B,EASpB,OANAgG,EAAQ3F,OAASA,EAEjBwF,EAAW/E,OAASgC,EACpB+C,EAAW7C,cA9IsB,EA+IjC6C,EAAW5C,eAAiB+C,EAErBH,EAEP,OAAOpB,KAIXI,EAAaQ,SAAWD,EACxBP,EAAaY,YAAcD,EAGAG,EAAgBC,KAAI,SAACnB,GAC9C,GAAIA,EAAQ3D,SAAWgC,EACrB,OAAO2B,EAIT,GADAA,EAAQ1D,UAAYjF,EAAQ+K,oBACxBpC,EAAQ1D,UAAY0D,EAAQzB,cAAe,CAC7CyB,EAAQ1D,UAAY0D,EAAQzB,cAC5B,IAAMC,EAAiBwB,EAAQxB,eACzB6D,EAAS7D,EAAeiD,KACxBa,EAAO9D,EAAemD,GACtBY,EAAU/D,EAAeoD,SACzBhG,EAAS4C,EAAe5C,OAC1BiG,EAAa,KACbC,EAAY,KAoBhB,OAlBe,cAAXO,EACE7B,EAAgBgC,eAAeH,KACjCR,EAAarG,OAAOC,OAAO,GAAI+E,EAAgB6B,IAC/C7B,EAAgB6B,GAAUR,GAG5BA,EAAa/C,EAGF,cAATwD,EACE9B,EAAgBgC,eAAeF,KACjCR,EAAYtG,OAAOC,OAAO,GAAI+E,EAAgB8B,IAC9C9B,EAAgB8B,GAAQR,GAG1BA,EAAYhD,EAGNkB,EAAQ3D,QACd,KAAKgC,EACH,IAAMhH,EAAUmE,OAAOC,OAAO,GAAIuE,EAAQ3I,SAG1C,GAFA2I,EAAQ3I,QAAUA,EAEH,cAAXgL,EAAwB,CAC1B,IAAMI,EAAiBjH,OAAOC,OAAO,GAAIH,EAAUiH,IACnDjH,EAAUiH,GAAWE,EACrBA,EAAe3G,OAASF,EACxB6G,EAAetH,UAAYS,EAC3BvE,EAAQkL,GAAW3G,MACd,CACL,IAAKiG,EAAY,CACf7B,EAAQ3I,QAAU,GAClB2I,EAAQ3D,OAASgC,EACjB2B,EAAQxB,eAAiB,GACzBwB,EAAQ1D,SAAW,EACnB0D,EAAQzB,cAAgB,SAEjBwC,EAAWf,EAAQxB,eAAetC,IACzC,MAEF,IAAMS,EAASnB,OAAOC,OAAO,GAAIoG,EAAWlF,QAC5CkF,EAAWlF,OAASA,EACpBA,EAAO4F,IAAY3G,EACnBvE,EAAQkL,GAAW3G,SACZmF,EAAWf,EAAQxB,eAAetC,IAG3C8D,EAAQ3D,OAASgC,EACjB2B,EAAQzB,cA5NW,GA6NnB,MAEF,KAAKF,EACH2B,EAAQ3D,OAASgC,EACjB2B,EAAQzB,cAhOqB,EAiO7B,MACF,KAAKF,EAEH,IAAMhH,EAAUmE,OAAOC,OAAO,GAAIuE,EAAQ3I,SAE1C,GAAa,cAATiL,EAAsB,CACxB,IAAMI,EAAoBlH,OAAOC,OAAO,GAAIH,EAAUiH,IACtDjH,EAAUiH,GAAWG,EACrBA,EAAkB5G,OAASzE,EAAQkL,GACnCG,EAAkBtH,SAAWQ,MACxB,CACL,GAAKkG,EAKE,CACL,IAAMpF,EAAQlB,OAAOC,OAAO,GAAIqG,EAAUpF,OAC1CoF,EAAUpF,MAAQA,EAClBA,EAAM6F,IAAY3G,MARJ,CAEd,IAAM8G,EAAoBlH,OAAOC,OAAO,GAAIH,EAAUiH,IACtDjH,EAAUiH,GAAWG,EACrBA,EAAkB5G,OAASzE,EAAQkL,UAM9BxB,EAAWf,EAAQxB,eAAetC,IAG3C8D,EAAQ3I,QAAU,GAClB2I,EAAQ3D,OAASgC,EACjB2B,EAAQxB,eAAiB,GACzBwB,EAAQ1D,SAAW,EACnB0D,EAAQzB,cAAgB,GAO9B,OAAOyB,KAzGT,IA6GM2C,EAAiBzB,EAAgB0B,QAAO,SAAC5C,GAAD,OAAaA,EAAQ3D,SAAWgC,IAAsB2B,EAAQvB,kBAK5G,OAHA2B,EAAa9F,SAAWqI,EAExBxC,EAAU7F,SAAW8F,EACdD,EAET,QACE,OAAOzB,IAIb,SAASO,GAAY4D,EAAcC,GACjC,IAAK,IAAIC,EAAE,EAAGA,EAAED,EAAUC,IAAK,CAC7B,IAAM3B,EAAa5F,OAAOC,OAAO,GAAI6C,EAAa,CAACpC,GAAI8G,QACvDH,EAAaI,KAAK7B,IAItB,IAAM8B,GAAgB,UAChBC,GAAgB,UACtB,SAASzC,GAASV,EAASlB,EAAWyB,GAUpC,IATA,IAAM6C,EAAepD,EAAQgB,YACvBX,EAAevB,EAAUwB,cACzBhF,EAAYwD,EAAUxD,UAGtB+H,EAAW,CACfvC,QAAS,GACTG,OAAQ,IAEV,MAAqBzF,OAAO8H,OAAO/C,GAAnC,eAA+C,CAA1C,IAAIrD,EAAQ,KAEf,GADqBlF,EAAoBkF,EAASE,YACjC/E,WAAaf,EAAkBE,SAGhD,cAAiCgE,OAAOE,QAAQwB,EAASR,OAAzD,eAAiE,CAAC,IAAD,0BAAvDf,EAAuD,KAA3CC,EAA2C,KACzD2H,EAAYrG,EAAShB,GAAK,IAAMP,EAAa,IAAMuH,GACzD,GAAItH,EAASoB,IAA6BoG,EAAaG,GAAY,CACjE,IAAMC,EAAWlI,EAAUK,GAE3B,GADwBuC,KAAK+D,MAAMuB,EAAS1H,MAAQ0H,EAASrI,UACvC,EAAG,CACvB,IAAMsI,EAAS,CACbvH,GAAIqH,EACJ9B,KAAM,YACNE,GAAIzE,EAAShB,GACb0F,SAAUjG,GAEZ0H,EAASvC,QAAQmC,KAAKQ,GACtBJ,EAASpC,OAAOsC,GAAaE,KAOrC,IAAMC,EAAUlI,OAAO8H,OAAO/C,GAAWoD,QAAO,SAACC,EAAa1G,GAE5D,GADqBlF,EAAoBkF,EAASE,YACjC/E,WAAaf,EAAkBE,SAC9C,OAAOoM,EAET,cAA8BpI,OAAOE,QAAQwB,EAASP,QAAtD,eAA+D,CAAC,IAAD,0BAArD4F,EAAqD,KAA5C3G,EAA4C,KACvDiI,EAAY3G,EAAShB,GAAKiH,GAChC,GAAIvH,EAAS,IAAMwH,EAAaS,GAAY,CAC1C,IAAML,EAAWlI,EAAUiH,GAE3B,GADuBrE,KAAK+D,MAAM5B,EAAemD,EAAS1H,MAAQ0H,EAASpI,SACtD,EAAG,CACtB,IAAMqI,EAAS,CACbvH,GAAI2H,EACJpC,KAAMvE,EAAShB,GACfyF,GAAI,YACJC,SAAUW,GAEZqB,EAAY9C,QAAQmC,KAAKQ,GACzBG,EAAY3C,OAAO4C,GAAaJ,IAItC,OAAOG,IACN,CAAC9C,QAAS,GAAIG,OAAQ,KAIzB,MAAO,CAACH,QAFQuC,EAASvC,QAAQD,OAAO6C,EAAQ5C,SAEtBG,OADVzF,OAAOC,OAAO,GAAI4H,EAASpC,OAAQyC,EAAQzC,SAK7D,SAASK,GAAoBwC,EAAUvD,GACrC,IAAK,IAAIwD,EAAW,EAAGA,EAAWD,EAAS/D,OAAQgE,IAAY,CAC7D,IAAMxC,EAAUuC,EAASC,GAEnBvC,EAAeD,EAAQE,KACvBC,EAAcH,EAAQI,GAE5B,IAAqB,cAAjBH,GAAiCjB,EAAUiC,eAAehB,MAI1C,cAAhBE,GAAgCnB,EAAUiC,eAAed,IAI7D,OAAOqC,G,6kBC3XX,IAAMC,GAAiB,CACrBC,YAAa,EACbC,WAAY,GAGRC,GAAmB,CACvBrK,aAAc,GACdI,aAAc,IAIVkK,GAAc,CAClBtK,aAAc,CAAC,eAAgB,gBAC/BI,aAAc,CAAC,gBACfmK,eAAgB,IAsDlB,SAASC,GAAyBC,EAAUnN,EAAMoN,GAChD,IAAMC,EAAcL,GAAYI,GAASb,QAAO,SAACe,EAAKC,GAAN,OAAcD,EAAMH,EAASI,GAAK7I,QAAO,GACzF1E,EAAKwN,qBAAuB1G,KAAK+D,MAAMkC,GAAiBK,GAAWC,GACnE,IAAMI,EAAW7M,EAAoBwM,GAASvK,UACxC6K,EAAkBV,GAAYS,GAAUlB,QAAO,SAACe,EAAKC,GAAN,OAAcD,EAAMH,EAASI,GAAK7I,QAAO,GAC9F1E,EAAK2N,yBAA2B3N,EAAKwN,qBAAuBE,E,6kBCxE9D,IAEME,GAAa,CACjBlJ,MAAO,EACPmJ,cAAe,EACfC,UAAW,EACXC,WAAW,EACXC,YAAa,IAGTC,GAAe,CACnBvJ,MAAO,EACPmJ,cAAe,EACfC,UAAW,EACXI,SAAU,EACVC,YAAa,GAsEf,SAASC,GAAqBC,GAC5B,OAAOvH,KAAK+D,MAA4C,GAAtCwD,EAAU,QAAYR,cACkB,GAAxCQ,EAAU,UAAcR,cACY,GAApCQ,EAAU,MAAUR,eCxFxC,IAEe,cAA8B,IAArBvG,EAAoB,uDAAZ,GAAIC,EAAQ,uCACpCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,EAAQE,KAMX,IALA,IAAM6G,EAAgBnG,EAAQ+K,oBACxB3C,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7B6B,EAAY7B,EAAM6B,UAElBmF,EAAY,GAClB,MAAqBlK,OAAO8H,OAAO/C,EAAUzE,OAA7C,eAAqD,CAAhD,IAAIoB,EAAQ,KACTC,EAAewI,EAAUzI,EAASE,YACxC,GAAID,EAAa9E,WAAaf,EAAkBC,QAIhD,cAA8BiE,OAAOE,QAAQyB,EAAa7E,UAA1D,eAAqE,CAAC,IAAD,0BAA3DsN,EAA2D,KAAlDhK,EAAkD,KAC9D8J,EAAUE,KACbF,EAAUE,GAAW,GAGvBF,EAAUE,IAAYhK,EAAS4B,GAtBrB,EAAI,KA2BlB,OADAiC,EAASiG,UAAYA,EACdjG,EACT,QACE,OAAOf,IC8CEmH,GA/Ee,CAC5BC,OAAQ,CACN5N,KAAM,SACN6N,QAAS,EACTnN,SAAU,CACRC,KAAM,CACJmN,SAAU,GACVC,OAAQ,GAEV5M,MAAO,CACL2M,SAAU,GACVC,OAAQ,KAIdC,QAAS,CACPhO,KAAM,UACN6N,QAAS,GACTnN,SAAU,CACRL,UAAW,CACTyN,SAAU,EACVC,OAAQ,IAEVpN,KAAM,CACJmN,SAAU,EACVC,OAAQ,IAEV5M,MAAO,CACL2M,SAAU,IACVC,OAAQ,IAEVvN,MAAO,CACLsN,SAAU,EACVC,OAAQ,MAIdE,QAAS,CACPjO,KAAM,UACN6N,QAAS,IACTnN,SAAU,CACRC,KAAM,CACJmN,SAAU,GACVC,OAAQ,GAEVG,MAAO,CACLJ,SAAU,GACVC,OAAQ,IAEV5M,MAAO,CACL2M,SAAU,IACVC,OAAQ,IAEVxM,MAAO,CACLuM,SAAU,IACVC,OAAQ,IAEV1N,UAAW,CACTyN,SAAU,EACVC,OAAQ,IAEVvN,MAAO,CACLsN,SAAU,EACVC,OAAQ,MAIdI,UAAW,CACTnO,KAAM,YACN6N,QAAS,KACTnN,SAAU,IAEZ0N,MAAO,CACLpO,KAAM,QACN6N,QAAS,KACTnN,SAAU,KCpEC,cAA8B,IAArB8F,EAAoB,uDAAZ,GAAIC,EAAQ,uCACpCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,EAAQE,KACX,IAAM6G,EAAgBnG,EAAQ+K,oBACxB3C,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7BI,EAAYtD,OAAOC,OAAO,GAAIgE,EAASX,WACvCxD,EAAYE,OAAOC,OAAO,GAAIqD,EAAUxD,WAC9CwD,EAAUxD,UAAYA,EACtB,IAAMoK,EAAYjG,EAASiG,UACrBD,EAAajK,OAAOC,OAAO,GAAIgE,EAASgG,YAC9ChG,EAASX,UAAYA,EACrBW,EAASgG,WAAaA,EAEtB,cAAqCjK,OAAOE,QAAQgD,EAAM+G,YAA1D,eAAuE,CAAC,IAAD,0BAA3Dc,EAA2D,KAAlDC,EAAkD,KAC/D7B,EAAMnJ,OAAOC,OAAO,GAAI+K,GAC9B7B,EAAIS,YAAc,KAClB,IAAIqB,EAAmB,EACvB,GAA0B,IAAtBD,EAAY1K,MACd,cAAqCN,OAAOE,QAAQmK,GAAsBU,GAAS3N,UAAnF,eAA8F,CAAC,IAAD,0BAAlF2J,EAAkF,KAAzE6C,EAAyE,KACtFxH,EAAWwH,EAAYY,SAAWrB,EAAI7I,MAAQ0B,GAxB5C,EAAI,IACD,IAwBPkJ,EAAe,EAEnB,GAAIhB,EAAUnD,GACRmD,EAAUnD,GAAW3E,IACvB8I,EAAehB,EAAUnD,GAAW3E,EAC/B+G,EAAIS,cACPT,EAAIS,YAAc,QAAU7C,IAGhCmD,EAAUnD,IAAY3E,EAClB8H,EAAUnD,GAAW,IACvBmD,EAAUnD,GAAW,QAElB,GAAIjH,EAAUiH,GAAU,CAC7B,IAAMiB,EAAWhI,OAAOC,OAAO,GAAIH,EAAUiH,IAC7CjH,EAAUiH,GAAWiB,EAEjBA,EAAS1H,MAAQ8B,IACnB8I,EAAelD,EAAS1H,MAAQ8B,EAC3B+G,EAAIS,cACPT,EAAIS,YAAc,QAAU7C,IAGhCiB,EAAS1H,OAAS8B,EACd4F,EAAS1H,MAAQ,IACnB0H,EAAS1H,MAAQ,QAGnB4K,EAAe,EACV/B,EAAIS,cACPT,EAAIS,YAAc,QAAU7C,GAIhCkE,GAAoBrB,EAAYa,OAASS,EAI7C,IAAIC,GAAiBF,EAAmB9B,EAAIO,WAAa,IACrDhH,KAAK0I,IAAID,GA9DO,OA+DlBA,EA/DkB,MAiEpBhC,EAAIO,WAAayB,EACjBlB,EAAWc,GAAW5B,EAGxB,OAAOlF,EACT,QACE,OAAOf,I,imBCvEb,IAIMmI,GAAqB,GACrBC,GAAqB,IAEZ,cAA8B,IAArBpI,EAAoB,uDAAZ,GAAIC,EAAQ,uCACtCtH,EAAUsH,EAAOtH,QACrB,OAAOsH,EAAOvH,MACZ,KAAKX,EAAQE,KACX,IAAM6G,EAAgBnG,EAAQ+K,oBACxB3C,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7BqI,EAASvL,OAAOC,OAAO,GAAIgE,EAASuH,SACpCvB,EAAajK,OAAOC,OAAO,GAAIgE,EAASgG,YAC9ChG,EAASuH,QAAUD,EACnBtH,EAASgG,WAAaA,EAEtB,IAAMwB,EAAmB,GAEnBC,EAAYH,EAAOI,OAAOhG,KAAI,SAACiG,GACnC,IAAMC,EAAQ7L,OAAOC,OAAO,GAAI2L,GAC1BE,EAAe7B,EAAWE,EAAU0B,EAAME,SAASxN,oBAAoBmL,UACzEsC,EAAe,EAEfF,GAxBiB,IAwBuBD,EAAMnD,WAAamD,EAAMrN,gBACnEwN,EAAe,GAEbF,GA1BkB,IA0BuBD,EAAMnD,WAAa,IAC9DsD,GAAgB,GAGlBH,EAAMpD,aAAezG,EAAgBgK,GACjCH,EAAMpD,YAjCc,IAiC2BoD,EAAMpD,aAjCjC,MAkCtBoD,EAAMpD,aAlCgB,GAkCyBuD,EAC/CH,EAAMnD,YAAcsD,GAGlBH,EAAMnD,WAAa,IACrBmD,EAAMnD,WAAa,GAGrB,IAAMuD,EAAc9B,EAAU0B,EAAME,SAASxN,mBAO7C,OANKkN,EAAiBQ,KACpBR,EAAiBQ,GAAe,GAGlCR,EAAiBQ,IAAgBJ,EAAMnD,WAEhCmD,KAETN,EAAOI,OAASD,EAEhB,cAAgC1L,OAAOE,QAAQuL,GAA/C,eAAkE,CAAC,IAAD,0BAAxDV,EAAwD,KAA/CmB,EAA+C,KAC1DC,EAASnM,OAAOC,OAAO,GAAIgK,EAAWc,IAC5CoB,EAAO7L,MAAQ4L,EACfjC,EAAWc,GAAWoB,EAIxB,IAAM7B,EAAM,MAAOL,EAAU,QAC7B,GAAIK,EAAOhK,MAAQgK,EAAOb,gBACxBa,EAAOP,aAAe/H,EAClBsI,EAAOP,YA5DU,MA4D0B,CAC7CO,EAAOP,aA7DY,KA8DnB,IAAMqC,EAAkBC,GAAmB/B,EAAOb,cAAgBa,EAAOhK,OACzEgK,EAAOhK,OAAS8L,EAKpB,OAFAnC,EAAU,OAAaK,EAEhBrG,EACT,QACE,OAAOf,IAIb,SAASmJ,GAAmBC,GAC1B,IAAMC,EAAa7J,KAAKE,IAAI0J,EAAejB,IACrCmB,EAAa9J,KAAKC,IAAI4J,EAAYjB,IAExC,OAAOmB,KAAG,CAAC9J,IAAK4J,EAAY3J,IAAK4J,EAAYE,SAAS,IClFxD,IAIe,cAA8B,IAArBxJ,EAAoB,uDAAZ,GAAIC,EAAQ,uCACpCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,EAAQE,KACX,IAAM6G,EAAgBnG,EAAQ+K,oBACxB3C,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7BI,EAAYtD,OAAOC,OAAO,GAAIgE,EAASX,WACvCxD,EAAYE,OAAOC,OAAO,GAAIqD,EAAUxD,WACxCZ,EAAOc,OAAOC,OAAO,GAAIH,EAAUZ,MACzC+E,EAASX,UAAYA,EACrBA,EAAUxD,UAAYA,EACtBA,EAAUZ,KAAOA,EAEjB,IAAMyN,EAAc,CAClBC,gBAAiB,EACjBC,WAAY,GAIRC,EAAuBtQ,EAAoB8G,EAAU1H,MAAMoB,OAASgF,GAvB5D,EAAE,IAwBV+K,EAAmB/M,OAAO8H,OAAO5E,EAAM6B,UAAUzE,OAAO6H,QAAO,SAACe,EAAKxH,GAIzE,OAAOwH,GAHMxH,EAASQ,QACpB1F,EAAoBkF,EAASE,YAAY5E,OACzCR,EAAoBkF,EAASE,YAAYrE,gBACpByE,GA5BX,EAAE,MA6Bb8K,GAEGE,EAAahN,OAAO8H,OAAO5E,EAAM+G,YAAY9B,QAAO,SAACe,EAAKe,GAC9D,IAAIgD,EA/BiB,IA+BChD,EAAWP,UAIjC,OAHIuD,EA/BkB,MAgCpBA,EAhCoB,KAkCf/D,EAAOmB,GAAsBJ,EAAWvJ,IAAI6J,QAAUN,EAAW3J,MAAQ0B,GApCpE,EAAE,IAoCgGiL,IAC7G,GAQH,OANAN,EAAYC,gBAAkBG,EAC9BJ,EAAYE,WAAaG,EACzB/I,EAAS0I,YAAcA,EAEvBzN,EAAKoB,MAAQpB,EAAKoB,MAAQ0M,EAAaD,EAEhC9I,EACT,QACE,OAAOf,ICnDAgK,GAAmB,CAC9B,CAAC,UAAW,IACZ,CAAC,UAAW,IACZ,CAAC,UAAW,GACZ,CAAC,UAAW,KACZ,CAAC,YAAa,KACd,CAAC,YAAa,MACd,CAAC,WAAY,KACb,CAAC,WAAY,MACb,CAAC,WAAY,MACb,CAAC,WAAY,OAGFC,GAAU,CAErB,CACEC,MAAO,mBACPrI,UAAW,CAAC,cAAe,aAAc,iBACzCkF,WAAY,UACZnK,UAAW,CAAC,OAAQ,OAAQ,OAAQ,SAGtC,CACEiF,UAAW,CAAC,UAAW,aACvBjF,UAAW,CAAC,QAAS,UAGvB,CACEsN,MAAO,aACPrI,UAAW,CAAC,WAGd,CACEkF,WAAY,UACZnK,UAAW,CAAC,OAAQ,QAAS,QAAS,aAAc,SACpDiF,UAAW,CAAC,WAAY,UAAW,SAAU,cAC7CyG,QAAS,CAAC,kB,6kBCjCC,kBAA8B,IAArBtI,EAAoB,uDAAZ,GAAIC,EAAQ,uCAC1C,OAAQA,EAAOvH,MACb,KAAKX,EAAQE,KAAO,IAAD,cACoB+R,GAAiBhK,EAAMmK,OAAOC,MAAQ,GAD1D,GACVC,EADU,KACKC,EADL,KAEX9E,EAAaxF,EAAM+G,WAAWsD,GAAejN,MACnD,GAAIoI,GAAc8E,EAAa,CAC7B,IAAMvJ,EAAWjE,OAAOC,OAAO,GAAIiD,GAC7BmK,EAASrN,OAAOC,OAAO,GAAIgE,EAASoJ,QAC1CpJ,EAASoJ,OAASA,EAClBA,EAAOC,QAEP,IAAMG,EAAWN,GAAQE,EAAOC,MAAQ,GAIxC,GAHIG,EAASL,QACXC,EAAOD,MAAQK,EAASL,OAEtBK,EAAS1I,UAAW,CACtB,IAAM2I,EAAgB1N,OAAOC,OAAO,GAAIgE,EAAS0J,cACjD1J,EAAS0J,aAAeD,EACxBD,EAAS1I,UAAU6I,SAAQ,SAAAC,GACzB,IAAMF,EAAe3N,OAAOC,OAAO,GAAIyN,EAAcG,IACrDF,EAAaF,UAAW,EACxBC,EAAcG,GAASF,KAG3B,GAAIF,EAAS3N,UAAW,CACtB,IAAMwD,EAAYtD,OAAOC,OAAO,GAAIgE,EAASX,WACvCxD,EAAYE,OAAOC,OAAO,GAAIqD,EAAUxD,WAC9CmE,EAASX,UAAYA,EACrBA,EAAUxD,UAAYA,EACtB2N,EAAS3N,UAAU8N,SAAQ,SAAAE,GACzB,IAAM9F,EAAWhI,OAAOC,OAAO,GAAIH,EAAUgO,IAC7ChO,EAAUgO,GAAS9F,EACnBA,EAASyF,UAAW,KAGxB,GAAIA,EAASxD,WAAY,CACvB,IAAMA,EAAajK,OAAOC,OAAO,GAAIgE,EAASgG,YAC9ChG,EAASgG,WAAaA,EACtB,IAAM8D,EAAc/N,OAAOC,OAAO,GAAIgK,EAAWwD,EAASxD,aAC1D8D,EAAYN,UAAW,EACvBxD,EAAWwD,EAASxD,YAAc8D,EAEpC,GAAIN,EAASjC,QAAS,CACpB,IAAMwC,EAAK,MAAO/J,EAASuH,QAAQwC,OAC7BxC,EAAO,MAAOvH,EAASuH,QAAhB,CAAyBwC,MAAOA,IAC7C/J,EAASuH,QAAUA,EACnBiC,EAASjC,QAAQoC,SAAQ,SAAA7B,GACvB,IAAMkC,EAAa,MAAOD,EAAMjC,GAAb,CAAuB0B,UAAU,IACpDO,EAAMjC,GAAWkC,KAIrB,OAAOhK,EAET,OAAOf,EAET,QACE,OAAOA,IC5DAjI,GAAU,CACrBiT,gBAAiB,mB,6kBCCJ,kBAA8B,IAArBhL,EAAoB,uDAAZ,GAAIC,EAAQ,uCACpCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,GAAQiT,gBACX,OAAO,MACFhL,EADL,CAEEiL,MAAO,CACLC,WAAYvS,EAAQuS,cAG1B,QACE,OAAOlL,IC8BEmL,GA3CC,CACdC,KAAM,CACJ5R,KAAM,gBACN6R,MAAO,CACL9Q,KAAM,CACJ+Q,IAAK,GACLC,KAAM,KAER7P,KAAM,CACJ4P,IAAK,GACLC,KAAM,KAERpQ,WAAY,CACVmQ,IAAK,GACLC,KAAM,KAER7D,MAAO,CACL4D,IAAK,EACLC,KAAM,IAGVC,aAAc,IAEhBC,OAAQ,CACNjS,KAAM,aACN6R,MAAO,CACL9Q,KAAM,CACJ+Q,IAAK,EACLC,KAAM,GAER7P,KAAM,CACJ4P,IAAK,EACLC,KAAM,KAER7D,MAAO,CACL4D,IAAK,EACLC,KAAM,OAGVC,aAAc,KCQHE,GA/Ca,CAC1B1P,KAAM,CACJxC,KAAM,OACNmS,eAAgB,GAElBjQ,KAAM,CACJlC,KAAM,OACNmS,eAAgB,IAElBxR,KAAM,CACJX,KAAM,OACNmS,eAAgB,GAElBpR,KAAM,CACJf,KAAM,OACNmS,eAAgB,GAElBlR,MAAO,CACLjB,KAAM,QACNmS,eAAgB,IAElBhR,MAAO,CACLnB,KAAM,QACNmS,eAAgB,GAElB9Q,KAAM,CACJrB,KAAM,OACNmS,eAAgB,GAElB5Q,MAAO,CACLvB,KAAM,WACNmS,eAAgB,IAElB1Q,MAAO,CACLzB,KAAM,QACNmS,eAAgB,GAElBxQ,WAAY,CACV3B,KAAM,cACNmS,eAAgB,GAElBjE,MAAO,CACLlO,KAAM,QACNmS,eAAgB,I,6kBCtCpB,IAAMC,GAAgC,IAIhCC,GAAa,CACjBC,SAAU,EACVC,MAAO,EACPC,YAAaJ,GACbK,MAAO,GACPC,SAAS,EACTC,YARwB,KAwD1B,SAASC,GAAUC,GACjB,IAAMC,EAAUxP,OAAO6B,KAAKwM,IACxBoB,EAAiBD,EAAQ9M,KAAK+D,MAAM/D,KAAKgN,SAAWF,EAAQjL,SAC5DgL,EAAaH,UACfG,EAAaH,SAAU,EACvBK,EAAiB,QAcnB,IAZA,IAAME,EAAatB,GAAQoB,GACrBN,EAAQ,GACRS,EAAcD,EAAWjB,aAEzBzK,EAAQ,MACTsL,EADS,CAEZP,SAAUS,EACVN,MAAOA,EACPS,YAAaA,EACbV,YANkBJ,KASpB,MAA0B9O,OAAOE,QAAQyP,EAAWpB,OAApD,eAA4D,CAAC,IAAD,0BAAlDzM,EAAkD,KAA5CyM,EAA4C,KACpDsB,EAAgBjB,GAAoB9M,GAAM+M,eAC1CiB,EAAWvB,EAAMC,IAAMqB,EACvBE,EAAYxB,EAAME,KAAOoB,EAE/BV,EAAMrN,GAAQ,CACZgO,SAAUA,EACVC,UAAWA,EACXC,KAAM,GAEJD,EAAY,IACdZ,EAAMrN,GAAMkO,KAAOtN,KAAK+D,MAAoB,IAAdmJ,IAIlC,OAAO3L,EChFT,IAAMgM,GAAkBC,YAAgB,CACtC/B,MAAO,WAAiB,IAAhBjL,EAAe,uDAAP,GAAS,OAAOA,GAChCmK,OzBjBa,WAA6B,IAApBA,EAAmB,uDAAZ,GAAIlK,EAAQ,uCACnCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKwH,EAAY/H,YACf,OAAO,EAAP,GAAWgS,EAAX,CAAmB3Q,KAAMb,EAAQa,OAEnC,QACE,OAAO2Q,IyBWX/J,UnBRa,WAAkC,IAAzBA,EAAwB,uDAAZ,GAAIH,EAAQ,uCACxCtH,EAAUsH,EAAOtH,QACvB,OAAOsH,EAAOvH,MACZ,KAAKwH,EAAYlI,KAEf,IAAMiV,EAAgBnQ,OAAOC,OAAO,GAAIqD,GAClC8M,EAAepQ,OAAOE,QAAQiQ,EAAcrQ,WAAWqI,QAAO,SAACC,EAAD,GAA0C,IAAD,mBAA1BiI,EAA0B,KAAdrI,EAAc,KACrGsI,EAActQ,OAAOC,OAAO,GAAI+H,EAAUtI,GAEhD,OADA0I,EAAYiI,GAAcC,EACnBlI,IACN,IAEH,OADA+H,EAAcrQ,UAAYsQ,EACnBD,EAET,KAAKI,EAAelR,YACpB,KAAKkR,EAAejR,aACpB,KAAK8E,EAAoB5I,mBACvB,IAAM2U,EAAgBnQ,OAAOC,OAAO,GAAIqD,GACpC3E,EAAO9C,EAAQiI,YAAYnF,KAC3ByR,EAAevQ,EAAWsQ,EAAcrQ,UAAWnB,GAEvD,OADAwR,EAAcrQ,UAAYsQ,EACnBD,EAET,KAAKlV,EAAQK,gBACX,IAAM6U,EAAgBnQ,OAAOC,OAAO,GAAIqD,GACpC3E,EAAO9C,EAAQiI,YAAYnF,KAC3ByR,EAAevQ,EAAWsQ,EAAcrQ,UAAWnB,GACvDwR,EAAcrQ,UAAYsQ,EAE1B,IAAMI,EAAmBhU,EAAoBX,EAAQiI,YAAYpD,IAIjE,OAFAyP,EAAcrL,eAAiB0L,EAAiBzR,SAEzCoR,EAET,KAAKlV,EAAQM,mBACX,IAAM4U,EAAgBnQ,OAAOC,OAAO,GAAIqD,GAClCmN,EAAmBjU,EAAoB8G,EAAU1H,MACjDgI,EAAgBpH,EAAoBiU,EAAiBzR,YAC3D,IAAK4E,EACH,OAAON,EAGT,IAAM3E,EAAO8R,EAAiBxR,YACxBmR,EAAevQ,EAAWsQ,EAAcrQ,UAAWnB,GAMzD,OALAwR,EAAcrQ,UAAYsQ,EAE1BD,EAAcrL,eAAiBlB,EAAc7E,SAC7CoR,EAAcvU,KAAOY,EAAoB8G,EAAU1H,MAAMoD,WAElDmR,EAET,KAAKO,EAAajR,eAChB,IAAMd,EAAO9C,EAAQ8C,KACfgS,EAAmB9Q,EAAWyD,EAAUxD,UAAWnB,GACzD,OAAO,KAAI2E,EAAX,CAAsBxD,UAAW6Q,IAEnC,KAAKD,EAAanR,UAChB,IAAMuC,EAAOjG,EAAQkL,QACf3G,EAASvE,EAAQuE,OACjBwQ,EAAU/U,EAAQ+U,QAElB1R,EAAI,KAAOoE,EAAUxD,UAAUZ,MACrCA,EAAKoB,OAASF,EAASwQ,EAEvB,IAAMC,EAAU,KAAOvN,EAAUxD,UAAUgC,IAC3C+O,EAAWvQ,OAASF,EAEpB,IAAMN,EAAS,KAAOwD,EAAUxD,UAAjB,aAA4BZ,KAAMA,GAAO4C,EAAO+O,IAC/D,OAAO,KAAIvN,EAAX,CAAsBxD,UAAWA,IAEnC,KAAK4Q,EAAalR,WAChB,IAAMsC,EAAOjG,EAAQkL,QACf3G,EAASvE,EAAQuE,OACjBwQ,EAAU/U,EAAQ+U,QAElB1R,EAAI,KAAOoE,EAAUxD,UAAUZ,MACrCA,EAAKoB,OAASF,EAASwQ,EAEvB,IAAMC,EAAU,KAAOvN,EAAUxD,UAAUgC,IAC3C+O,EAAWvQ,OAASF,EAEpB,IAAMN,EAAS,KAAOwD,EAAUxD,UAAjB,aAA4BZ,KAAMA,GAAO4C,EAAO+O,IAC/D,OAAO,KAAIvN,EAAX,CAAsBxD,UAAWA,IAEnC,QACE,OAAOwD,ImB7EXqK,alBjBa,WAAsC,IAA7BD,EAA4B,uDAAZ,GAAIvK,EAAQ,uCAC9CtH,EAAUsH,EAAOtH,QACrB,OAAOsH,EAAOvH,MACZ,KAAK+H,EAAiBrI,gBACtB,KAAKiV,EAAelR,YACpB,KAAKpE,EAAQO,mBACX,IAAIsV,EAAgBjV,EAAQiI,YAAYpD,GACpCoD,EAAc4J,EAAcoD,GAC5BC,EAAW/Q,OAAOC,OAAO,GAAI6D,EAAa,CAACxD,MAAOwD,EAAYxD,MAAM,IACxE,OAAON,OAAOC,OAAO,GAAIyN,EAAlB1N,OAAA,IAAAA,CAAA,GAAmC8Q,EAAgBC,IAC5D,KAAK9V,EAAQQ,iBACX,IAAMuV,EAAcnV,EAAQF,UAAUiG,WAChCjG,EAAS,KAAO+R,EAAcsD,IAEpC,OADArV,EAAU2E,QACH,KAAIoN,EAAX,eAA2BsD,EAAcrV,IAC3C,QACE,OAAO+R,IkBEX3I,UhBCa,WAAkC,IAAzBA,EAAwB,uDAAZ,GAAI5B,EAAQ,uCACxCtH,EAAUsH,EAAOtH,QACvB,OAAOsH,EAAOvH,MACZ,KAAKqV,EAAa9V,KAChB,IAAK4J,EAAUzE,MACb,OAAOyE,EAET,IAAMd,EAAWjE,OAAOC,OAAO,GAAI8E,GAC7BgM,EAAW/Q,OAAOC,OAAO,GAAIgE,EAAS3D,OAC5C2D,EAAS3D,MAAQyQ,EAEjB,IAAM/O,EAAgBnG,EAAQ+K,oBAW9B,OAVA5G,OAAO8H,OAAO/C,EAAUzE,OAAOsN,SAAQ,SAAClM,GACtC,IACIwP,EAAkB,KAEpBA,EAHmB1U,EAAoBkF,EAASE,YAEjC/E,WAAaf,EAAkBE,SAC5B+F,EAAiBL,EAAUM,GAE3BN,EAEpBqP,EAASG,EAAgBxQ,IAAMwQ,KAE1BjN,EAET,KAAKN,EAAiBrI,gBACtB,KAAK6V,EAAqB3V,mBACxB,IAAM4V,EAAkB5U,EAAoBX,EAAQiI,YAAYpD,IAC5D2Q,EAAcrR,OAAOC,OAAO,GAAI,CAACS,GAAI8G,MAAU5F,WAAY/F,EAAQiI,YAAYpD,GAAIwB,SAAS,IAC5FkP,EAAgBvU,WAAaf,EAAkBE,UAEjDyF,EADA4P,EAAcrR,OAAOC,OAAOoR,EAAazQ,IAG3C,IAAM0Q,EAAetR,OAAOC,OAAO,GAAI8E,EAAUzE,OAEjD,OADAgR,EAAaD,EAAY3Q,IAAM2Q,EACxBrR,OAAOC,OAAO,GAAI8E,EAAW,CAACzE,MAAOgR,IAC9C,KAAKH,EAAqB1V,iBACxB,IAAM8V,EAAoB1V,EAAQF,UAC5BoV,EAAQ,KAAOhM,EAAUzE,OAE/B,cADOyQ,EAASQ,EAAkB7Q,IAC3B,KAAIqE,EAAX,CAAsBzE,MAAOyQ,IAC/B,KAAK9V,EAAQsF,iBACX,IAAMiR,EAAY3V,EAAQ6E,GACpB+Q,EAAQ,KAAO1M,EAAUzE,MAAMkR,GAAvB,CAAmCtP,SAAS,IACpD5B,EAAK,KAAOyE,EAAUzE,MAAjB,eAAyBkR,EAAYC,IAChD,OAAO,KAAI1M,EAAX,CAAsBzE,MAAOA,IAE/B,KAAKrF,EAAQuF,gBACX,IAAMkR,EAAW7V,EAAQ6E,GACnBwB,EAAO,KAAO6C,EAAUzE,MAAMoR,GAAvB,CAAkCxP,SAAS,IAClD5B,EAAK,KAAOyE,EAAUzE,MAAjB,eAAyBoR,EAAWxP,IAC/C,OAAO,KAAI6C,EAAX,CAAsBzE,MAAOA,IAE/B,QACE,OAAOyE,IgBrDXjG,SAAU,WAAiB,IAAhBoE,EAAe,uDAAP,GAAS,OAAOA,GACnCsI,QdJa,WAAgC,IAAvBA,EAAsB,uDAAZ,GAAIrI,EAAQ,uCACtCtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,EAAQoE,YACX,IAAM4E,EAAWjE,OAAOC,OAAO,GAAIuL,GAC7BwC,EAAQhO,OAAOC,OAAO,GAAIgE,EAAS+J,OACnCrC,EAAS1H,EAAS0H,OAAOnI,MAAM,GACrCS,EAAS+J,MAAQA,EACjB/J,EAAS0H,OAASA,EAElB,IAAMgG,EAAU9V,EAAQiI,YAAYpD,GAC9B9E,EAAOoE,OAAOC,OAAO,GAAI+N,EAAM2D,IACrC3D,EAAM2D,GAAW/V,EACjB,IAAMgW,EAAYpV,EAAoBmV,GAChC9F,EAAK,MAAOrD,GAAP,CAAuBuD,QAAS4F,EAASnT,cAAeoT,EAAUpT,gBAO7E,OALA5C,EAAK0E,OAAS,EACdqL,EAAOlE,KAAKoE,GAEZ/C,GAAyBkF,EAAOpS,EAAM+V,GAE/B1N,EAET,KAAKhJ,EAAQqE,aAAe,IAAD,EACnBuS,EAAchW,EAAQiW,UACtBC,EAAYvV,EAAoBqV,GAAapT,UAE7CuT,EAAQ,MAAOxG,EAAQwC,MAAM6D,IAC7BI,EAAM,MAAOzG,EAAQwC,MAAM+D,IAC3B/D,EAAK,MAAOxC,EAAQwC,OAAf,mBAAuB6D,EAAcG,GAArC,cAAgDD,EAAYE,GAA5D,IACLtG,EAAM,YAAOH,EAAQG,QACrB1H,EAAQ,MAAOuH,EAAP,CAAgBwC,MAAOA,EAAOrC,OAAQA,IAC9CuG,EAAY1V,EAAoBuV,GAGhCI,EAAcxG,EAAOyG,WAAU,SAACC,GAAD,OAAWA,EAAMtG,UAAY8F,KASlE,OARAlG,EAAOjH,OAAOyN,EAAa,GAC3BxG,EAAOlE,KAAP,MAAgByK,EAAhB,GAA8B1J,GAA9B,CAA8CuD,QAASgG,KACvDC,EAAS1R,OAAS,EAClB2R,EAAO3R,OAAS,EAEhBwI,GAAyBkF,EAAOgE,EAAUH,GAC1C/I,GAAyBkF,EAAOiE,EAAQF,GAEjC9N,EAET,QACE,OAAOuH,Ic1CXvB,WbHa,WAAwC,IAA/BqI,EAA8B,uDAAZ,GAAInP,EAAQ,uCAC9CtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKwH,EAAYlI,KAGf,IAFA,IAAM+I,EAAWjE,OAAOC,OAAO,GAAIqS,GAEnC,MAA2BtS,OAAOE,QAAQ+D,GAA1C,eAAqD,CAAC,IAAD,0BAA3C8G,EAA2C,KAAlC5B,EAAkC,KACnD,GAAgB,WAAZ4B,EACF9G,EAAS8G,GAAT,MAAwBlB,GAAxB,GAAyCV,OACpC,CACL,IAAMgD,EAASnM,OAAOC,OAAO,GAAIkJ,EAAKK,IACtCvF,EAAS8G,GAAWoB,GAIxB,OAAOlI,EAET,KAAKsM,EAAelR,YAClB,IAAMkT,EAAa/V,EAAoBX,EAAQiI,YAAYpD,IACrDuD,EAAWjE,OAAOC,OAAO,GAAIqS,GAE7BE,EAAcxS,OAAOC,OAAO,GAAIgE,EAASsO,EAAWhU,qBAK1D,OAJA0F,EAASuO,EAAY9R,IAAM8R,EAE3BA,EAAY/I,eAAiB8I,EAAW/T,cAEjCyF,EAET,KAAKb,EAAYjI,KAIf,IAHA,IAAM8O,EAAajK,OAAOC,OAAO,GAAIqS,GAGrC,GAFsBzW,EAAQ+K,oBAE9B,KAA2B5G,OAAOE,QAAQ+J,GAA1C,eAAuD,CAAC,IAAD,0BAA7Cc,EAA6C,KAApC5B,EAAoC,KACjDA,EAAIO,UAnD0B,IAmDuBP,EAAI7I,QAAU6I,EAAIM,cACzEQ,EAAWc,GAAX,MAA2B5B,EAA3B,CAAgCQ,WAAW,IAE3CM,EAAWc,GAAX,MAA2B5B,EAA3B,CAAgCQ,WAAW,IAI/C,OAAOM,EAET,KAAKsG,EAAejR,aAAe,IAAD,EAC1BmT,EAAejW,EAAoBX,EAAQiW,WAC3CI,EAAY1V,EAAoBiW,EAAahU,WAE7CiU,EAAM,MAAOJ,EAAgBG,EAAalU,qBAC1CoU,EAAO,MAAOL,EAAgBJ,EAAU3T,qBAE9CmU,EAAOpS,OAASmS,EAAajU,cAC7BmU,EAAQrS,OAASmS,EAAajU,cAC9BkU,EAAOjJ,eAAiBgJ,EAAajU,cACrCmU,EAAQlJ,eAAiByI,EAAU1T,cAEnC,IAAMyF,EAAQ,MAAOqO,GAAP,mBAAyBG,EAAalU,mBAAqBmU,GAA3D,cAAoER,EAAU3T,mBAAqBoU,GAAnG,IAGRC,EAAa5I,GAAqB/F,GAGxC,OAFAA,EAAQ,OAAR,MAAyBA,EAAQ,OAAjC,CAA6CwF,cAAemJ,IAErD3O,EAET,QACE,OAAOqO,Ia3DXO,ODRa,WAAqC,IAA5BA,EAA2B,uDAApB9D,GAAY5L,EAAQ,uCAC3CtH,EAAUsH,EAAOtH,QACvB,OAAQsH,EAAOvH,MACb,KAAKX,EAAQsE,UACX,IAAMuT,EAAQjX,EAAQkL,QAChB3G,EAASvE,EAAQuE,OACjB+O,EAAK,MAAO0D,EAAO1D,OACnBlL,EAAQ,MAAO4O,EAAP,CAAe1D,MAAOA,IAIpC,OAFAA,EAAM2D,GAAO9C,MAAQ5P,EAEd6D,EAET,KAAKhJ,EAAQuE,WACX,IAAMsT,EAAQjX,EAAQkL,QAChB3G,EAASvE,EAAQuE,OACjB+O,EAAK,MAAO0D,EAAO1D,OACnBlL,EAAQ,MAAO4O,EAAP,CAAe1D,MAAOA,IAIpC,OAFAA,EAAM2D,GAAO9C,MAAQ5P,EAEd6D,EAET,KAAKb,EAAYjI,KACf,IAAM6G,EAAgBnG,EAAQ+K,oBACxB3C,EAAQ,MAAO4O,GAErB,OADA5O,EAASgL,OAASjN,EACdiC,EAASgL,MAAQhL,EAASiL,aAC5BjL,EAASgL,OAAShL,EAASiL,YACpBI,GAAUrL,IAEZA,EACT,KAAKhJ,EAAQwE,eACX,IAAMwE,EAAQ,MAAO4O,GAKrB,OAJA5O,EAAS+K,SAAW,EACpB/K,EAASkL,MAAQ,GACjBlL,EAAS8O,KAAO,EAChB9O,EAASiL,YAjD0B,IAkD5BjL,EAET,QACE,OAAO4O,MCJEG,OA1Bf,SAAqB9P,EAAOC,GAC1B,GAAIA,EAAOvH,OAASX,EAAQG,UAC1B,OAAO+H,EAAOtH,QAAQoX,UAExB,GAAI9P,EAAOvH,OAASX,EAAQE,KAAM,CAChC,IAAIiT,EAAalL,EAAMiL,MAAMC,WACxBA,IACHA,EAAa,GAEfjL,EAAOtH,QAAQ+K,qBAAuBwH,EAExC,IAAM8E,EAAa/E,GAAMjL,EAAOC,GAC1BgQ,EAAoBlD,GAAgBiD,EAAY/P,GAChDN,EAAe/D,EAASqU,EAAmBhQ,GACjD,GAAIA,EAAOvH,OAASX,EAAQE,KAAM,CAChC,IAAMiY,EAAehJ,GAAQvH,EAAcM,GACrCkQ,EAAmBC,GAAQF,EAAcjQ,GACzCoQ,EAAcC,GAAOH,EAAkBlQ,GACvCsQ,EAAeC,GAAQH,EAAapQ,GAE1C,OADqBwQ,GAAQF,EAActQ,GAG3C,OAAON,GC+LI+Q,GAlPO,CACpBvG,OAAQ,CACNC,MAAO,EACPF,MAAO,mBACP1Q,KAAM,cAERiR,aAAc,CACZrP,aAAc,CACZoC,GAAI,eACJJ,MAAO,EACP3B,KAAM,CACJlB,KAAM,GAERgQ,UAAU,GAEZhR,YAAa,CACXiE,GAAI,cACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,GAER6O,UAAU,GAEZtQ,WAAY,CACVuD,GAAI,aACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,GAER6O,UAAU,GAEZjQ,cAAe,CACbkD,GAAI,gBACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,GACNN,KAAM,GAER6O,UAAU,GAEZrO,eAAgB,CACdsB,GAAI,iBACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,GAER6O,UAAU,GAEZ/P,QAAS,CACPgD,GAAI,UACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IAERuO,UAAU,GAEZ7P,UAAW,CACT8C,GAAI,YACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,GAER6O,UAAU,GAEZxQ,OAAQ,CACNyD,GAAI,SACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,KACNzB,KAAM,GACNmB,KAAM,GAER6O,UAAU,GAEZ3P,SAAU,CACR4C,GAAI,WACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,GAER6O,UAAU,GAEZzP,QAAS,CACP0C,GAAI,UACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,IAGVV,OAAQ,CACNwC,GAAI,SACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,IAGVR,WAAY,CACVsC,GAAI,aACJJ,MAAO,EACP3B,KAAM,CACJO,KAAM,IACNzB,KAAM,EACNmB,KAAM,KAIZmG,UAAW,CACTzE,MAAO,IAETgD,UAAW,CACT1H,KAAM,iBACNkJ,cAAe,GACfhF,UAAW,CACTZ,KAAM,CACJwB,GAAI,OACJJ,MAAO,IACPmN,UAAU,GAEZ7O,KAAM,CACJ8B,GAAI,OACJJ,MAAO,GACPmN,UAAU,GAEZpQ,KAAM,CACJqD,GAAI,OACJJ,MAAO,EACPmN,UAAU,GAEZhQ,KAAM,CACJiD,GAAI,OACJJ,MAAO,GACPmN,UAAU,GAEZ9P,MAAO,CACL+C,GAAI,QACJJ,MAAO,EACPmN,UAAU,GAEZ5P,MAAO,CACL6C,GAAI,QACJJ,MAAO,EACPmN,UAAU,GAEZ1P,KAAM,CACJ2C,GAAI,OACJJ,MAAO,EACPmN,UAAU,GAEZ7C,MAAO,CACLlK,GAAI,QACJJ,MAAO,EACPmN,UAAU,GAEZxP,MAAO,CACLyC,GAAI,QACJJ,MAAO,EACPmN,UAAU,GAEZtP,MAAO,CACLuC,GAAI,QACJJ,MAAO,EACPmN,UAAU,GAEZpP,WAAY,CACVqC,GAAI,aACJJ,MAAO,EACPmN,UAAU,KAIhB3O,SAAU,CACRA,SAAS,GACTsG,SAAU,GACVI,YAAa,IAEfgG,QAAS,CACPwC,MAAO,CACL1P,aAAc,CACZgC,MAAO,EACP8I,qBAAsB,EACtBG,yBAA0B,EAC1BkE,UAAU,GAEZ/O,aAAc,CACZ4B,MAAO,EACP8I,qBAAsB,EACtBG,yBAA0B,EAC1BkE,UAAU,GAEZ5E,eAAgB,CACdvI,MAAO,EACP8I,qBAAsB,EACtBG,yBAA0B,EAC1BkE,UAAU,GAEZoG,WAAY,CACVvT,MAAO,EACP8I,qBAAsB,EACtBG,yBAA0B,EAC1BkE,UAAU,IAGd9B,OAAQ,IAEV1B,WAAY,CACVK,OAAQ,CACN5J,GAAI,SACJ+M,UAAU,GAEZ/C,QAAS,CACPhK,GAAI,UACJ+M,UAAU,GAEZ9C,QAAS,CACPjK,GAAI,UACJ+M,UAAU,GAEZ5C,UAAW,CACTnK,GAAI,YACJ+M,UAAU,GAEZ3C,MAAO,CACLpK,GAAI,QACJ+M,UAAU,K,kCC7OKqG,G,WACnB,WAAYC,EAAeC,GAAiB,qBAC1CC,KAAKC,eAAiBH,EACtBE,KAAKD,eAAiBA,EACtBC,KAAKE,SAAU,E,qDAGR,IAAD,OACN,IAAIF,KAAKE,QAAT,CAGA,IAAIC,EAAWC,KAAKC,MACpBL,KAAKE,SAAU,EAWfI,WAVe,SAAXC,IACF,GAAK,EAAKL,QAAV,CAGA,IAAIM,EAAcJ,KAAKC,MACnBI,EAAcD,EAAcL,EAChC,EAAKF,eAAeQ,GACpBN,EAAWK,EACXF,WAAWC,EAASG,KAAK,GAAO,EAAKX,kBAEnBW,KAAKV,MAAOA,KAAKD,mB,6BAIrCC,KAAKE,SAAU,M,KCHJS,GApBQ,WACrB,IAAMlY,EAAOmY,aAAY,SAAA3R,GAAK,OAAIA,EAAMmK,OAAO3Q,QACzC0Q,EAAQyH,aAAY,SAAA3R,GAAK,OAAIA,EAAMmK,OAAOD,SAC1C0H,EAAWC,cASjB,OACE,yBAAKC,UAAU,SACb,4BAAKtY,EAAL,IAAW,4BAAQuY,QATN,WACf,IAAMC,EAASC,OAAO,cAClBD,GACFJ,E7BOC,SAAoBpY,GACzB,MAAO,CAAEd,KAAMX,EAAQI,YAAaQ,QAAS,CAAEa,KAAMA,I6BRxC0Y,CAAWF,EAAOG,UAAU,EAAG,SAM7B,gBACX,4BAAKjI,KCIIkI,GAnBI,WACjB,IAAMR,EAAWC,cADM,EAEKQ,mBAAS,GAFd,mBAEhBnH,EAFgB,KAEJoH,EAFI,KASvB,OACE,yBAAKR,UAAU,eACb,0BAAMS,SAPW,SAACC,GACpBZ,ETLG,SAAuB1G,GAC5B,MAAO,CAAExS,KAAMX,GAAQiT,gBAAiBrS,QAAS,CAAEuS,WAAYA,ISIpDuH,CAAcvH,IACvBsH,EAAME,mBAMF,2BAAOha,KAAK,SAASc,KAAK,aAAamZ,SAAU,SAAAC,GAAC,OAAIN,EAAMM,EAAEC,OAAOC,QAAQC,UAAQ,IACrF,2BAAOra,KAAK,SAASoa,MAAM,uB,6kBCjB5B,IAAME,GAAiB,SAACC,GAC7B,OAAOnW,OAAOE,QAAQiW,GAAkBhO,QAAO,SAACC,EAAD,GAAgC,IAAD,mBAAhBgO,EAAgB,KAAXJ,EAAW,KAI5E,OAHIA,EAAMvI,WACRrF,EAAYgO,GAAOJ,GAEd5N,IACN,KAGQiO,GAAgB,SAACC,EAASxW,GACrC,cAA+BE,OAAOE,QAAQoW,EAAQ3X,MAAtD,eAA6D,CAAC,IAAD,0BAAnDqJ,EAAmD,KAAzC5H,EAAyC,KAC3D,IAAKN,EAAUkI,GAEb,OAAO,MAAIsO,EAAX,CAAoBjU,WAAW,IAC1B,GAAIvC,EAAUkI,GAAU1H,MAAQF,EACrC,OAAOJ,OAAOC,OAAO,GAAIqW,EAAS,CAACjU,WAAW,IAGlD,OAAOrC,OAAOC,OAAO,GAAIqW,EAAS,CAACjU,WAAW,KC4BjCkU,I,MArCO,WACpB,IAAMC,EAAgB3B,aAAY,SAAA3R,GAAK,OAAIA,EAAMI,UAAU1H,QACrDkE,EAAY+U,aAAY,SAAA3R,GAAK,OAAIgT,GAAehT,EAAMI,UAAUxD,aAAY2W,KAC5E7T,EAAMiS,aAAY,SAAA3R,GAAK,OAAIA,EAAMI,UAAUwB,iBAC3C4R,EAAgBvM,EAAUqM,GAC1B1B,EAAWC,cAMb4B,EAAgB,KACpB,GAAID,EAAc1X,WAAY,CAC5B,IAAMqD,EAAYgU,GAAc,CAAC1X,KAAM+X,EAAczX,aAAca,GAAWuC,UAC9EsU,EACE,4BAAQ1B,QARe,W9BPtB,IAA0BxE,E8BQ7BqE,G9BR6BrE,E8BQH+F,E9BPrB,CAAE5a,KAAMX,EAAQM,mBAAoBM,QAAS,CAAEgI,UAAW4M,O8BcxBgB,UAAWpP,GAAhD,WAIJ,OACE,yBAAK2S,UAAU,kBACb,4BAAK0B,EAAcha,MAClBia,EACD,yBAAK3B,UAAU,iBACZhV,OAAO6B,KAAK/B,GAAW6F,KAAI,SAACiR,EAAMR,GAC/B,IAAMS,EAAejI,GAAoBgI,GAAMla,KAC/C,MAAa,SAATka,EACK,yBAAKR,IAAKQ,GAAOC,EAAjB,KAAiC/W,EAAU8W,GAAMtW,MAAMwW,QAAQ,GAA/D,MAAsElU,GAEtE,yBAAKwT,IAAKQ,GAAOC,EAAjB,KAAiC/W,EAAU8W,GAAMtW,MAAMwW,QAAQ,WCuBrEC,I,MAvDQ,WACrB,IAAMjY,EAAW+V,aAAY,SAAA3R,GAAK,OAAIA,EAAMpE,WAAU2X,KACpC5B,aAAY,SAAA3R,GAAK,OAAIA,EAAM6B,YAAW0R,KAmCxD,IAAMpS,EAAcvF,EAASA,SAAS6G,KAAI,SAACnB,GACzC,OACE,yBAAKwQ,UAAU,UAAUoB,IAAK5R,EAAQ9D,IACpC,6BAAM8D,EAAQ3D,QACd,6BAAM2D,EAAQ1D,SAASgW,QAAQ,IAE/B,6BAAME,KAAKC,UAAUzS,EAAQ3I,cAKnC,OACE,yBAAKmZ,UAAU,mBACZ3Q,KCRQ6S,I,MArCW,WACxB,IAAMpX,EAAY+U,aAAY,SAAA3R,GAAK,OAAIA,EAAMI,UAAUxD,aACjD6N,EAAekH,aAAY,SAAA3R,GAAK,OHQR,SAACiU,EAAmBrX,GAClD,OAAOE,OAAOE,QAAQiX,GAAmBhP,QAAO,SAACC,EAAD,GAAwC,IAAD,mBAAxBgP,EAAwB,KAAbd,EAAa,KAErF,OADAlO,EAAYgP,GAAaf,GAAcC,EAASxW,GACzCsI,IACN,IGZuCiP,CAAiBnB,GAAehT,EAAMyK,cAAe7N,KAAY2W,KACrG3B,EAAWC,cAEXuC,EAAmBtX,OAAOE,QAAQyN,GAAchI,KAAI,YAAiC,IAAD,mBAA9B/D,EAA8B,KAAlB+L,EAAkB,KAClFhM,EAAenF,EAAoBoF,GACnC2V,EAAkBvX,OAAO6B,KAAK8L,EAAahP,MAAMgH,KAAI,SAACxF,GAAD,OACzD,yBAAK6U,UAAU,0BAA0BoB,IAAKjW,GAAayO,GAAoBzO,GAAYzD,KAA3F,KAAmGiR,EAAahP,KAAKwB,OAGnHqX,EAAc,KASlB,OAPEA,EADE7V,EAAa9E,WAAaf,EAAkBG,MAChC,kBAAM6Y,G7BjBCzC,E6BiBmB1E,E7BhBrC,CAAE/R,KAAMX,EAAQoE,YAAaxD,QAAS,CAAEiI,YAAauO,MADvD,IAAoBA,G6BkBZ1Q,EAAa9E,WAAaf,EAAkBI,UACvC,kBAAM4Y,GhCrBKxR,EgCqBmBqK,EhCpBzC,CAAE/R,KAAMX,EAAQK,gBAAiBO,QAAS,CAAEiI,YAAaR,MAD3D,IAAwBA,GgCuBX,kBAAMwR,G/BvBQhR,E+BuBmB6J,E/BtB5C,CAAE/R,KAAMX,EAAQO,mBAAoBK,QAAS,CAAEiI,YAAaA,MAD9D,IAA2BA,G+B2B5B,yBAAKkR,UAAU,eAAeoB,IAAKxU,GACjC,yBAAKoT,UAAU,uBAAsB,4BAAKrT,EAAajF,OACvD,yBAAKsY,UAAU,eAAc,4BAAKrT,EAAa/E,cAC/C,uCAAa+Q,EAAarN,OAC1B,yBAAK0U,UAAU,kBAAkBuC,GACjC,4BAAQvC,UAAU,WAAWC,QAASuC,EAAa/F,UAAW9D,EAAatL,WAA3E,WAIN,OACE,yBAAK2S,UAAU,sBACZsC,K,oCCUQG,GA7CS,SAACC,GACvB,IAAM5C,EAAWC,cACXrT,EAAWgW,EAAMhW,SACjBC,EAAewI,EAAUzI,EAASE,YAcxC,OACE,kBAAC+V,GAAA,EAAD,CAAOC,KAAMF,EAAME,KAAMC,OAAQH,EAAMI,SACrC,kBAACH,GAAA,EAAMI,OAAP,CAAcC,aAAW,GACvB,kBAACL,GAAA,EAAMM,MAAP,KAActW,EAAajF,OAE7B,kBAACib,GAAA,EAAMO,KAAP,KACE,2BAAIvW,EAAa/E,aAEf+E,EAAa9E,WAAaf,EAAkBE,UAC1C,oCACE,6BAAM0F,EAASb,QACf,4CAAkBa,EAASX,YAC3B,yBAAKiU,UAAU,SAAf,UAA+BgC,KAAKC,UAAUvV,EAASR,QACvD,yBAAK8T,UAAU,UAAf,WAAiCgC,KAAKC,UAAUvV,EAASP,WAIjE,kBAACwW,GAAA,EAAMQ,OAAP,KAEIxW,EAAa9E,WAAaf,EAAkBE,UAC5C,4BAAQiZ,QAAS,kBA5BF,SAACvT,GAClBA,EAASQ,QACX4S,EAASrU,EAAgBiB,EAAShB,KAElCoU,EAASnU,EAAee,EAAShB,KAwBN0X,CAAe1W,KAAaA,EAASQ,QAAU,UAAY,UAEpF,4BAAQ+S,QAAS,WAjCrBH,EAASpZ,EAiCoCgG,MAAzC,cCUO2W,GAlDM,SAACX,GAAW,IAAD,EACQnC,oBAAS,GADjB,mBACvB+C,EADuB,KACVC,EADU,KAMxB7W,EAAWgW,EAAMhW,SAEnB8W,EAAiBrO,EAAUzI,EAASE,YAAYlF,KAChD+b,EAAc,KAClB,GAAItO,EAAUzI,EAASE,YAAY/E,WAAaf,EAAkBE,SAChEyc,EAAc,eAEd,OAAQ/W,EAASb,QACf,KAAK1E,EAAeI,SAClBkc,EAAc,WACdD,GAAkB,cAClB,MACF,KAAKrc,EAAeC,mBAClBqc,EAAc,WACdD,GAAkB,yBAClB,MACF,KAAKrc,EAAeG,YAClBmc,EAAc,cACdD,GAAkB,kBAClB,MACF,KAAKrc,EAAeE,QAClBoc,EAAc,UAOpB,OACE,oCACE,kBAAC,GAAD,CAAiBb,KAAMU,EAAaR,QAjCpB,kBAAMS,GAAe,IAiCqB7W,SAAUA,IACpE,kBAACgX,GAAA,EAAD,CACEC,UAAU,MACVC,MAAO,CAAEhB,KAAM,IAAKiB,KAAM,KAC1BC,QAAS,SAACpB,GAAD,OAAW,kBAACqB,GAAA,EAAYrB,EAAQc,KAEzC,yBAAKxD,UAAW,iBAAmByD,EAAaxD,QAtCnC,kBAAMsD,GAAe,KAuC/BpO,EAAUzI,EAASE,YAAYjF,iBCT3Bqc,I,MA9BO,WACpB,IAAMC,EAAgBpE,aAAY,SAAA3R,GAAK,OAAIA,EAAM6B,YAAW0R,KAEtD1R,GADWgQ,cACCkE,EAAc3Y,OAc1B4Y,EAAgBlZ,OAAO8H,OAAO/C,GAAWY,KAAI,SAACjE,GAAD,OACjD,kBAAC,GAAD,CAAcA,SAAUA,EAAU0U,IAAK1U,EAAShB,QAGlD,OACE,kBAACyY,GAAA,EAAD,KACE,yBAAKnE,UAAU,kBACZkE,MCNME,I,MAtBS,WACtB,IAAM9G,EAAkBuC,aAAY,SAAA3R,GAAK,OAAIgT,GAAehT,EAAM+G,cAAawM,KAEzE4C,EAAiBrZ,OAAO8H,OAAOwK,GAAiB3M,KAAI,SAACwD,GACvD,IAAMmQ,EAAUjP,GAAsBlB,EAAIzI,IAAIhE,KACxCgN,EAAYP,EAAIO,UAAYP,EAAIO,UAAUoN,UAAY,EACxD/M,EAAc,KAIlB,MAHe,WAAXZ,EAAIzI,KACNqJ,EAAc,KAAOZ,EAAIY,aAEpB,yBAAKiL,UAAU,aAAaoB,IAAKjN,EAAIzI,IACzC4Y,EADI,KACOnQ,EAAI7I,MADX,MACqB6I,EAAIM,cADzB,eACoDC,EADpD,IACgEP,EAAIS,YADpE,QACsFG,MAIjG,OACE,yBAAKiL,UAAU,oBACZqE,KCOQE,I,MAtBM,WACnB,IAAMzE,EAAWC,cAEXxJ,EAASsJ,aAAY,SAAC3R,GAAD,OAAWgT,GAAehT,EAAMsI,QAAQwC,SAAQyI,KACrExM,EAAa4K,aAAY,SAAC3R,GAAD,OAAWA,EAAM+G,aAAYwM,KACxD+C,EAAcxZ,OAAO6B,KAAK0J,GAAQ5F,KAAI,SAACoG,GACzC,IAAM0N,EAAmBxP,EAAWzN,EAAoBuP,GAASxN,oBAC3DoL,EAAa4B,EAAOQ,GAASxC,yBAA2B,GAAMkQ,EAAiB9P,UAC/E+P,EAAsB/P,EAAY4B,EAAOQ,GAASxC,yBAA2B,EACnF,OAAO,yBAAKyL,UAAU,UAAUoB,IAAKrK,GACnC,yBAAKiJ,UAAU,gBAAgBxY,EAAoBuP,GAASrP,KAA5D,KAAoE6O,EAAOQ,GAASzL,OACpF,6BAAK,4BAAQ2U,QAAS,WAAOH,ElCT5B,SAAqBhD,EAAW6H,GACrC,IAAMC,EAAapd,EAAoBmd,GACvC,MAAO,CAAE/d,KAAMX,EAAQqE,aAAczD,QAAS,CAAEiI,YAAa8V,EAAY9H,UAAWA,IkCO1C+H,CAAY9N,EAASvP,EAAoBuP,GAAStN,aAAcgT,UAAW9H,GAA5G,UAAuI+P,OAIhJ,OACE,yBAAK1E,UAAU,iBACZwE,KCOQM,GA5BE,WACf,IAAM5W,EAAQ2R,aAAY,SAAA3R,GAAK,OAAIA,KAC7B4R,EAAWC,cAkBjB,OACE,yBAAKC,UAAU,aACb,4BAAQC,QAlBM,WAChB,IAAMhC,EAAY8G,KAAK/C,KAAKC,UAAU/T,IACtC8W,UAAUC,UAAUC,UAAUjH,GAAWkH,MAAK,WAC5CC,MAAM,2BAeN,QACA,4BAAQnF,QAZM,WAChB,IxCFqBhC,EwCEfoH,EAAYrD,KAAKsD,MAAMC,KAAKpF,OAAO,qBACpCkF,EAGHvF,GxCNmB7B,EwCMDoH,ExCLf,CAAEze,KAAMX,EAAQG,UAAWS,QAAS,CAAEoX,UAAWA,MwCGpDmH,MAAM,wBASN,UC2BSI,I,MA9CI,WACjB,IAAMC,EAAc5F,aAAY,SAAA3R,GAAK,OAAIA,EAAM2P,SAAQ4D,KACjDnT,EAAYuR,aAAY,SAAA3R,GAAK,OAAIA,EAAMI,YAAWmT,KAClD3B,EAAWC,cAEjB,GAA6B,IAAzB0F,EAAYzL,SACd,OACE,yBAAKgG,UAAU,eACb,kDADF,WAEWyF,EAAYvL,YAAcuL,EAAYxL,OAAO6H,WAK5D,IAAMhX,EAAYoW,GAAe5S,EAAUxD,WACrC4a,EAAa5a,EAAUZ,KAAKoB,MAE5Bqa,EAAe3a,OAAOE,QAAQua,EAAYtL,OAAOxJ,KAAI,YAAwB,IAAD,mBAArB7D,EAAqB,KAAf8Y,EAAe,KAC1EC,EAAkB/a,EAAUgC,GAClC,IAAK+Y,EAEH,OAAO,KAET,IAAMC,EAAUJ,GAAcE,EAAU7K,WAAe6K,EAAU5K,KAAO,GAAO6K,EAAgBva,MAAQua,EAAgBjb,QAAUib,EAAgBlb,SAAW2D,EAAUwB,cAChKiW,EAAWH,EAAU5K,KAAOyK,EAAY7K,aAAiBiL,EAAgBva,MAAQ,EACvF,OAAO,yBAAK0U,UAAU,aAAaoB,IAAKtU,GACrCkZ,GAAUlZ,GAAMpF,KADZ,eAC8Bke,EAAU5K,KAC7C,4BAAQiF,QAAS,kBAAMH,GnC9BLmG,EmC8BsBnZ,EnC9BX1B,EmC8BiB,EnC9BTwQ,EmC8BYgK,EAAU7K,UnC7BxD,CAAEnU,KAAMX,EAAQsE,UAAW1D,QAAS,CAAEkL,QAASkU,EAAW7a,OAAQA,EAAQwQ,QAASA,MADrF,IAAiBqK,EAAW7a,EAAQwQ,GmC8BmCa,UAAWqJ,GAAnF,WAAoGF,EAAU7K,UAA9G,SACA,4BAAQkF,QAAS,kBAAMH,GnC3BJoG,EmC2BsBpZ,EnC3BV1B,EmC2BgB,EnC3BRwQ,EmC2BWgK,EAAU9K,SnC1BzD,CAAElU,KAAMX,EAAQuE,WAAY3D,QAAS,CAAEkL,QAASmU,EAAY9a,OAAQA,EAAQwQ,QAASA,MADvF,IAAkBsK,EAAY9a,EAAQwQ,GmC2BiCa,UAAWsJ,GAAnF,YAAsGH,EAAU9K,SAAhH,aAQJ,OACE,yBAAKkF,UAAU,eACb,4BAAK3G,GAAQoM,EAAYzL,UAAUtS,KAAnC,6BADF,WAEW+d,EAAYvL,YAAcuL,EAAYxL,OAAO6H,UACtD,4BAAQ7B,QARM,WnC3Bb,IAAuB5F,EmC4B1ByF,GnC5B0BzF,EmC4BHoL,EAAYpL,YnC3B9B,CAAEzT,KAAMX,EAAQwE,eAAgB5D,QAAS,CAAE8C,KAAM,CAAEO,KAAMmQ,SmCkC5D,eAAyCoL,EAAYpL,YAArD,SACCsL,KClCDQ,GAAU,KA+BDC,OA7Bf,WAAiB,IAAD,EACM7F,mBAAS,IAAIzB,IAGjC,SAAcuH,GACZvG,G1CZiBlO,E0CYKyU,EAAiBF,G1CXlC,CAAEvf,KAAMX,EAAQE,KAAMU,QAAS,CAAE+K,oBAAqBA,MADxD,IAAcA,I0CQ8B,MAA1C0U,EADO,oBAERxG,EAAWC,cAWjB,OALAwG,qBAAU,WACRzG,E1CnBK,CAAElZ,KAAMX,EAAQC,O0CoBrBogB,EAAUE,UACT,IAGD,yBAAKxG,UAAU,QACb,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QC9BcyG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACT,kBAAC,IAAD,CAAUC,MCNK,WAAqD,IAA7BC,EAA4B,uDAAfrI,GAQnD,OAPmBsI,aAAaC,QAAQ,UAErCF,EAAejF,KAAKsD,MAAMC,KAAKpF,OAAO,sBAEnC8G,IACHA,EAAerI,IAEXwI,YACLpJ,GACAiJ,EACAI,YAAgBC,MAAUZ,OAAOa,8BAAgCb,OAAOa,gCDL1DC,IACf,kBAAC,GAAD,OACWC,SAASC,eAAe,SDoH/B,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.c6d6a565.chunk.js","sourcesContent":["export const ACTIONS = {\n  INIT: 'INIT',\n  TICK: 'TICK',\n  LOAD_GAME: 'LOAD_GAME',\n  CHANGE_NAME: 'CHANGE_NAME'\n};\n\nexport function init() {\n  return { type: ACTIONS.INIT };\n}\n\nexport function tick(tickIntervalSeconds) {\n  return { type: ACTIONS.TICK, payload: { tickIntervalSeconds: tickIntervalSeconds }};\n}\n\nexport function loadGame(saveState) {\n  return { type: ACTIONS.LOAD_GAME, payload: { saveState: saveState }};\n}\n\nexport function changeName(name) {\n  return { type: ACTIONS.CHANGE_NAME, payload: { name: name }};\n}\n","import { ACTIONS as gameActions } from '../actions/game';\n\nexport default function(island={}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.CHANGE_NAME: {\n      return {...island, name: payload.name};\n    }\n    default:\n      return island;\n  }\n}\n","export const ACTIONS = {\n  BUILD_WAREHOUSE: 'BUILD_WAREHOUSE',\n  UPDGRADE_WAREHOUSE: 'UPGRADE_WAREHOUSE'\n};\n\nexport function buildWarehouse(warehouse) {\n  return { type: ACTIONS.BUILD_WAREHOUSE, payload: { toConstruct: warehouse }};\n}\n\nexport function upgradeWarehouse(currentWarehouse) {\n  return { type: ACTIONS.UPDGRADE_WAREHOUSE, payload: { toUpgrade: currentWarehouse }};\n}\n","export const ACTIONS = {\n  CONSTRUCT_BUILDING: 'CONSTRUCT_BUILDING',\n  DESTROY_BUILDING: 'DESTROY_BUILDING'\n};\n\nexport function constructBuilding(toConstruct) {\n  return { type: ACTIONS.CONSTRUCT_BUILDING, payload: { toConstruct: toConstruct } };\n};\n\nexport function destroyBuilding(toDestroy) {\n  return { type: ACTIONS.DESTROY_BUILDING, payload: { toDestroy: toDestroy }};\n};\n","export const BUILDING_CATEGORY = {\n  AMENITY: 'AMENITY',\n  PRODUCER: 'PRODUCER',\n  HOUSE: 'HOUSE',\n  WAREHOUSE: 'WAREHOUSE'\n}\n\nexport const buildingStatus = {\n  AWAITING_RESOURCES: 'AWAITING_RESOURCES',\n  WORKING: 'WORKING',\n  OUTBOX_FULL: 'OUTBOX_FULL',\n  DISABLED: 'DISABLED'\n}\n\nconst BuildingDefinitions = {\n  // Amenities\n  marketplace: {\n    name: 'Marketplace',\n    abbreviation: 'M',\n    description: 'Provides a place for villagers to meet',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      community: 2.5\n    },\n    upkeep: 10\n  },\n  chapel: {\n    name: 'Chapel',\n    abbreviation: 'Ch',\n    description: 'A basic building for villagers to worship',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      faith: 2\n    },\n    upkeep: 15\n  },\n\n  // Producers\n  fishinghut: {\n    name: 'Fisherman\\'s Hut',\n    abbreviation: 'F',\n    description: 'Gathers fish',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      fish: 1\n    },\n    produceTime: 30,\n    upkeep: 15,\n    disabledUpkeep: 5\n  },\n  lumberjackhut: {\n    name: 'Lumberjack\\'s Hut',\n    abbreviation: 'L',\n    description: 'Gathers wood',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      wood: 1\n    },\n    produceTime: 40,\n    upkeep: 5,\n    disabledUpkeep: 0\n  },\n  orchard: {\n    name: 'Orchard',\n    abbreviation: 'O',\n    description: 'Grows apples to be turned into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      apple: 1\n    },\n    produceTime: 100,\n    upkeep: 5,\n    disabledUpkeep: 0\n  },\n  ciderfarm: {\n    name: 'Cidery',\n    abbreviation: 'C',\n    description: 'Processes apples into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      apple: 1\n    },\n    produces: {\n      cider: 1\n    },\n    produceTime: 40,\n    upkeep: 15,\n    disabledUpkeep: 5\n  },\n  hempfarm: {\n    name: 'Hemp Plantation',\n    abbreviation: 'H',\n    description: 'Grows hemp',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hemp: 1\n    },\n    produceTime: 60,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  weavers: {\n    name: 'Weaver\\'s Hut',\n    abbreviation: 'W',\n    description: 'Uses hemp to create clothing',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hemp: 1\n    },\n    produces: {\n      linen: 1\n    },\n    produceTime: 30,\n    upkeep: 25,\n    disabledUpkeep: 12\n  },\n  quarry: {\n    name: 'Stone Quarry',\n    abbreviation: 'Q',\n    description: 'Gathers raw stone',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      stone: 1\n    },\n    produceTime: 30,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  stonemason: {\n    name: 'Stonemason',\n    abbreviation: 'Sm',\n    description: 'Turns raw stone into useable bricks',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      stone: 1\n    },\n    produces: {\n      stonebrick: 1\n    },\n    produceTime: 30,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n\n  // Houses\n  peasanthouse: {\n    name: 'Peasant Shack',\n    description: 'Basic home for villagers. Houses 8',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'peasant',\n    populationCap: 8,\n    ascendsTo: 'citizenhouse'\n  },\n  citizenhouse: {\n    name: 'Citizen House',\n    description: 'Home for citizens',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'citizen',\n    populationCap: 15,\n    ascendsTo: 'patricianhouse',\n    cost: {\n      wood: 1,\n      tool: 1\n    }\n  },\n\n  // Warehouses\n  smallwarehouse: {\n    name: 'Small Warehouse',\n    description: 'Basic warehouse for your island',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 3,\n    capacity: 40,\n    upgradesTo: 'mediumwarehouse',\n    upgradeCost: {\n      gold: 150,\n      wood: 2,\n      tool: 3,\n      stonebrick: 4\n    }\n  },\n  mediumwarehouse: {\n    name: 'Medium Warehouse',\n    description: 'Expanded warehouse',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 15,\n    couriers: 1,\n    capacity: 10\n  },\n  smallstockpile: {\n    name: 'Small Stockpile',\n    abbreviation: 'SS',\n    description: 'Small depot. Provides 1 courier',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 1,\n    capacity: 0\n  }\n};\n\nexport default BuildingDefinitions;\n","import BuildingDefinitions from '../data/building-definitions';\n\nexport const ACTIONS = {\n  BUILD_HOUSE: 'BUILD_HOUSE',\n  ASCEND_HOUSE: 'ASCEND_HOUSE'\n};\n\nexport function buildHouse(house) {\n  return { type: ACTIONS.BUILD_HOUSE, payload: { toConstruct: house } };\n}\n\nexport function ascendHouse(fromHouse, toHouse) {\n  const toBuilding = BuildingDefinitions[toHouse];\n  return { type: ACTIONS.ASCEND_HOUSE, payload: { toConstruct: toBuilding, fromHouse: fromHouse }};\n}\n","export const ACTIONS = {\n  BUY_GOODS: 'BUY_GOODS',\n  SELL_GOODS: 'SELL_GOODS',\n  DISMISS_TRADER: 'DISMISS_TRADER'\n};\n\nexport function buyGood(goodToBuy, amount, atPrice) {\n  return { type: ACTIONS.BUY_GOODS, payload: { product: goodToBuy, amount: amount, atPrice: atPrice }};\n};\n\nexport function sellGood(goodToSell, amount, atPrice) {\n  return { type: ACTIONS.SELL_GOODS, payload: { product: goodToSell, amount: amount, atPrice: atPrice }};\n};\n\nexport function dismissTrader(dismissCost) {\n  return { type: ACTIONS.DISMISS_TRADER, payload: { cost: { gold: dismissCost }}};\n}\n","import { ACTIONS } from '../actions/warehouse';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as tradeActions } from '../actions/trade';\nimport BuildingDefinitions from '../data/building-definitions';\n\nconst resourceDecorations = {\n  reserved: 0,\n  pending: 0\n}\n\nexport default function(warehouse = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case gameActions.INIT: {\n      // go through each resource and add the decorator, because I don't wanna copy and paste it a billion times\n      const warehouseCopy = Object.assign({}, warehouse);\n      const newResources = Object.entries(warehouseCopy.resources).reduce((accumulator, [resourceId, resource]) => {\n        const newResource = Object.assign({}, resource, resourceDecorations);\n        accumulator[resourceId] = newResource;\n        return accumulator;\n      }, {});\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case housingActions.BUILD_HOUSE:\n    case housingActions.ASCEND_HOUSE:\n    case constructionActions.CONSTRUCT_BUILDING: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case ACTIONS.BUILD_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      const warehouseToBuild = BuildingDefinitions[payload.toConstruct.id];\n\n      warehouseCopy.totalCapacity += warehouseToBuild.capacity;\n\n      return warehouseCopy;\n    }\n    case ACTIONS.UPDGRADE_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      const currentWarehouse = BuildingDefinitions[warehouse.type];\n      const nextWarehouse = BuildingDefinitions[currentWarehouse.upgradesTo];\n      if (!nextWarehouse) {\n        return warehouse;\n      }\n\n      const cost = currentWarehouse.upgradeCost;\n      const newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      warehouseCopy.totalCapacity += nextWarehouse.capacity;\n      warehouseCopy.type = BuildingDefinitions[warehouse.type].upgradesTo;\n\n      return warehouseCopy;\n    }\n    case tradeActions.DISMISS_TRADER: {\n      const cost = payload.cost;\n      const updatedResources = deductCost(warehouse.resources, cost);\n      return {...warehouse, resources: updatedResources};\n    }\n    case tradeActions.BUY_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned -= amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned += amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    case tradeActions.SELL_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned += amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned -= amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    default:\n      return warehouse;\n  }\n}\n\nfunction deductCost(resources, cost) {\n  let resourceCopy = Object.assign({}, resources);\n  for (let [ingredient, amount] of Object.entries(cost)) {\n    let ingredientCopy = Object.assign({}, resourceCopy[ingredient]);\n    ingredientCopy.owned -= amount;\n    resourceCopy[ingredient] = ingredientCopy;\n  }\n  return resourceCopy;\n}\n","import { ACTIONS } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\n\nexport default function(constructions = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case warehouseActions.BUILD_WAREHOUSE:\n    case housingActions.BUILD_HOUSE:\n    case ACTIONS.CONSTRUCT_BUILDING:\n      let toConstructId = payload.toConstruct.id;\n      let toConstruct = constructions[toConstructId];\n      let newOwned = Object.assign({}, toConstruct, {owned: toConstruct.owned+1});\n      return Object.assign({}, constructions, {[toConstructId]: newOwned});\n    case ACTIONS.DESTROY_BUILDING:\n      const toDestroyId = payload.toDestroy.buildingId;\n      const toDestroy = {...constructions[toDestroyId]};\n      toDestroy.owned--;\n      return {...constructions, [toDestroyId]: toDestroy};\n    default:\n      return constructions;\n  }\n}\n","export const ACTIONS = {\n  DISABLE_BUILDING: 'DISABLE_BUILDING',\n  ENABLE_BUILDING: 'ENABLE_BUILDING'\n}\n\nexport function disableBuilding(id) {\n  return { type: ACTIONS.DISABLE_BUILDING, payload: { id: id }};\n}\n\nexport function enableBuilding(id) {\n  return { type: ACTIONS.ENABLE_BUILDING, payload: { id: id }};\n}\n","import uuidv4 from 'uuid/v4';\nimport { ACTIONS } from '../actions/building';\nimport { ACTIONS as CONSTRUCTION_ACTIONS } from '../actions/construction';\nimport { ACTIONS as GAME_ACTIONS } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport BuildingDefinitions, { BUILDING_CATEGORY, buildingStatus } from '../data/building-definitions';\n\nconst initialProducerState = {\n  status: buildingStatus.AWAITING_RESOURCES,\n  progress: 0,\n  efficiency: 1,\n  efficiencyTimer: 0,\n  efficiencySupplied: false,\n  inbox: {},\n  outbox: {}\n}\n\nconst EFFICIENCY_FACTOR = 1 / 100.0;\nconst EFFICIENCY_TIMER = 2;\nconst EFFICIENCY_MINIMUM = 1;\nconst BASE_EFFICIENCY_MAXIMUM = 100;\nexport const BASE_IN_OUT_BOX_CAPACITY = 5;\n\nexport default function(buildings = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case GAME_ACTIONS.TICK: {\n      if (!buildings.owned) {\n        return buildings;\n      }\n      const newState = Object.assign({}, buildings);\n      const newOwned = Object.assign({}, newState.owned);\n      newState.owned = newOwned;\n\n      const timeIntervalS = payload.tickIntervalSeconds;\n      Object.values(buildings.owned).forEach((building) => {\n        const buildingInfo = BuildingDefinitions[building.buildingId];\n        let updatedBuilding = null;\n        if (buildingInfo.category === BUILDING_CATEGORY.PRODUCER) {\n          updatedBuilding = doProductionTick(building, timeIntervalS);\n        } else {\n          updatedBuilding = building;\n        }\n        newOwned[updatedBuilding.id] = updatedBuilding;\n      });\n      return newState;\n    }\n    case warehouseActions.BUILD_WAREHOUSE:\n    case CONSTRUCTION_ACTIONS.CONSTRUCT_BUILDING:\n      const buildingToBuild = BuildingDefinitions[payload.toConstruct.id];\n      let newBuilding = Object.assign({}, {id: uuidv4(), buildingId: payload.toConstruct.id, enabled: true});\n      if (buildingToBuild.category === BUILDING_CATEGORY.PRODUCER) {\n        newBuilding = Object.assign(newBuilding, initialProducerState);\n        initializeInOutBox(newBuilding);\n      }\n      const newBuildings = Object.assign({}, buildings.owned);\n      newBuildings[newBuilding.id] = newBuilding;\n      return Object.assign({}, buildings, {owned: newBuildings});\n    case CONSTRUCTION_ACTIONS.DESTROY_BUILDING:\n      const buildingToDestroy = payload.toDestroy;\n      const newOwned = {...buildings.owned};\n      delete newOwned[buildingToDestroy.id];\n      return {...buildings, owned: newOwned};\n    case ACTIONS.DISABLE_BUILDING: {\n      const toDisable = payload.id;\n      const disabled = {...buildings.owned[toDisable], enabled: false};\n      const owned = {...buildings.owned, [toDisable]: disabled};\n      return {...buildings, owned: owned};\n    }\n    case ACTIONS.ENABLE_BUILDING: {\n      const toEnable = payload.id;\n      const enabled = {...buildings.owned[toEnable], enabled: true};\n      const owned = {...buildings.owned, [toEnable]: enabled};\n      return {...buildings, owned: owned};\n    }\n    default:\n      return buildings;\n  }\n}\n\nfunction initializeInOutBox(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  building.inbox = {};\n  for (let ingredient of Object.keys(buildingInfo.consumes)) {\n    building.inbox[ingredient] = 0;\n  }\n\n  building.outbox = {};\n  for (let good of Object.keys(buildingInfo.produces)) {\n    building.outbox[good] = 0;\n  }\n}\n\nfunction doProductionTick(building, timeIntervalS) {\n  let buildingCopy = Object.assign({}, building);\n  const buildingInfo = BuildingDefinitions[buildingCopy.buildingId];\n\n  if (!building.enabled) {\n    buildingCopy.status = buildingStatus.DISABLED;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  if (!canAfford(buildingCopy)) {\n    buildingCopy.status = buildingStatus.AWAITING_RESOURCES;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  if (!outboxHasRoom(buildingCopy)) {\n    buildingCopy.status = buildingStatus.OUTBOX_FULL;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  buildingCopy.status = buildingStatus.WORKING;\n  if (!buildingCopy.efficiencySupplied) {\n    buildingCopy.efficiencySupplied = true;\n    buildingCopy.efficiencyTimer = 0;\n  }\n  buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n  buildingCopy.progress += timeIntervalS * buildingCopy.efficiency * EFFICIENCY_FACTOR;\n  if (buildingCopy.progress > buildingInfo.produceTime) {\n    buildingCopy.progress -= buildingInfo.produceTime;\n    let inboxCopy = Object.assign({}, buildingCopy.inbox);\n    let outboxCopy = Object.assign({}, buildingCopy.outbox);\n\n    for (let [ingredient, consumed] of Object.entries(buildingInfo.consumes)) {\n      inboxCopy[ingredient] -= consumed;\n    }\n\n    for (let [good, produced] of Object.entries(buildingInfo.produces)) {\n      outboxCopy[good] += produced;\n    }\n\n    buildingCopy.inbox = inboxCopy;\n    buildingCopy.outbox = outboxCopy;\n  }\n\n  return buildingCopy;\n}\n\nfunction canAfford(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  for (let [ingredient, consumed] of Object.entries(buildingInfo.consumes)) {\n    if (building.inbox[ingredient] < consumed) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction outboxHasRoom(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  for (let [good, produced] of Object.entries(buildingInfo.produces)) {\n    let outboxGood = building.outbox[good];\n    if (outboxGood + produced > BASE_IN_OUT_BOX_CAPACITY) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction progressEfficiency(building, timeIntervalS) {\n  building.efficiencyTimer += timeIntervalS;\n  if (building.efficiencyTimer > EFFICIENCY_TIMER) {\n    building.efficiencyTimer -= EFFICIENCY_TIMER;\n    if (building.efficiencySupplied) {\n      // efficiency going up\n      building.efficiency = Math.min(BASE_EFFICIENCY_MAXIMUM, building.efficiency + 1);\n    } else {\n      // efficiency going down\n      building.efficiency = Math.max(EFFICIENCY_MINIMUM, building.efficiency - 1);\n    }\n  }\n  return building;\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../data/building-definitions';\nimport { BASE_IN_OUT_BOX_CAPACITY } from './building';\n\nconst courierState = {\n  IDLE: 'IDLE',\n  PICKING_UP: 'PICKING_UP',\n  EN_ROUTE: 'EN_ROUTE',\n  DROPPING_OFF: 'DROPPING_OFF'\n}\n\nconst BASE_TRAVEL_TIME_SECONDS = 20;\nconst BASE_PICK_UP_DROP_OFF_TIME_SECONDS = 8;\n\nconst initCourier = {\n  status: courierState.IDLE,\n  progress: 0,\n  timeThreshold: 0,\n  jobDescription: {},\n  payload: {},\n  markedForDeath: false\n}\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  const couriers = state.couriers;\n  if (!couriers) {\n    return state;\n  }\n  switch(action.type) {\n    case gameActions.INIT:\n      const startingWarehouse = BuildingDefinitions[state.warehouse.type];\n      const courierArrayCopy = couriers.couriers.slice(0);\n      addCouriers(courierArrayCopy, startingWarehouse.couriers);\n      const courierObjCopy = Object.assign({}, couriers);\n      courierObjCopy.couriers = courierArrayCopy;\n      return Object.assign({}, state, {couriers: courierObjCopy});\n    case warehouseActions.UPDGRADE_WAREHOUSE:\n      // \"cheat\" and modify the payload a bit so we can reuse the code for the below case\n      const nextWarehouse = BuildingDefinitions[payload.toUpgrade].upgradesTo;\n      payload.toConstruct = {\n        id: nextWarehouse\n      };\n    case warehouseActions.BUILD_WAREHOUSE: {\n      const builtWarehouse = BuildingDefinitions[payload.toConstruct.id];\n      const addedCouriers = builtWarehouse.couriers;\n      const newState = Object.assign({}, state);\n      const newCouriers = Object.assign({}, newState.couriers);\n      newState.couriers = newCouriers;\n      const newArray = newCouriers.couriers.slice(0);\n      addCouriers(newArray, addedCouriers);\n      newCouriers.couriers = newArray;\n      return newState;\n    }\n    case constructionActions.DESTROY_BUILDING: {\n      const toDestroy = payload.toDestroy;\n      if (toDestroy.category !== BUILDING_CATEGORY.WAREHOUSE) {\n        return state;\n      }\n\n      const courierList = [...state.couriers.couriers];\n      const couriers = {...state.couriers, couriers: courierList};\n      const newState = {...state, couriers: couriers};\n\n      // try to find a courier that's idle\n      for (let courierIndex = 0; courierIndex < courierList.length; courierIndex++) {\n        const courier = courierList[courierIndex];\n        if (courier.status === courierState.IDLE && !courier.markmarkedForDeath) {\n          courierList.splice(courierIndex, 1);\n          return newState;\n        }\n      }\n\n      // if not, mark the last one for death that isn't already marked\n      for (let courierIndex = courierList.length-1; courierIndex >= 0; courierIndex--) {\n        const courier = courierList[courierIndex];\n        if (!courier.markmarkedForDeath) {\n          courier.markedForDeath = true;\n          return newState;\n        }\n      }\n\n      // no idle couriers, and all active ones are already marked for death so...uh...\n      return newState;\n    }\n    case gameActions.TICK: {\n      const stateCopy = Object.assign({}, state);\n      const couriersCopy = Object.assign({}, stateCopy.couriers);\n      const warehouse = Object.assign({}, stateCopy.warehouse);\n      const warehouseMax = warehouse.totalCapacity;\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const buildings = Object.assign({}, stateCopy.buildings);\n      const buildingRefCopy = Object.assign({}, buildings.owned);\n      buildings.owned = buildingRefCopy;\n      stateCopy.warehouse = warehouse;\n      stateCopy.buildings = buildings;\n      stateCopy.couriers = couriersCopy;\n\n      // add new jobs\n      const newJobs = findJobs(couriers, warehouse, buildingRefCopy);\n      let jobArrayCopy = couriers.jobQueue.slice(0).concat(newJobs.jobList);\n      const jobRefCopy = Object.assign({}, couriers.jobQueueMap, newJobs.jobRef);\n\n      // if any couriers are available, pick from the top of the queue\n      const courierListCopy = couriersCopy.couriers.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          const newCourier = Object.assign({}, courier);\n\n          let nextJobIndex = getNextAvailableJob(jobArrayCopy, buildingRefCopy);\n          const nextJob = jobArrayCopy[nextJobIndex];\n          jobArrayCopy = jobArrayCopy.slice(nextJobIndex+1);\n          if (!nextJob) {\n            return courier;\n          }\n\n          const pickupFromId = nextJob.from;\n          const deliverToId = nextJob.to;\n          const good = nextJob.carrying;\n          let pickupFrom = null;\n          let deliverTo = null;\n          let amount = 0;\n\n          if (pickupFromId !== 'warehouse') {\n            pickupFrom = buildings.owned[pickupFromId];\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (deliverToId !== 'warehouse') {\n            deliverTo = buildings.owned[deliverToId];\n          } else {\n            deliverTo = warehouse;\n          }\n\n          if (pickupFromId === 'warehouse') {\n            const inboxRoom = BASE_IN_OUT_BOX_CAPACITY - deliverTo.inbox[good];\n            const currentSupply = Math.floor(resources[good].owned - resources[good].reserved);\n            amount = Math.min(inboxRoom, currentSupply);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.reserved += amount;\n            resources[good] = resourceCopy;\n          } else {\n            const currentOutbox = pickupFrom.outbox[good];\n            const warehouseRoom = Math.floor(warehouseMax - resources[good].owned - resources[good].pending);\n            amount = Math.min(currentOutbox, warehouseRoom);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.pending += amount;\n            resources[good] = resourceCopy;\n          }\n\n          nextJob.amount = amount;\n\n          newCourier.status = courierState.PICKING_UP;\n          newCourier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n          newCourier.jobDescription = nextJob;\n\n          return newCourier;\n        } else {\n          return courier;\n        }\n      });\n\n      couriersCopy.jobQueue = jobArrayCopy;\n      couriersCopy.jobQueueMap = jobRefCopy;\n\n      // work the couriers already on the job (look into merging with the map function up above)\n      const progressedCouriers = courierListCopy.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          return courier;\n        }\n\n        courier.progress += payload.tickIntervalSeconds;\n        if (courier.progress >= courier.timeThreshold) {\n          courier.progress -= courier.timeThreshold;\n          const jobDescription = courier.jobDescription;\n          const fromId = jobDescription.from;\n          const toId = jobDescription.to;\n          const product = jobDescription.carrying;\n          const amount = jobDescription.amount;\n          let pickupFrom = null;\n          let deliverTo = null;\n\n          if (fromId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(fromId)) {\n              pickupFrom = Object.assign({}, buildingRefCopy[fromId]);\n              buildingRefCopy[fromId] = pickupFrom;\n            }\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (toId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(toId)) {\n              deliverTo = Object.assign({}, buildingRefCopy[toId]);\n              buildingRefCopy[toId] = deliverTo;\n            }\n          } else {\n            deliverTo = warehouse;\n          }\n\n          switch (courier.status) {\n            case courierState.PICKING_UP: {\n              const payload = Object.assign({}, courier.payload);\n              courier.payload = payload;\n\n              if (fromId === 'warehouse') {\n                const resourceToTake = Object.assign({}, resources[product]);\n                resources[product] = resourceToTake;\n                resourceToTake.owned -= amount;\n                resourceToTake.reserved -= amount;\n                payload[product] = amount;\n              } else {\n                if (!pickupFrom) { // building got deleted...\n                  courier.payload = {};\n                  courier.status = courierState.IDLE;\n                  courier.jobDescription = {};\n                  courier.progress = 0;\n                  courier.timeThreshold = 0;\n\n                  delete jobRefCopy[courier.jobDescription.id];\n                  break;\n                }\n                const outbox = Object.assign({}, pickupFrom.outbox);\n                pickupFrom.outbox = outbox;\n                outbox[product] -= amount;\n                payload[product] = amount;\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.status = courierState.EN_ROUTE;\n              courier.timeThreshold = BASE_TRAVEL_TIME_SECONDS;\n              break;\n            }\n            case courierState.EN_ROUTE:\n              courier.status = courierState.DROPPING_OFF;\n              courier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n              break;\n            case courierState.DROPPING_OFF: {\n              // drop off goods\n              const payload = Object.assign({}, courier.payload);\n\n              if (toId === 'warehouse') {\n                const resourceToDeliver = Object.assign({}, resources[product]);\n                resources[product] = resourceToDeliver;\n                resourceToDeliver.owned += payload[product];\n                resourceToDeliver.pending -= amount;\n              } else {\n                if (!deliverTo) { // building got deleted...\n                  // return to warehouse\n                  const resourceToDeliver = Object.assign({}, resources[product]);\n                  resources[product] = resourceToDeliver;\n                  resourceToDeliver.owned += payload[product];\n                } else {\n                  const inbox = Object.assign({}, deliverTo.inbox);\n                  deliverTo.inbox = inbox;\n                  inbox[product] += amount;\n                }\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.payload = {};\n              courier.status = courierState.IDLE;\n              courier.jobDescription = {};\n              courier.progress = 0;\n              courier.timeThreshold = 0;\n              break;\n            }\n            default:\n              break;\n          }\n        }\n        return courier;\n      });\n\n      // check for any idle couriers marked for death\n      const killedCouriers = courierListCopy.filter((courier) => courier.status !== courierState.IDLE || !courier.markedForDeath);\n\n      couriersCopy.couriers = killedCouriers;\n\n      stateCopy.couriers = couriersCopy;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n}\n\nfunction addCouriers(courierArray, numToAdd) {\n  for (let i=0; i<numToAdd; i++) {\n    const newCourier = Object.assign({}, initCourier, {id: uuidv4()});\n    courierArray.push(newCourier);\n  }\n}\n\nconst SUPPLY_SUFFIX = '_SUPPLY';\nconst PICKUP_SUFFIX = '_PICKUP';\nfunction findJobs(courier, warehouse, buildings) {\n  const existingJobs = courier.jobQueueMap;\n  const warehouseMax = warehouse.totalCapacity;\n  const resources = warehouse.resources;\n\n  // check buildings that need input fed\n  const supplies = {\n    jobList: [],\n    jobRef: {}\n  }\n  for (let building of Object.values(buildings)) {\n    const buildingInfo = BuildingDefinitions[building.buildingId];\n    if (buildingInfo.category !== BUILDING_CATEGORY.PRODUCER) {\n      continue;\n    }\n    for (let [ingredient, amount] of Object.entries(building.inbox)) {\n      const supplyKey = building.id + '_' + ingredient + '_' + SUPPLY_SUFFIX;\n      if (amount < BASE_IN_OUT_BOX_CAPACITY && !existingJobs[supplyKey]) {\n        const resource = resources[ingredient];\n        const supplyRemaining = Math.floor(resource.owned - resource.reserved);\n        if (supplyRemaining > 0) {\n          const newJob = {\n            id: supplyKey,\n            from: 'warehouse',\n            to: building.id,\n            carrying: ingredient\n          };\n          supplies.jobList.push(newJob);\n          supplies.jobRef[supplyKey] = newJob;\n        }\n      }\n    }\n  }\n\n  // check buildings that need outbox picked up\n  const pickups = Object.values(buildings).reduce((accumulator, building) => {\n    const buildingInfo = BuildingDefinitions[building.buildingId];\n    if (buildingInfo.category !== BUILDING_CATEGORY.PRODUCER) {\n      return accumulator;\n    }\n    for (let [product, amount] of Object.entries(building.outbox)) {\n      const pickupKey = building.id + PICKUP_SUFFIX;\n      if (amount > 0 && !existingJobs[pickupKey]) {\n        const resource = resources[product];\n        const spaceRemaining = Math.floor(warehouseMax - resource.owned - resource.pending);\n        if (spaceRemaining > 0) {\n          const newJob = {\n            id: pickupKey,\n            from: building.id,\n            to: 'warehouse',\n            carrying: product\n          };\n          accumulator.jobList.push(newJob);\n          accumulator.jobRef[pickupKey] = newJob;\n        }\n      }\n    }\n    return accumulator;\n  }, {jobList: [], jobRef: {}});\n\n  const jobList = supplies.jobList.concat(pickups.jobList);\n  const jobRefs = Object.assign({}, supplies.jobRef, pickups.jobRef);\n  return {jobList: jobList, jobRef: jobRefs}; // TODO, this will need to be changed to include supply jobs\n}\n\n// The way a job is invalid is if one of the buildings has since been destroyed\nfunction getNextAvailableJob(jobArray, buildings) {\n  for (let jobIndex = 0; jobIndex < jobArray.length; jobIndex++) {\n    const nextJob = jobArray[jobIndex];\n\n    const pickupFromId = nextJob.from;\n    const deliverToId = nextJob.to;\n\n    if (pickupFromId !== 'warehouse' && !buildings.hasOwnProperty(pickupFromId)) {\n      continue;\n    }\n\n    if (deliverToId !== 'warehouse' && !buildings.hasOwnProperty(deliverToId)) {\n      continue;\n    }\n\n    return jobIndex;\n  }\n}\n","import { ACTIONS } from '../actions/housing';\nimport BuildingDefinitions from '../data/building-definitions';\n\nconst initHouseState = {\n  popProgress: 0,\n  currentPop: 1\n};\n\nconst ascensionFactors = {\n  peasanthouse: .8,\n  citizenhouse: .6\n}\n\n// precomputed list of current house and up because I'm lazy\nconst rightsLists = {\n  peasanthouse: ['peasanthouse', 'citizenhouse'],\n  citizenhouse: ['citizenhouse'],\n  patricianhouse: []\n}\n\nexport default function(housing = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUILD_HOUSE: {\n      const newState = Object.assign({}, housing);\n      const types = Object.assign({}, newState.types);\n      const abodes = newState.abodes.slice(0);\n      newState.types = types;\n      newState.abodes = abodes;\n\n      const toBuild = payload.toConstruct.id; // should really just be peasanthouse\n      const type = Object.assign({}, types[toBuild]);\n      types[toBuild] = type;\n      const houseData = BuildingDefinitions[toBuild];\n      const abode = {...initHouseState, houseId: toBuild, populationCap: houseData.populationCap};\n\n      type.owned += 1;\n      abodes.push(abode);\n\n      calculateAscensionRights(types, type, toBuild);\n\n      return newState;\n    }\n    case ACTIONS.ASCEND_HOUSE: {\n      const fromHouseId = payload.fromHouse;\n      const toHouseId = BuildingDefinitions[fromHouseId].ascendsTo;\n\n      const fromType = {...housing.types[fromHouseId]};\n      const toType = {...housing.types[toHouseId]};\n      const types = {...housing.types, [fromHouseId]: fromType, [toHouseId]: toType};\n      const abodes = [...housing.abodes];\n      const newState = {...housing, types: types, abodes: abodes};\n      const nextHouse = BuildingDefinitions[toHouseId];\n\n      // find the first house that's able to be ascended\n      const ascendIndex = abodes.findIndex((house) => house.houseId === fromHouseId);\n      abodes.splice(ascendIndex, 1);\n      abodes.push({...nextHouse, ...initHouseState, houseId: toHouseId});\n      fromType.owned -= 1;\n      toType.owned += 1;\n\n      calculateAscensionRights(types, fromType, fromHouseId);\n      calculateAscensionRights(types, toType, toHouseId);\n\n      return newState;\n    }\n    default:\n      return housing;\n  }\n};\n\nfunction calculateAscensionRights(allTypes, type, toCheck) {\n  const totalHouses = rightsLists[toCheck].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.totalAscensionRights = Math.floor(ascensionFactors[toCheck] * totalHouses);\n  const ascendTo = BuildingDefinitions[toCheck].ascendsTo;\n  const alreadyAscended = rightsLists[ascendTo].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.remainingAscensionRights = type.totalAscensionRights - alreadyAscended;\n}\n","import { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport BuildingDefinitions from '../data/building-definitions';\n\nconst POP_ASCENSION_HAPPINESS_THRESHOLD = 97;\n\nconst initValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  canAscend: false,\n  consumeInfo: ''\n}\n\nconst beggarValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  unhoused: 0,\n  beggarTimer: 0\n}\n\nexport default function(populationState = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.INIT: {\n      const newState = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(newState)) {\n        if (popType === 'beggar') {\n          newState[popType] = {...beggarValues, ...pop};\n        } else {\n          const newPop = Object.assign({}, pop, initValues);\n          newState[popType] = newPop;\n        }\n      }\n\n      return newState;\n    }\n    case housingActions.BUILD_HOUSE: {\n      const houseBuilt = BuildingDefinitions[payload.toConstruct.id];\n      const newState = Object.assign({}, populationState);\n\n      const modifiedPop = Object.assign({}, newState[houseBuilt.populationCategory]);\n      newState[modifiedPop.id] = modifiedPop;\n\n      modifiedPop.maxPopulation += houseBuilt.populationCap;\n\n      return newState;\n    }\n    case gameActions.TICK: {\n      const population = Object.assign({}, populationState);\n      const timeIntervalS = payload.tickIntervalSeconds;\n\n      for (let [popType, pop] of Object.entries(population)) {\n        if (pop.happiness > POP_ASCENSION_HAPPINESS_THRESHOLD && pop.owned === pop.maxPopulation) {\n          population[popType] = { ...pop, canAscend: true };\n        } else {\n          population[popType] = { ...pop, canAscend: false}\n        }\n      }\n\n      return population;\n    }\n    case housingActions.ASCEND_HOUSE: {\n      const currentHouse = BuildingDefinitions[payload.fromHouse];\n      const nextHouse = BuildingDefinitions[currentHouse.ascendsTo];\n\n      const oldPop = {...populationState[currentHouse.populationCategory]};\n      const nextPop = {...populationState[nextHouse.populationCategory]};\n\n      oldPop.owned -= currentHouse.populationCap;\n      nextPop.owned += currentHouse.populationCap;\n      oldPop.maxPopulation -= currentHouse.populationCap;\n      nextPop.maxPopulation += nextHouse.populationCap;\n\n      const newState = {...populationState, [currentHouse.populationCategory]: oldPop, [nextHouse.populationCategory]: nextPop};\n\n      // adjust max beggar population\n      const maxBeggars = calculateBeggarCount(newState);\n      newState['beggar'] = {...newState['beggar'], maxPopulation: maxBeggars};\n\n      return newState;\n    }\n    default:\n      return populationState;\n  }\n};\n\nfunction calculateBeggarCount(population) {\n  return Math.floor(population['citizen'].maxPopulation * 0.1 +\n                    population['patrician'].maxPopulation * 0.2 +\n                    population['noble'].maxPopulation * 0.3);\n}\n","// this could probably be done with thunk instead\nimport { ACTIONS } from '../actions/game';\nimport Buildings, { BUILDING_CATEGORY } from '../data/building-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const buildings = state.buildings;\n\n      const amenities = {};\n      for (let building of Object.values(buildings.owned)) {\n        const buildingInfo = Buildings[building.buildingId];\n        if (buildingInfo.category !== BUILDING_CATEGORY.AMENITY) {\n          continue;\n        }\n\n        for (let [amenity, amount] of Object.entries(buildingInfo.produces)) {\n          if (!amenities[amenity]) {\n            amenities[amenity] = 0;\n          }\n\n          amenities[amenity] += amount * timeIntervalS * TIME_FACTOR;\n        }\n      }\n\n      newState.amenities = amenities;\n      return newState;\n    default:\n      return state;\n  }\n}\n","const PopulationDefinitions = {\n  beggar: {\n    name: 'Beggar',\n    taxRate: 0,\n    consumes: {\n      fish: {\n        quantity: .7,\n        weight: 0\n      },\n      cider: {\n        quantity: .3,\n        weight: 0\n      }\n    }\n  },\n  peasant: {\n    name: 'Peasant',\n    taxRate: 0.8,\n    consumes: {\n      community: {\n        quantity: 1,\n        weight: 25\n      },\n      fish: {\n        quantity: 1,\n        weight: 25\n      },\n      cider: {\n        quantity: 0.44,\n        weight: 25\n      },\n      faith: {\n        quantity: 1,\n        weight: 25\n      }\n    }\n  },\n  citizen: {\n    name: 'Citizen',\n    taxRate: 0.95,\n    consumes: {\n      fish: {\n        quantity: .4,\n        weight: 8\n      },\n      spice: {\n        quantity: .4,\n        weight: 12\n      },\n      cider: {\n        quantity: .44,\n        weight: 20\n      },\n      linen: {\n        quantity: 0.42,\n        weight: 20\n      },\n      community: {\n        quantity: 1,\n        weight: 20\n      },\n      faith: {\n        quantity: 1,\n        weight: 20\n      }\n    }\n  },\n  patrician: {\n    name: 'Patrician',\n    taxRate: 1.05,\n    consumes: {}\n  },\n  noble: {\n    name: 'Noble',\n    taxRate: 1.15,\n    consumes: {}\n  }\n};\n\nexport default PopulationDefinitions;\n","import { ACTIONS } from '../actions/game';\nimport PopulationDefinitions from '../data/population-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\nconst CONSUME_FACTOR = 1 / 100.0;\nconst MIN_HAPPINESS_DELTA = 0.001;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const amenities = newState.amenities;\n      const population = Object.assign({}, newState.population);\n      newState.warehouse = warehouse;\n      newState.population = population;\n\n      for (const [popType, popOriginal] of Object.entries(state.population)) {\n        const pop = Object.assign({}, popOriginal);\n        pop.consumeInfo = null;\n        let currentHappiness = 0;\n        if (popOriginal.owned !== 0) {\n          for (const [product, consumeInfo] of Object.entries(PopulationDefinitions[popType].consumes)) {\n            const consumed = consumeInfo.quantity * pop.owned * timeIntervalS * TIME_FACTOR * CONSUME_FACTOR;\n            let pctSatisfied = 1;\n\n            if (amenities[product]) {\n              if (amenities[product] < consumed) {\n                pctSatisfied = amenities[product] / consumed;\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              amenities[product] -= consumed;\n              if (amenities[product] < 0) {\n                amenities[product] = 0;\n              }\n            } else if (resources[product]) {\n              const resource = Object.assign({}, resources[product]);\n              resources[product] = resource;\n\n              if (resource.owned < consumed) {\n                pctSatisfied = resource.owned / consumed\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              resource.owned -= consumed;\n              if (resource.owned < 0) {\n                resource.owned = 0;\n              }\n            } else {\n              pctSatisfied = 0;\n              if (!pop.consumeInfo) {\n                pop.consumeInfo = 'Need ' + product;\n              }\n            }\n\n            currentHappiness += consumeInfo.weight * pctSatisfied;\n          }\n        }\n\n        let happinessDiff = (currentHappiness - pop.happiness) / 100.0;\n        if (Math.abs(happinessDiff) < MIN_HAPPINESS_DELTA) {\n          happinessDiff = MIN_HAPPINESS_DELTA;\n        }\n        pop.happiness += happinessDiff;\n        population[popType] = pop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import rn from 'random-number';\n\nimport { ACTIONS } from '../actions/game';\nimport Buildings from '../data/building-definitions';\n\nconst POP_GROWTH_TIME_SECONDS = 10;\nconst POP_GROWTH_THRESHOLD = 40;\nconst POP_DECLINE_THRESHOLD = 20;\nconst BEGGAR_ARRIVAL_TIMER = 1200; // 20 minutes\nconst BEGGAR_ARRIVAL_MIN = 20;\nconst BEGGAR_ARRIVAL_MAX = 200;\n\nexport default function(state = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const houses = Object.assign({}, newState.housing);\n      const population = Object.assign({}, newState.population);\n      newState.housing = houses;\n      newState.population = population;\n\n      const populationCounts = {};\n      // go house by house, increment growth timer\n      const newAbodes = houses.abodes.map((abodeOriginal) => {\n        const abode = Object.assign({}, abodeOriginal);\n        const curHappiness = population[Buildings[abode.houseId].populationCategory].happiness;\n        let growthFactor = 0;\n\n        if (curHappiness >= POP_GROWTH_THRESHOLD && abode.currentPop < abode.populationCap) {\n          growthFactor = 1;\n        }\n        if (curHappiness <= POP_DECLINE_THRESHOLD && abode.currentPop > 0) {\n          growthFactor = -1;\n        }\n\n        abode.popProgress += timeIntervalS * growthFactor;\n        if (abode.popProgress > POP_GROWTH_TIME_SECONDS || abode.popProgress < -POP_GROWTH_TIME_SECONDS) {\n          abode.popProgress -= POP_GROWTH_TIME_SECONDS * growthFactor;\n          abode.currentPop += growthFactor;\n        }\n\n        if (abode.currentPop < 1) {\n          abode.currentPop = 1;\n        }\n\n        const popCategory = Buildings[abode.houseId].populationCategory;\n        if (!populationCounts[popCategory]) {\n          populationCounts[popCategory] = 0;\n        }\n\n        populationCounts[popCategory] += abode.currentPop;\n\n        return abode;\n      });\n      houses.abodes = newAbodes;\n\n      for (let [popType, popCount] of Object.entries(populationCounts)) {\n        const newPop = Object.assign({}, population[popType]);\n        newPop.owned = popCount;\n        population[popType] = newPop;\n      }\n\n      // Increment beggar timer\n      const beggar = {...population['beggar']};\n      if (beggar.owned < beggar.maxPopulation) {\n        beggar.beggarTimer += timeIntervalS;\n        if (beggar.beggarTimer > BEGGAR_ARRIVAL_TIMER) {\n          beggar.beggarTimer -= BEGGAR_ARRIVAL_TIMER;\n          const incomingBeggars = getIncomingBeggars(beggar.maxPopulation - beggar.owned);\n          beggar.owned += incomingBeggars;\n        }\n      }\n      population['beggar'] = beggar;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n\nfunction getIncomingBeggars(beggarDeficit) {\n  const lowerBound = Math.max(beggarDeficit, BEGGAR_ARRIVAL_MIN);\n  const upperBound = Math.min(lowerBound, BEGGAR_ARRIVAL_MAX);\n\n  return rn({min: lowerBound, max: upperBound, integer: true});\n}\n","import { ACTIONS } from '../actions/game';\nimport BuildingDefinitions from '../data/building-definitions';\nimport PopulationDefinitions from '../data/population-definitions';\n\nconst TIME_FACTOR = 1/60.0;\nconst TAX_HAPPINESS_FACTOR = 1 / 100.0;\nconst TAX_HAPPINESS_MINIMUM = 0.01;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      const gold = Object.assign({}, resources.gold);\n      newState.warehouse = warehouse;\n      warehouse.resources = resources;\n      resources.gold = gold;\n\n      const financeInfo = {\n        maintenanceCost: 0,\n        taxRevenue: 0\n      }\n\n      // start with Warehouse maintenance\n      const warehouseMaintenance = BuildingDefinitions[warehouse.type].upkeep * timeIntervalS * TIME_FACTOR;\n      const totalMaintenance = Object.values(state.buildings.owned).reduce((sum, building) => {\n        let upkeep = building.enabled ?\n          BuildingDefinitions[building.buildingId].upkeep :\n          BuildingDefinitions[building.buildingId].disabledUpkeep;\n        return sum + (upkeep * timeIntervalS * TIME_FACTOR);\n      }, warehouseMaintenance);\n\n      const totalTaxes = Object.values(state.population).reduce((sum, population) => {\n        let happinessFactor = population.happiness * TAX_HAPPINESS_FACTOR;\n        if (happinessFactor < TAX_HAPPINESS_MINIMUM) {\n          happinessFactor = TAX_HAPPINESS_MINIMUM;\n        }\n        return sum + (PopulationDefinitions[population.id].taxRate * population.owned * timeIntervalS * TIME_FACTOR * happinessFactor);\n      }, 0);\n\n      financeInfo.maintenanceCost = totalMaintenance;\n      financeInfo.taxRevenue = totalTaxes;\n      newState.financeInfo = financeInfo;\n\n      gold.owned = gold.owned + totalTaxes - totalMaintenance;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","export const unlockThresholds = [\n  ['peasant', 60],\n  ['peasant', 90],\n  ['citizen', 1],\n  ['citizen', 355],\n  ['patrician', 510],\n  ['patrician', 1190],\n  ['nobleman', 950],\n  ['nobleman', 2200],\n  ['nobleman', 3500],\n  ['nobleman', 7500]\n];\n\nexport const unlocks = [\n  // initial state\n  {\n    title: 'Small Settlement',\n    buildings: ['marketplace', 'fishinghut', 'lumberjackhut'],\n    population: 'peasant',\n    resources: ['gold', 'wood', 'tool', 'fish']\n  },\n  // 60 peasants\n  {\n    buildings: ['orchard', 'ciderfarm'],\n    resources: ['apple', 'cider']\n  },\n  // 90 peasants\n  {\n    title: 'Settlement',\n    buildings: ['chapel']\n  },\n  // 1 citizen\n  {\n    population: 'citizen',\n    resources: ['hemp', 'linen', 'stone', 'stonebrick', 'spice'],\n    buildings: ['hempfarm', 'weavers', 'quarry', 'stonemason'],\n    housing: ['citizenhouse']\n  }\n];\n","import { ACTIONS } from '../actions/game';\nimport { unlockThresholds, unlocks } from '../data/level-up-definitions'\n\nexport default function(state = {}, action) {\n  switch (action.type) {\n    case ACTIONS.TICK: {\n      const [unlockPopType, popRequired] = unlockThresholds[state.island.level - 1];\n      const currentPop = state.population[unlockPopType].owned;\n      if (currentPop >= popRequired) {\n        const newState = Object.assign({}, state);\n        const island = Object.assign({}, newState.island);\n        newState.island = island;\n        island.level++;\n\n        const unlocked = unlocks[island.level - 1];\n        if (unlocked.title) {\n          island.title = unlocked.title;\n        }\n        if (unlocked.buildings) {\n          const constructions = Object.assign({}, newState.construction);\n          newState.construction = constructions;\n          unlocked.buildings.forEach(conId => {\n            const construction = Object.assign({}, constructions[conId]);\n            construction.unlocked = true;\n            constructions[conId] = construction;\n          });\n        }\n        if (unlocked.resources) {\n          const warehouse = Object.assign({}, newState.warehouse);\n          const resources = Object.assign({}, warehouse.resources);\n          newState.warehouse = warehouse;\n          warehouse.resources = resources;\n          unlocked.resources.forEach(resId => {\n            const resource = Object.assign({}, resources[resId]);\n            resources[resId] = resource;\n            resource.unlocked = true;\n          });\n        }\n        if (unlocked.population) {\n          const population = Object.assign({}, newState.population);\n          newState.population = population;\n          const popUnlocked = Object.assign({}, population[unlocked.population]);\n          popUnlocked.unlocked = true;\n          population[unlocked.population] = popUnlocked;\n        }\n        if (unlocked.housing) {\n          const types = {...newState.housing.types}\n          const housing = {...newState.housing, types: types};\n          newState.housing = housing;\n          unlocked.housing.forEach(houseId => {\n            const unlockedHouse = {...types[houseId], unlocked: true};\n            types[houseId] = unlockedHouse;\n          });\n        }\n\n        return newState;\n      }\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","export const ACTIONS = {\n  SET_TIME_FACTOR: 'SET_TIME_FACTOR'\n}\n\nexport function setTimeFactor(timeFactor) {\n  return { type: ACTIONS.SET_TIME_FACTOR, payload: { timeFactor: timeFactor }};\n}\n","import { ACTIONS } from '../actions/cheats';\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.SET_TIME_FACTOR:\n      return {\n        ...state,\n        cheat: {\n          timeFactor: payload.timeFactor\n        }\n      }\n    default:\n      return state;\n  }\n}\n","const Traders = {\n  lord: {\n    name: 'Lord Farquaad',\n    rates: {\n      wood: {\n        buy: .5,\n        sell: 1.2\n      },\n      tool: {\n        buy: .5,\n        sell: 1.2\n      },\n      stonebrick: {\n        buy: .5,\n        sell: 1.2\n      },\n      spice: {\n        buy: 1,\n        sell: 0\n      }\n    },\n    baseCapacity: 30\n  },\n  prince: {\n    name: 'Prince Ali',\n    rates: {\n      wood: {\n        buy: 1,\n        sell: 1\n      },\n      tool: {\n        buy: 1,\n        sell: 1.2\n      },\n      spice: {\n        buy: 0,\n        sell: 1.25\n      }\n    },\n    baseCapacity: 40\n  }\n};\n\nexport default Traders;\n","const ResourceDefinitions = {\n  gold: {\n    name: 'Gold',\n    baseTradePrice: 1\n  },\n  tool: {\n    name: 'Tool',\n    baseTradePrice: 15\n  },\n  fish: {\n    name: 'Fish',\n    baseTradePrice: 3\n  },\n  wood: {\n    name: 'Wood',\n    baseTradePrice: 1\n  },\n  apple: {\n    name: 'Apple',\n    baseTradePrice: 0.2\n  },\n  cider: {\n    name: 'Cider',\n    baseTradePrice: 3\n  },\n  hemp: {\n    name: 'Hemp',\n    baseTradePrice: 4\n  },\n  linen: {\n    name: 'Clothing',\n    baseTradePrice: 27\n  },\n  stone: {\n    name: 'Stone',\n    baseTradePrice: 6\n  },\n  stonebrick: {\n    name: 'Stone Brick',\n    baseTradePrice: 8\n  },\n  spice: {\n    name: 'Spice',\n    baseTradePrice: 6\n  },\n};\n\nexport default ResourceDefinitions;\n","import { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS } from '../actions/trade';\nimport Traders from '../data/trader-info';\nimport ResourceDefinitions from '../data/resource-definitions';\n\nconst BASE_TRADER_STAY_TIME_SECONDS = 360;\nconst BASE_TRADER_VACANCY_TIME_SECONDS = 180;\nconst BASE_DISMISS_COST = 100;\n\nconst INIT_STATE = {\n  traderId: 0,\n  timer: 0,\n  timeToLeave: BASE_TRADER_STAY_TIME_SECONDS,\n  wares: {},\n  newGame: true,\n  dismissCost: BASE_DISMISS_COST\n};\n\nexport default function(trader=INIT_STATE, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUY_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held -= amount;\n\n      return newState;\n    }\n    case ACTIONS.SELL_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held += amount;\n\n      return newState;\n    }\n    case gameActions.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = {...trader};\n      newState.timer += timeIntervalS;\n      if (newState.timer > newState.timeToLeave) {\n        newState.timer -= newState.timeToLeave;\n        return newTrader(newState);\n      }\n      return newState;\n    case ACTIONS.DISMISS_TRADER: {\n      const newState = {...trader};\n      newState.traderId = 0;\n      newState.wares = {};\n      newState.time = 0;\n      newState.timeToLeave = BASE_TRADER_VACANCY_TIME_SECONDS;\n      return newState;\n    }\n    default:\n      return trader;\n  }\n};\n\nfunction newTrader(currentState) { // atm, more like \"restock goods\"\n  const traders = Object.keys(Traders);\n  let selectedTrader = traders[Math.floor(Math.random() * traders.length)];\n  if (currentState.newGame) {\n    currentState.newGame = false;\n    selectedTrader = 'lord';\n  }\n  const traderInfo = Traders[selectedTrader];\n  const wares = {};\n  const maxCapacity = traderInfo.baseCapacity;\n  const timeToLeave = BASE_TRADER_STAY_TIME_SECONDS;\n  const newState = {\n    ...currentState,\n    traderId: selectedTrader,\n    wares: wares,\n    maxCapacity: maxCapacity,\n    timeToLeave: timeToLeave\n  };\n\n  for (let [good, rates] of Object.entries(traderInfo.rates)) {\n    const goodBasePrice = ResourceDefinitions[good].baseTradePrice;\n    const buyPrice = rates.buy * goodBasePrice;\n    const sellPrice = rates.sell * goodBasePrice;\n\n    wares[good] = {\n      buyPrice: buyPrice,\n      sellPrice: sellPrice,\n      held: 0\n    }\n    if (sellPrice > 0) {\n      wares[good].held = Math.floor(maxCapacity * 0.75);\n    }\n  }\n\n  return newState;\n}\n","import { ACTIONS } from '../actions/game';\nimport { combineReducers } from 'redux';\nimport island from './island';\nimport warehouse from './warehouse';\nimport construction from './construction';\nimport buildings from './building';\nimport couriers from './couriers';\nimport housing from './housing';\nimport population from './population';\nimport amenity from './amenities';\nimport consume from './consume';\nimport growth from './growth';\nimport finance from './finance';\nimport levelUp from './level-up';\nimport cheat from './cheat';\nimport trader from './trader';\n\nconst combinedReducer = combineReducers({\n  cheat: (state = {}) => { return state },\n  island: island,\n  warehouse: warehouse,\n  construction: construction,\n  buildings: buildings,\n  couriers: (state = {}) => { return state }, // no op\n  housing: housing,\n  population: population,\n  trader: trader\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === ACTIONS.LOAD_GAME) {\n    return action.payload.saveState;\n  }\n  if (action.type === ACTIONS.TICK) {\n    let timeFactor = state.cheat.timeFactor;\n    if (!timeFactor) {\n      timeFactor = 1;\n    }\n    action.payload.tickIntervalSeconds *= timeFactor;\n  }\n  const cheatState = cheat(state, action);\n  const intermediateState = combinedReducer(cheatState, action);\n  const courierState = couriers(intermediateState, action);\n  if (action.type === ACTIONS.TICK) {\n    const amenityState = amenity(courierState, action);\n    const consumptionState = consume(amenityState, action);\n    const growthState = growth(consumptionState, action);\n    const financeState = finance(growthState, action);\n    const levelUpState = levelUp(financeState, action);\n    return levelUpState;\n  } else {\n    return courierState;\n  }\n}\n\nexport default rootReducer;\n","const INITIAL_STATE = {\n  island: {\n    level: 1,\n    title: 'Small Settlement',\n    name: 'New Island'\n  },\n  construction: {\n    peasanthouse: {\n      id: 'peasanthouse',\n      owned: 0,\n      cost: {\n        wood: 2\n      },\n      unlocked: true\n    },\n    marketplace: {\n      id: 'marketplace',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      },\n      unlocked: true\n    },\n    fishinghut: {\n      id: 'fishinghut',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 3,\n        tool: 2\n      },\n      unlocked: true\n    },\n    lumberjackhut: {\n      id: 'lumberjackhut',\n      owned: 0,\n      cost: {\n        gold: 50,\n        tool: 2\n      },\n      unlocked: true\n    },\n    smallstockpile: {\n      id: 'smallstockpile',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 2,\n        tool: 3\n      },\n      unlocked: true\n    },\n    orchard: {\n      id: 'orchard',\n      owned: 0,\n      cost: {\n        gold: 25\n      },\n      unlocked: false\n    },\n    ciderfarm: {\n      id: 'ciderfarm',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 5,\n        tool: 1\n      },\n      unlocked: false\n    },\n    chapel: {\n      id: 'chapel',\n      owned: 0,\n      cost: {\n        gold: 1500,\n        wood: 12,\n        tool: 5\n      },\n      unlocked: false\n    },\n    hempfarm: {\n      id: 'hempfarm',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 2\n      },\n      unlocked: false\n    },\n    weavers: {\n      id: 'weavers',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      }\n    },\n    quarry: {\n      id: 'quarry',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    },\n    stonemason: {\n      id: 'stonemason',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    }\n  },\n  buildings: {\n    owned: {}\n  },\n  warehouse: {\n    type: 'smallwarehouse',\n    totalCapacity: 40,\n    resources: {\n      gold: {\n        id: 'gold',\n        owned: 5000,\n        unlocked: true\n      },\n      tool: {\n        id: 'tool',\n        owned: 40,\n        unlocked: true\n      },\n      fish: {\n        id: 'fish',\n        owned: 2,\n        unlocked: true\n      },\n      wood: {\n        id: 'wood',\n        owned: 40,\n        unlocked: true\n      },\n      apple: {\n        id: 'apple',\n        owned: 0,\n        unlocked: false\n      },\n      cider: {\n        id: 'cider',\n        owned: 0,\n        unlocked: false\n      },\n      hemp: {\n        id: 'hemp',\n        owned: 0,\n        unlocked: false\n      },\n      spice: {\n        id: 'spice',\n        owned: 0,\n        unlocked: false\n      },\n      linen: {\n        id: 'linen',\n        owned: 0,\n        unlocked: false\n      },\n      stone: {\n        id: 'stone',\n        owned: 0,\n        unlocked: false\n      },\n      stonebrick: {\n        id: 'stonebrick',\n        owned: 0,\n        unlocked: false\n      }\n    },\n  },\n  couriers: {\n    couriers:[],\n    jobQueue: [],\n    jobQueueMap: {}\n  },\n  housing: {\n    types: {\n      peasanthouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: true,\n      },\n      citizenhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      patricianhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      noblehouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      }\n    },\n    abodes: []\n  },\n  population: {\n    beggar: {\n      id: 'beggar',\n      unlocked: true\n    },\n    peasant: {\n      id: 'peasant',\n      unlocked: true\n    },\n    citizen: {\n      id: 'citizen',\n      unlocked: false\n    },\n    patrician: {\n      id: 'patrician',\n      unlocked: false\n    },\n    noble: {\n      id: 'noble',\n      unlocked: false\n    }\n  }\n};\n\nexport default INITIAL_STATE;\n","export default class Scheduler {\n  constructor(functionToRun, targetInterval) {\n    this.targetFunction = functionToRun;\n    this.targetInterval = targetInterval;\n    this.running = false;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n    let lastTick = Date.now();\n    this.running = true;\n    let repeater = () => {\n      if (!this.running) {\n          return;\n      }\n      let currentTime = Date.now();\n      let elapsedTime = currentTime - lastTick;\n      this.targetFunction(elapsedTime);\n      lastTick = currentTime;\n      setTimeout(repeater.bind(this), this.targetInterval);\n    }\n    setTimeout(repeater.bind(this), this.targetInterval);\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeName } from '../actions/game';\n\nconst IslandNameView = () => {\n  const name = useSelector(state => state.island.name);\n  const title = useSelector(state => state.island.title);\n  const dispatch = useDispatch();\n\n  const changeFn = () => {\n    const toName = prompt('Enter name');\n    if (toName) {\n      dispatch(changeName(toName.substring(0, 100)));\n    }\n  }\n\n  return (\n    <div className='title'>\n      <h2>{name} <button onClick={changeFn}>Change Name</button></h2>\n      <h4>{title}</h4>\n    </div>\n  )\n};\n\nexport default IslandNameView;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setTimeFactor } from '../../actions/cheats';\n\nconst TimeFactor = () => {\n  const dispatch = useDispatch();\n  const [timeFactor, setTf] = useState(1);\n\n  const handleSubmit = (event) => {\n    dispatch(setTimeFactor(timeFactor));\n    event.preventDefault();\n  }\n\n  return (\n    <div className='time-factor'>\n      <form onSubmit={handleSubmit}>\n        <input type='number' name='timeFactor' onChange={e => setTf(e.target.value)} required></input>\n        <input type='submit' value='Set time factor' />\n      </form>\n    </div>\n  )\n};\n\nexport default TimeFactor;\n","export const filterUnlocked = (collectionObject) => {\n  return Object.entries(collectionObject).reduce((accumulator, [key, value]) => {\n    if (value.unlocked) {\n      accumulator[key] = value;\n    }\n    return accumulator;\n  }, {});\n};\n\nexport const setAffordable = (buyable, resources) => {\n  for (let [resource, amount] of Object.entries(buyable.cost)) {\n    if (!resources[resource]) {\n      // thing costs a resource the player hasn't unlocked\n      return {...buyable, canAfford: false};\n    } else if (resources[resource].owned < amount) {\n      return Object.assign({}, buyable, {canAfford: false});\n    }\n  }\n  return Object.assign({}, buyable, {canAfford: true});\n};\n\nexport const setAllAffordable = (buyableCollection, resources) => {\n  return Object.entries(buyableCollection).reduce((accumulator, [buyableId, buyable]) => {\n    accumulator[buyableId] = setAffordable(buyable, resources);\n    return accumulator;\n  }, {});\n};\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { upgradeWarehouse } from '../actions/warehouse';\nimport { filterUnlocked, setAffordable } from '../selectors';\nimport Buildings from '../data/building-definitions';\nimport ResourceDefinitions from '../data/resource-definitions';\n\nimport '../../style/resource.css';\n\nconst ResourcePanel = () => {\n  const warehouseType = useSelector(state => state.warehouse.type);\n  const resources = useSelector(state => filterUnlocked(state.warehouse.resources), shallowEqual);\n  const max = useSelector(state => state.warehouse.totalCapacity);\n  const warehouseInfo = Buildings[warehouseType];\n  const dispatch = useDispatch();\n\n  const upgradeWarehouseFn = () => {\n    dispatch(upgradeWarehouse(warehouseType));\n  }\n\n  let upgradeButton = null;\n  if (warehouseInfo.upgradesTo) {\n    const canAfford = setAffordable({cost: warehouseInfo.upgradeCost}, resources).canAfford;\n    upgradeButton = (\n      <button onClick={upgradeWarehouseFn} disabled={!canAfford}>Upgrade</button>\n    );\n  }\n\n  return (\n    <div className='resource-panel'>\n      <h4>{warehouseInfo.name}</h4>\n      {upgradeButton}\n      <div className='resource-list'>\n        {Object.keys(resources).map((item, key) => {\n            const resourceName = ResourceDefinitions[item].name;\n            if (item !== 'gold') {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)} / {max}</div>;\n            } else {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)}</div>;\n            }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResourcePanel;\n","import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport ResourceDefinitions from '../data/resource-definitions';\n\nimport '../../style/courier.css';\n\nconst CourierMonitor = () => {\n  const couriers = useSelector(state => state.couriers, shallowEqual);\n  const buildings = useSelector(state => state.buildings, shallowEqual);\n\n  function jobDescriptionToString(jobDescription) {\n    if (!jobDescription.id) {\n      return 'Sitting idly';\n    }\n    const what = ResourceDefinitions[jobDescription.carrying].name;\n    const howMuch = jobDescription.amount;\n    const fromWhereId = jobDescription.from;\n    let fromWhere = 'nowhere?!';\n    if (fromWhereId === 'warehouse') {\n      fromWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[fromWhereId];\n      if (!building) {\n        fromWhere = '???';\n      } else {\n        fromWhere = building.name;\n      }\n    }\n    const toWhereId = jobDescription.to;\n    let toWhere = 'nowhere?!';\n    if (toWhereId === 'warehouse') {\n      toWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[toWhereId];\n      if (!building) {\n        toWhere = '???';\n      } else {\n        toWhere = building.name;\n      }\n    }\n    return `Delivering ${howMuch} ton of ${what} from ${fromWhere} to ${toWhere}`;\n  }\n\n  const courierList = couriers.couriers.map((courier) => {\n    return (\n      <div className='courier' key={courier.id}>\n        <div>{courier.status}</div>\n        <div>{courier.progress.toFixed(1)}</div>\n        {/**<div>{jobDescriptionToString(courier.jobDescription)}</div>**/}\n        <div>{JSON.stringify(courier.payload)}</div>\n      </div>\n    );\n  });\n\n  return (\n    <div className='courier-monitor'>\n      {courierList}\n    </div>\n  );\n};\n\nexport default CourierMonitor;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked, setAllAffordable } from '../selectors';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../data/building-definitions';\nimport ResourceDefinitions from '../data/resource-definitions';\nimport { constructBuilding } from '../actions/construction';\nimport { buildHouse } from '../actions/housing';\nimport { buildWarehouse } from '../actions/warehouse';\n\nimport '../../style/construction.css';\n\nconst ConstructionPanel = () => {\n  const resources = useSelector(state => state.warehouse.resources);\n  const construction = useSelector(state => setAllAffordable(filterUnlocked(state.construction), resources), shallowEqual);\n  const dispatch = useDispatch();\n\n  const constructionList = Object.entries(construction).map(([buildingId, construction]) => {\n    const buildingInfo = BuildingDefinitions[buildingId];\n    const ingredientPanel = Object.keys(construction.cost).map((ingredient) => (\n      <div className='construction-ingredient' key={ingredient}>{ResourceDefinitions[ingredient].name}: {construction.cost[ingredient]}</div>\n    ));\n\n    let buyFunction = null;\n    if (buildingInfo.category === BUILDING_CATEGORY.HOUSE) {\n      buyFunction = () => dispatch(buildHouse(construction));\n    } else if (buildingInfo.category === BUILDING_CATEGORY.WAREHOUSE) {\n      buyFunction = () => dispatch(buildWarehouse(construction));\n    } else {\n      buyFunction = () => dispatch(constructBuilding(construction));\n    }\n\n    return (\n      <div className='construction' key={buildingId}>\n        <div className='construction-header'><h4>{buildingInfo.name}</h4></div>\n        <div className='description'><h5>{buildingInfo.description}</h5></div>\n        <div>Owned: {construction.owned}</div>\n        <div className='ingredientList'>{ingredientPanel}</div>\n        <button className='purchase' onClick={buyFunction} disabled={!construction.canAfford}>Buy</button>\n      </div>\n    )\n  });\n  return (\n    <div className='construction-panel'>\n      {constructionList}\n    </div>\n  )\n};\n\nexport default ConstructionPanel;\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Buildings, {BUILDING_CATEGORY} from '../data/building-definitions';\n\nimport { useDispatch } from 'react-redux';\nimport { destroyBuilding } from '../actions/construction';\nimport { disableBuilding, enableBuilding } from '../actions/building';\n\nconst BuildingDetails = (props) => {\n  const dispatch = useDispatch();\n  const building = props.building;\n  const buildingInfo = Buildings[building.buildingId];\n\n  const destroyBuildingFn = (toDestroy) => {\n    dispatch(destroyBuilding(toDestroy));\n  }\n\n  const toggleEnableFn = (building) => {\n    if (building.enabled) {\n      dispatch(disableBuilding(building.id));\n    } else {\n      dispatch(enableBuilding(building.id));\n    }\n  }\n\n  return (\n    <Modal show={props.show} onHide={props.onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>{buildingInfo.name}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>{buildingInfo.description}</p>\n        {\n          buildingInfo.category === BUILDING_CATEGORY.PRODUCER &&\n            <>\n              <div>{building.status}</div>\n              <div>Efficiency: {building.efficiency}</div>\n              <div className='inbox'>Inbox: {JSON.stringify(building.inbox)}</div>\n              <div className='outbox'>Outbox: {JSON.stringify(building.outbox)}</div>\n            </>\n        }\n      </Modal.Body>\n      <Modal.Footer>\n        {\n          buildingInfo.category === BUILDING_CATEGORY.PRODUCER &&\n          <button onClick={() => toggleEnableFn(building)}>{ building.enabled ? 'Disable' : 'Enable'}</button>\n        }\n        <button onClick={() => destroyBuildingFn(building)}>Destroy</button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default BuildingDetails;\n","import React, { useState } from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport BuildingDetails from './BuildingDetails';\n\nimport Buildings, { BUILDING_CATEGORY, buildingStatus } from '../data/building-definitions';\n\nconst BuildingIcon = (props) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const handleClose = () => setShowDetails(false);\n  const handleShow = () => setShowDetails(true);\n\n  const building = props.building;\n\n  let toolTipContent = Buildings[building.buildingId].name;\n  let statusColor = null;\n  if (Buildings[building.buildingId].category !== BUILDING_CATEGORY.PRODUCER) {\n    statusColor = 'working';\n  } else {\n    switch (building.status) {\n      case buildingStatus.DISABLED:\n        statusColor = 'disabled';\n        toolTipContent += ' (Disabled)'\n        break;\n      case buildingStatus.AWAITING_RESOURCES:\n        statusColor = 'awaiting';\n        toolTipContent += ' - Awaiting resources!'\n        break;\n      case buildingStatus.OUTBOX_FULL:\n        statusColor = 'outbox-full';\n        toolTipContent += ' - Outbox full!'\n        break;\n      case buildingStatus.WORKING:\n        statusColor = 'working';\n      default:\n        break;\n    }\n  }\n\n\n  return (\n    <>\n      <BuildingDetails show={showDetails} onClose={handleClose} building={building}></BuildingDetails>\n      <OverlayTrigger\n        placement='top'\n        delay={{ show: 250, hide: 250 }}\n        overlay={(props) => <Tooltip {...props}>{toolTipContent}</Tooltip>}\n        >\n        <div className={'building-icon ' + statusColor} onClick={handleShow}>\n          {Buildings[building.buildingId].abbreviation}\n        </div>\n      </OverlayTrigger>\n    </>\n  )\n}\n\nexport default BuildingIcon;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport BuildingIcon from './BuildingIcon';\n\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport Buildings, { BUILDING_CATEGORY, buildingStatus } from '../data/building-definitions';\nimport { destroyBuilding } from '../actions/construction';\nimport { disableBuilding, enableBuilding } from '../actions/building';\n\nimport '../../style/building.css';\n\nconst BuildingPanel = () => {\n  const buildingState = useSelector(state => state.buildings, shallowEqual);\n  const dispatch = useDispatch();\n  const buildings = buildingState.owned;\n\n  const destroyBuildingFn = (toDestroy) => {\n    dispatch(destroyBuilding(toDestroy));\n  }\n\n  const toggleEnableFn = (building) => {\n    if (building.enabled) {\n      dispatch(disableBuilding(building.id));\n    } else {\n      dispatch(enableBuilding(building.id));\n    }\n  }\n\n  const buildingIcons = Object.values(buildings).map((building) =>\n    <BuildingIcon building={building} key={building.id}></BuildingIcon>\n  );\n\n  return (\n    <Container>\n      <div className='building-panel'>\n        {buildingIcons}\n      </div>\n    </Container>\n  );\n};\n\nexport default BuildingPanel;\n","import React from 'react';\nimport PopulationDefinitions from '../data/population-definitions';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/population.css';\n\nconst PopulationPanel = () => {\n  const populationState = useSelector(state => filterUnlocked(state.population), shallowEqual);\n\n  const populationList = Object.values(populationState).map((pop) => {\n      const popName = PopulationDefinitions[pop.id].name;\n      const happiness = pop.happiness ? pop.happiness.toFixed() : 0;\n      let beggarTimer = null;\n      if (pop.id === 'beggar') {\n        beggarTimer = 1200 - pop.beggarTimer;\n      }\n      return <div className='population' key={pop.id}>\n        {popName}: {pop.owned} / {pop.maxPopulation} Happiness: {happiness} {pop.consumeInfo} --- {beggarTimer}\n      </div>\n  });\n\n  return (\n    <div className='population-panel'>\n      {populationList}\n    </div>\n  )\n}\n\nexport default PopulationPanel;\n","import React from 'react';\nimport BuildingDefinitions from '../data/building-definitions';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport { ascendHouse } from '../actions/housing';\n\nimport '../../style/housing.css';\n\nconst HousingPanel = () => {\n  const dispatch = useDispatch();\n\n  const houses = useSelector((state) => filterUnlocked(state.housing.types), shallowEqual);\n  const population = useSelector((state) => state.population, shallowEqual);\n  let housingList = Object.keys(houses).map((houseId) => {\n    const housedPopulation = population[BuildingDefinitions[houseId].populationCategory];\n    const canAscend = (houses[houseId].remainingAscensionRights > 0) && housedPopulation.canAscend;\n    const availableAscensions = canAscend ? houses[houseId].remainingAscensionRights : 0;\n    return <div className='housing' key={houseId}>\n      <div className='housing-data'>{BuildingDefinitions[houseId].name}: {houses[houseId].owned}</div>\n      <div><button onClick={() => {dispatch(ascendHouse(houseId, BuildingDefinitions[houseId].ascendsTo))}} disabled={!canAscend}>Ascend</button>{availableAscensions}</div>\n    </div>\n  });\n\n  return (\n    <div className='housing-panel'>\n      {housingList}\n    </div>\n  )\n};\n\nexport default HousingPanel;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { loadGame } from '../actions/game';\n\nconst SaveLoad = () => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const copyState = () => {\n    const saveState = btoa(JSON.stringify(state));\n    navigator.clipboard.writeText(saveState).then(() => {\n      alert('Saved to clipboard');\n    });\n  }\n\n  const loadState = () => {\n    const loadState = JSON.parse(atob(prompt('Enter load data')));\n    if (!loadState) {\n      alert('Invalid save state');\n    } else {\n      dispatch(loadGame(loadState));\n    }\n  }\n\n  return (\n    <div className='save-load'>\n      <button onClick={copyState}>Save</button>\n      <button onClick={loadState}>Load</button>\n    </div>\n  )\n}\n\nexport default SaveLoad;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport Resources from '../data/resource-definitions';\nimport Traders from '../data/trader-info';\nimport { buyGood, sellGood, dismissTrader } from '../actions/trade';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/trade.css';\n\nconst TradePanel = () => {\n  const traderState = useSelector(state => state.trader, shallowEqual);\n  const warehouse = useSelector(state => state.warehouse, shallowEqual);\n  const dispatch = useDispatch();\n\n  if (traderState.traderId === 0) {\n    return (\n      <div className='trade-panel'>\n        <h4>Your port is empty</h4>\n        Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      </div>\n    );\n  }\n\n  const resources = filterUnlocked(warehouse.resources);\n  const goldOnHand = resources.gold.owned;\n\n  const goodsToTrade = Object.entries(traderState.wares).map(([good, tradeData]) => {\n    const goodInWarehouse = resources[good];\n    if (!goodInWarehouse) {\n      // not unlocked, can't sell\n      return null;\n    }\n    const canBuy = (goldOnHand >= tradeData.sellPrice) && (tradeData.held > 0) && (goodInWarehouse.owned + goodInWarehouse.pending - goodInWarehouse.reserved < warehouse.totalCapacity);\n    const canSell = (tradeData.held < traderState.maxCapacity) && (goodInWarehouse.owned > 0);\n    return <div className='trade-good' key={good}>\n      {Resources[good].name} available: {tradeData.held}\n      <button onClick={() => dispatch(buyGood(good, 1, tradeData.sellPrice))} disabled={!canBuy}>Buy for {tradeData.sellPrice} Gold</button>\n      <button onClick={() => dispatch(sellGood(good, 1, tradeData.buyPrice))} disabled={!canSell}>Sell for {tradeData.buyPrice} Gold</button>\n    </div>\n  });\n\n  const dismissFn = () => {\n    dispatch(dismissTrader(traderState.dismissCost));\n  }\n\n  return (\n    <div className='trade-panel'>\n      <h4>{Traders[traderState.traderId].name} has visited your island!</h4>\n      Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      <button onClick={dismissFn}>Dismiss for {traderState.dismissCost} Gold</button>\n      {goodsToTrade}\n    </div>\n  );\n};\n\nexport default TradePanel;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { tick as dispatchTick, init as dispatchInit } from './actions/game';\nimport Scheduler from './scheduler';\n\nimport IslandNameView from './components/IslandNameView';\nimport TimeFactor from './components/cheats/TimeFactor';\nimport ResourcePanel from './components/ResourcePanel';\nimport CourierMonitor from './components/CourierMonitor';\nimport ConstructionPanel from './components/ConstructionPanel';\nimport BuildingPanel from './components/BuildingPanel';\nimport PopulationPanel from './components/PopulationPanel';\nimport HousingPanel from './components/HousingPanel';\nimport SaveLoad from './components/SaveLoad';\nimport TradePanel from './components/TradePanel';\n\nconst MS_TO_S = 1/1000.0;\n\nfunction Game() {\n  const [scheduler] = useState(new Scheduler(tick, 100));\n  const dispatch = useDispatch();\n\n  function tick(timeIntervalMs) {\n    dispatch(dispatchTick(timeIntervalMs * MS_TO_S));\n  }\n\n  useEffect(() => {\n    dispatch(dispatchInit());\n    scheduler.start();\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <SaveLoad></SaveLoad>\n      <TimeFactor></TimeFactor>\n      <IslandNameView></IslandNameView>\n      <ResourcePanel></ResourcePanel>\n      <TradePanel></TradePanel>\n      <PopulationPanel></PopulationPanel>\n      <HousingPanel></HousingPanel>\n      <CourierMonitor></CourierMonitor>\n      <ConstructionPanel></ConstructionPanel>\n      <BuildingPanel></BuildingPanel>\n    </div>\n  );\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './js/store/store';\n\nimport './style/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Game from './js/Game';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(\n<Provider store={configureStore()}>\n  <Game></Game>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root-reducer';\nimport INITIAL_STATE from './initial-state';\n\nexport default function configureStore(initialState=INITIAL_STATE) {\n  const saveState = localStorage.getItem('save');\n  if (saveState) {\n    initialState = JSON.parse(atob(prompt('Enter load data')));\n  }\n  if (!initialState) {\n    initialState = INITIAL_STATE;\n  }\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk) && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n );\n}\n"],"sourceRoot":""}