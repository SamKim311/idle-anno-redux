{"version":3,"sources":["js/actions/game.js","js/reducers/island.js","js/actions/warehouse.js","js/actions/construction.js","js/data/building-definitions.js","js/actions/housing.js","js/actions/trade.js","js/data/resource-definitions.js","js/reducers/warehouse.js","js/reducers/construction.js","js/actions/building.js","js/reducers/building.js","js/reducers/couriers.js","js/reducers/housing.js","js/reducers/population.js","js/reducers/amenities.js","js/data/population-definitions.js","js/reducers/consume.js","js/reducers/growth.js","js/reducers/finance.js","js/data/level-up-definitions.js","js/reducers/level-up.js","js/actions/cheats.js","js/reducers/cheat.js","js/data/trader-info.js","js/reducers/trader.js","js/store/initial-state.js","js/reducers/root-reducer.js","js/scheduler.js","js/components/IslandNameView.js","js/components/cheats/TimeFactor.js","js/selectors.js","js/components/PriceTooltip.js","js/components/ResourcePanel.js","js/components/CourierMonitor.js","js/components/ConstructionPanel.js","js/components/BuildingDetails.js","js/components/BuildingIcon.js","js/components/BuildingPanel.js","js/components/PopulationPanel.js","js/components/HousingPanel.js","js/components/SaveLoad.js","js/components/TradePanel.js","js/Game.js","js/serviceWorker.js","index.js","js/store/store.js"],"names":["ACTIONS","INIT","TICK","SAVE_GAME","LOAD_GAME","RESET_SAVE","CHANGE_NAME","saveGame","type","BUILD_WAREHOUSE","UPDGRADE_WAREHOUSE","UPGRADE_STOREHOUSE","CONSTRUCT_BUILDING","DESTROY_BUILDING","BUILDING_CATEGORY","AMENITY","PRODUCER","HOUSE","WAREHOUSE","buildingStatus","AWAITING_RESOURCES","WORKING","OUTBOX_FULL","DISABLED","BuildingDefinitions","marketplace","name","abbreviation","description","category","produces","community","upkeep","chapel","faith","tavern","entertainment","church","prison","security","fishinghut","consumes","fish","produceTime","disabledUpkeep","lumberjackhut","wood","orchard","apple","ciderfarm","cider","hempfarm","hemp","weavers","linen","stonemason","stone","oremine","ore","charcoalhut","charcoal","smelter","iron","toolmaker","tool","ropeyard","rope","wheatfield","wheat","mill","flour","bakery","bread","weaponsmith","weapon","hopsfield","hop","brewery","ale","potashpit","potash","glasssmelter","quartz","glass","saltmine","brine","saltworks","salt","pigfarm","hide","tannery","leather","papermill","paper","printingpress","ink","book","alms","populationCategory","populationCap","peasanthouse","ascendsTo","citizenhouse","cost","patricianhouse","noblehouse","smallwarehouse","couriers","capacity","upgradesTo","upgradeCost","gold","mediumwarehouse","smallstockpile","mediumstockpile","smallstorehouse","smallshipyard","largeshipyard","repaircrane","BUILD_HOUSE","ASCEND_HOUSE","BUY_GOODS","SELL_GOODS","DISMISS_TRADER","ResourceDefinitions","baseTradePrice","spice","resourceDecorations","reserved","pending","initResourceState","owned","unlocked","deductCost","resources","resourceCopy","Object","assign","entries","ingredient","amount","ingredientCopy","DISABLE_BUILDING","ENABLE_BUILDING","initialProducerState","status","progress","efficiency","efficiencyTimer","efficiencySupplied","inbox","outbox","EFFICIENCY_FACTOR","EFFICIENCY_TIMER","EFFICIENCY_MINIMUM","BASE_EFFICIENCY_MAXIMUM","BASE_IN_OUT_BOX_CAPACITY","initializeInOutBox","building","buildingInfo","buildingId","keys","good","doProductionTick","timeIntervalS","buildingCopy","enabled","progressEfficiency","consumed","canAfford","produced","outboxHasRoom","inboxCopy","outboxCopy","Math","min","max","courierState","initCourier","timeThreshold","jobDescription","payload","markedForDeath","state","action","gameActions","startingWarehouse","warehouse","courierArrayCopy","slice","addCouriers","courierObjCopy","warehouseActions","thisWarehouse","toUpgrade","nextWarehouse","couriersToAdd","courierList","builtWarehouse","toConstruct","id","addedCouriers","newState","newCouriers","newArray","constructionActions","toDestroy","couriersToRemove","couriersRemoved","courierIndex","length","courier","markmarkedForDeath","splice","stateCopy","couriersCopy","warehouseMax","totalCapacity","buildings","buildingRefCopy","newJobs","findJobs","jobArrayCopy","jobQueue","concat","jobList","jobRefCopy","jobQueueMap","jobRef","courierListCopy","map","newCourier","nextJobIndex","getNextAvailableJob","nextJob","pickupFromId","from","deliverToId","to","carrying","pickupFrom","deliverTo","inboxRoom","currentSupply","floor","currentOutbox","warehouseRoom","forEach","tickIntervalSeconds","fromId","toId","product","hasOwnProperty","resourceToTake","resourceToDeliver","killedCouriers","filter","courierArray","numToAdd","i","uuidv4","push","SUPPLY_SUFFIX","PICKUP_SUFFIX","existingJobs","supplies","values","supplyKey","resource","newJob","pickups","reduce","accumulator","pickupKey","jobArray","jobIndex","initHouseState","popProgress","currentPop","ascensionFactors","patrician","rightsLists","calculateAscensionRights","allTypes","toCheck","totalHouses","sum","pop","totalAscensionRights","ascendTo","alreadyAscended","remainingAscensionRights","initValues","maxPopulation","happiness","canAscend","consumeInfo","beggarValues","unhoused","beggarTimer","calculateBeggarCount","population","amenities","Buildings","amenity","PopulationDefinitions","beggar","taxRate","quantity","weight","peasant","citizen","noble","popType","popOriginal","currentHappiness","pctSatisfied","happinessDiff","abs","BEGGAR_ARRIVAL_MIN","BEGGAR_ARRIVAL_MAX","houses","housing","populationCounts","newAbodes","abodes","abodeOriginal","abode","curHappiness","houseId","growthFactor","popCategory","popCount","newPop","incomingBeggars","getIncomingBeggars","beggarDeficit","lowerBound","upperBound","rn","integer","financeInfo","maintenanceCost","taxRevenue","warehouseMaintenance","totalMaintenance","totalTaxes","happinessFactor","unlockThresholds","unlocks","title","island","level","unlockPopType","popRequired","constructions","construction","conId","resId","popUnlocked","types","unlockedHouse","SET_TIME_FACTOR","cheat","timeFactor","Traders","lord","rates","buy","sell","baseCapacity","prince","BASE_TRADER_STAY_TIME_SECONDS","INIT_STATE","traderId","timer","timeToLeave","wares","newGame","dismissCost","newTrader","currentState","traders","selectedTrader","random","traderInfo","maxCapacity","goodBasePrice","buyPrice","sellPrice","held","INITIAL_STATE","combinedReducer","combineReducers","warehouseCopy","Resources","resourceId","newResources","newResource","housingActions","warehouseToBuild","currentWarehouse","tradeActions","updatedResources","atPrice","goodBought","toConstructId","newOwned","toDestroyId","GAME_ACTIONS","updatedBuilding","CONSTRUCTION_ACTIONS","buildingToBuild","newBuilding","newBuildings","newStorehouse","buildingToDestroy","toDisable","disabled","toEnable","toBuild","houseData","fromHouseId","fromHouse","toHouseId","fromType","toType","nextHouse","ascendIndex","findIndex","house","populationState","houseBuilt","modifiedPop","currentHouse","oldPop","nextPop","maxBeggars","trader","toBuy","time","rootReducer","localStorage","setItem","btoa","JSON","stringify","initState","saveState","cheatState","intermediateState","amenityState","consumptionState","consume","growthState","growth","financeState","finance","levelUp","Scheduler","functionToRun","targetInterval","this","targetFunction","running","lastTick","Date","now","setTimeout","repeater","currentTime","elapsedTime","bind","IslandNameView","useSelector","dispatch","useDispatch","className","onClick","toName","prompt","changeName","substring","TimeFactor","useState","setTf","onSubmit","event","setTimeFactor","preventDefault","onChange","e","target","value","required","filterUnlocked","collectionObject","key","setAffordable","buyable","costProperty","PriceTooltip","props","ingredientsList","headerText","header","popover","Popover","Title","as","Content","OverlayTrigger","placement","delay","show","overlay","children","ResourcePanel","warehouseType","shallowEqual","warehouseInfo","upgradeButton","Button","variant","size","item","resourceName","toFixed","CourierMonitor","ConstructionPanel","buyableCollection","buyableId","setAllAffordable","constructionList","buyFunction","Container","BuildingDetails","destroyBuildingFn","destroyBuilding","toggleEnableFn","enableBuilding","upgradeWarehouseFn","storehouseToUpgrade","Modal","onHide","onClose","Header","closeButton","Body","Footer","BuildingIcon","showDetails","setShowDetails","toolTipContent","statusColor","Tooltip","BuildingPanel","buildingIcons","PopulationPanel","populationList","popName","HousingPanel","housingList","houseInfo","nextHouseInfo","housedPopulation","availableAscensions","toHouse","toBuilding","ascendHouse","SaveLoad","getItem","navigator","clipboard","writeText","then","alert","loadState","parse","atob","window","confirm","TradePanel","traderState","goldOnHand","goodsToTrade","tradeData","goodInWarehouse","canBuy","canSell","goodToBuy","goodToSell","MS_TO_S","Game","timeIntervalMs","scheduler","console","log","autoSaveScheduler","useEffect","start","Boolean","location","hostname","match","ReactDOM","render","store","initialState","loaded","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c46bbdf2.chunk.js","sourcesContent":["export const ACTIONS = {\n  INIT: 'INIT',\n  TICK: 'TICK',\n  SAVE_GAME: 'SAVE_GAME',\n  LOAD_GAME: 'LOAD_GAME',\n  RESET_SAVE: 'RESET_SAVE',\n  CHANGE_NAME: 'CHANGE_NAME'\n};\n\nexport function init() {\n  return { type: ACTIONS.INIT };\n}\n\nexport function tick(tickIntervalSeconds) {\n  return { type: ACTIONS.TICK, payload: { tickIntervalSeconds: tickIntervalSeconds }};\n}\n\nexport function saveGame() {\n  return { type: ACTIONS.SAVE_GAME };\n}\n\nexport function loadGame(saveState) {\n  return { type: ACTIONS.LOAD_GAME, payload: { saveState: saveState }};\n}\n\nexport function resetSave() {\n  return { type: ACTIONS.RESET_SAVE };\n}\n\nexport function changeName(name) {\n  return { type: ACTIONS.CHANGE_NAME, payload: { name: name }};\n}\n","import { ACTIONS as gameActions } from '../actions/game';\n\nexport default function(island={}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.CHANGE_NAME: {\n      return {...island, name: payload.name};\n    }\n    default:\n      return island;\n  }\n}\n","export const ACTIONS = {\n  BUILD_WAREHOUSE: 'BUILD_WAREHOUSE',\n  UPDGRADE_WAREHOUSE: 'UPGRADE_WAREHOUSE',\n  UPGRADE_STOREHOUSE: 'UPGRADE_STOREHOUSE'\n};\n\nexport function buildWarehouse(warehouse) {\n  return { type: ACTIONS.BUILD_WAREHOUSE, payload: { toConstruct: warehouse }};\n}\n\nexport function upgradeWarehouse(currentWarehouse) {\n  return { type: ACTIONS.UPDGRADE_WAREHOUSE, payload: { toUpgrade: currentWarehouse }};\n}\n\nexport function upgradeStorehouse(storehouseToUpgrade) {\n  return { type: ACTIONS.UPGRADE_STOREHOUSE, payload: { toUpgrade: storehouseToUpgrade }};\n}\n","export const ACTIONS = {\n  CONSTRUCT_BUILDING: 'CONSTRUCT_BUILDING',\n  DESTROY_BUILDING: 'DESTROY_BUILDING'\n};\n\nexport function constructBuilding(toConstruct) {\n  return { type: ACTIONS.CONSTRUCT_BUILDING, payload: { toConstruct: toConstruct } };\n};\n\nexport function destroyBuilding(toDestroy) {\n  return { type: ACTIONS.DESTROY_BUILDING, payload: { toDestroy: toDestroy }};\n};\n","export const BUILDING_CATEGORY = {\n  AMENITY: 'AMENITY',\n  PRODUCER: 'PRODUCER',\n  HOUSE: 'HOUSE',\n  WAREHOUSE: 'WAREHOUSE'\n}\n\nexport const buildingStatus = {\n  AWAITING_RESOURCES: 'AWAITING_RESOURCES',\n  WORKING: 'WORKING',\n  OUTBOX_FULL: 'OUTBOX_FULL',\n  DISABLED: 'DISABLED'\n}\n\nconst BuildingDefinitions = {\n  // Amenities\n  marketplace: {\n    name: 'Marketplace',\n    abbreviation: 'M',\n    description: 'Provides a place for villagers to meet',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      community: 2.5\n    },\n    upkeep: 10\n  },\n  chapel: {\n    name: 'Chapel',\n    abbreviation: 'Ch',\n    description: 'A basic building for villagers to worship',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      faith: 3\n    },\n    upkeep: 15\n  },\n  tavern: {\n    name: 'Tavern',\n    abbreviation: 'Tv',\n    description: 'Provides citizens a place to drink',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      entertainment: 9\n    },\n    upkeep: 30\n  },\n  church: {\n    name: 'Church',\n    abbreviation: 'Ch',\n    description: 'Provides a larger location to worship',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      faith: 12\n    },\n    upkeep: 40\n  },\n  prison: {\n    name: 'Prison',\n    abbreviation: 'Pr',\n    description: 'Jails bad folks. Provides a sense of security',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      security: 16\n    }\n  },\n\n  // Producers\n  fishinghut: {\n    name: 'Fisherman\\'s Hut',\n    abbreviation: 'F',\n    description: 'Gathers fish',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      fish: 1\n    },\n    produceTime: 30,\n    upkeep: 15,\n    disabledUpkeep: 5\n  },\n  lumberjackhut: {\n    name: 'Lumberjack\\'s Hut',\n    abbreviation: 'L',\n    description: 'Gathers wood',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      wood: 1\n    },\n    produceTime: 40,\n    upkeep: 5,\n    disabledUpkeep: 0\n  },\n  orchard: {\n    name: 'Orchard',\n    abbreviation: 'O',\n    description: 'Grows apples to be turned into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      apple: 1\n    },\n    produceTime: 100,\n    upkeep: 5,\n    disabledUpkeep: 0\n  },\n  ciderfarm: {\n    name: 'Cidery',\n    abbreviation: 'C',\n    description: 'Processes apples into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      apple: 1\n    },\n    produces: {\n      cider: 1\n    },\n    produceTime: 40,\n    upkeep: 15,\n    disabledUpkeep: 5\n  },\n  hempfarm: {\n    name: 'Hemp Plantation',\n    abbreviation: 'H',\n    description: 'Grows hemp',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hemp: 1\n    },\n    produceTime: 60,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  weavers: {\n    name: 'Weaver\\'s Hut',\n    abbreviation: 'W',\n    description: 'Uses hemp to create clothing',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hemp: 1\n    },\n    produces: {\n      linen: 1\n    },\n    produceTime: 30,\n    upkeep: 25,\n    disabledUpkeep: 12\n  },\n  stonemason: {\n    name: 'Stonemason',\n    abbreviation: 'Sm',\n    description: 'Turns raw stone into stone bricks',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      stone: 1\n    },\n    produceTime: 30,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  oremine: {\n    name: 'Ore mine',\n    abbreviation: 'Om',\n    description: 'Mines raw ore from the ground',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      ore: 1\n    },\n    produceTime: 30,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  charcoalhut: {\n    name: 'Charcoal Burner\\'s Hut',\n    abbreviation: 'Cc',\n    description: 'Burns wood down into charcoal',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      charcoal: 1\n    },\n    produceTime: 30,\n    upkeep: 10,\n    disabledUpkeep: 0\n  },\n  smelter: {\n    name: 'Iron Smelter',\n    abbreviation: 'I',\n    description: 'Converts raw ore to iron ingots',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      ore: 1,\n      charcoal: 1\n    },\n    produces: {\n      iron: 1\n    },\n    produceTime: 30,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  toolmaker: {\n    name: 'Toolmaker\\'s Workshop',\n    abbreviation: 'TW',\n    description: 'Creates tools out of iron',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      iron: 0.5\n    },\n    produces: {\n      tool: 1\n    },\n    produceTime: 30,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  ropeyard: {\n    name: 'Ropeyard',\n    abbreviation: 'Rp',\n    description: 'Creates rope from hemp',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hemp: 0.5\n    },\n    produces: {\n      rope: 1\n    },\n    produceTime: 30,\n    upkeep: 40,\n    disabledUpkeep: 20\n  },\n  wheatfield: {\n    name: 'Wheat Field',\n    abbreviation: 'W',\n    description: 'Grows wheat',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      wheat: 1\n    },\n    produceTime: 30,\n    upkeep: 5,\n    disabledUpkeep: 0\n  },\n  mill: {\n    name: 'Flour Mill',\n    abbreviation: 'FM',\n    description: 'Grinds wheat into flour',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      wheat: 1\n    },\n    produces: {\n      flour: 1\n    },\n    produceTime: 15,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  bakery: {\n    name: 'Bakery',\n    abbreviation: 'Bk',\n    description: 'Bakes flour into bread',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      flour: 1\n    },\n    produces: {\n      bread: 1\n    },\n    produceTime: 15,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  weaponsmith: {\n    name: 'Weaponsmith',\n    abbreviation: 'Ws',\n    description: 'Forges weapons',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      iron: 1\n    },\n    produces: {\n      weapon: 1\n    },\n    produceTime: 30,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  hopsfield: {\n    name: 'Hops Farm',\n    abbreviation: 'HF',\n    description: 'Grows Hops',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hop: 1\n    },\n    produceTime: 30,\n    upkeep: 10,\n    disabledUpkeep: 5\n  },\n  brewery: {\n    name: 'Brewery',\n    abbreviation: 'Bw',\n    description: 'Brews Ale',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hop: 1.333,\n      wheat: 1.333\n    },\n    produces: {\n      ale: 1\n    },\n    produceTime: 40,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  potashpit: {\n    name: 'Potash Pit',\n    abbreviation: 'Pp',\n    description: 'Produces Potash',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      potash: 1\n    },\n    produceTime: 30,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  glasssmelter: {\n    name: 'Glass Smelter',\n    abbreviation: 'GS',\n    description: 'Melts quartz down into glass',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      potash: 1,\n      quartz: 0.5\n    },\n    produces: {\n      glass: 1\n    },\n    produceTime: 60,\n    upkeep: 30,\n    disabledUpkeep: 15\n  },\n  saltmine: {\n    name: 'Salt Mine',\n    abbreviation: 'SM',\n    description: 'Extracts brine from underground deposits',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      brine: 1\n    },\n    produceTime: 15,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  saltworks: {\n    name: 'Saltworks',\n    abbreviation: 'SW',\n    description: 'Refines brine into salt',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      brine: 1,\n      charcoal: 0.5\n    },\n    produces: {\n      salt: 1\n    },\n    produceTime: 15,\n    upkeep: 25,\n    disabledUpkeep: 15\n  },\n  pigfarm: {\n    name: 'Pig Farm',\n    abbreviation: 'PF',\n    description: 'Raises pigs for slaughter. Produces hides',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hide: 1\n    },\n    produceTime: 30,\n    upkeep: 15,\n    disabledUpkeep: 5\n  },\n  tannery: {\n    name: 'Tannery',\n    abbreviation: 'Tn',\n    description: 'Tans hides into leather',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hide: 1,\n      salt: 0.5\n    },\n    produces: {\n      leather: 1\n    },\n    produceTime: 15,\n    upkeep: 20,\n    disabledUpkeep: 10\n  },\n  papermill: {\n    name: 'Paper Mill',\n    abbreviation: 'PM',\n    description: 'Produces Paper',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      wood: 1\n    },\n    produces: {\n      paper: 1\n    },\n    produceTime: 20,\n    upkeep: 50,\n    disabledUpkeep: 25\n  },\n  printingpress: {\n    name: 'Printing Press',\n    abbreviation: 'PP',\n    description: 'Prints books',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      paper: 0.5,\n      ink: 1\n    },\n    produces: {\n      book: 1\n    },\n    produceTime: 20,\n    upkeep: 50,\n    disabledUpkeep: 25\n  },\n\n\n  // Houses\n  alms: {\n    name: 'Alms House',\n    abbreviation: 'Ah',\n    description: 'Provides shelter for 500 beggars',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'beggar',\n    populationCap: 500\n  },\n  peasanthouse: {\n    name: 'Peasant Shack',\n    description: 'Basic home for villagers. Houses 8',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'peasant',\n    populationCap: 8,\n    ascendsTo: 'citizenhouse'\n  },\n  citizenhouse: {\n    name: 'Citizen House',\n    description: 'Home for citizens',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'citizen',\n    populationCap: 15,\n    ascendsTo: 'patricianhouse',\n    cost: {\n      wood: 1,\n      tool: 1\n    }\n  },\n  patricianhouse: {\n    name: 'Patrician House',\n    description: 'Home for patricians',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'patrician',\n    populationCap: 25,\n    ascendsTo: 'noblehouse',\n    cost: {\n      wood: 1,\n      tool: 1,\n      stone: 4\n    }\n  },\n  noblehouse: {\n    name: 'Noble House',\n    description: 'Home for nobles',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'noble',\n    populationCap: 40,\n    cost: {\n      wood: 1,\n      tool: 1,\n      stone: 3,\n      glass: 4\n    }\n  },\n\n  // Warehouses\n  smallwarehouse: {\n    name: 'Small Warehouse',\n    description: 'Basic warehouse for your island',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 3,\n    capacity: 40,\n    upgradesTo: 'mediumwarehouse',\n    upgradeCost: {\n      gold: 150,\n      wood: 2,\n      tool: 3,\n      stone: 4\n    }\n  },\n  mediumwarehouse: {\n    name: 'Medium Warehouse',\n    description: 'Expanded warehouse',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 15,\n    couriers: 1,\n    capacity: 10\n  },\n  smallstockpile: {\n    name: 'Small Stockpile',\n    abbreviation: 'SS',\n    description: 'Small depot. Provides 1 courier',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 1,\n    capacity: 0,\n    upgradesTo: 'mediumstockpile',\n    upgradeCost: {\n      gold: 200,\n      wood: 3,\n      tool: 1,\n      stone: 3\n    }\n  },\n  mediumstockpile: {\n    name: 'Medium Stockpile',\n    abbreviation: 'MS',\n    description: 'Medium depot. Provides 2 couriers, and 5 storage',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 20,\n    couriers: 2,\n    capacity: 5\n  },\n  smallstorehouse: {\n    name: 'Small Storehouse',\n    abbreviation: 'So',\n    description: 'Increases the warehouse capacity',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 15,\n    couriers: 0,\n    capacity: 15\n  },\n\n  // Shipyard\n  smallshipyard: {\n    name: 'Small Shipyard',\n    description: 'Doesn\\'t do anything yet!'\n  },\n  largeshipyard: {\n    name: 'Large Shipyard',\n    description: 'Doesn\\'t do anything yet!'\n  },\n  repaircrane: {\n    name: 'Repair Crane',\n    description: 'Doesn\\'t do anything yet!'\n  }\n};\n\nexport default BuildingDefinitions;\n","import BuildingDefinitions from '../data/building-definitions';\n\nexport const ACTIONS = {\n  BUILD_HOUSE: 'BUILD_HOUSE',\n  ASCEND_HOUSE: 'ASCEND_HOUSE'\n};\n\nexport function buildHouse(house) {\n  return { type: ACTIONS.BUILD_HOUSE, payload: { toConstruct: house } };\n}\n\nexport function ascendHouse(fromHouse, toHouse) {\n  const toBuilding = BuildingDefinitions[toHouse];\n  return { type: ACTIONS.ASCEND_HOUSE, payload: { toConstruct: toBuilding, fromHouse: fromHouse }};\n}\n","export const ACTIONS = {\n  BUY_GOODS: 'BUY_GOODS',\n  SELL_GOODS: 'SELL_GOODS',\n  DISMISS_TRADER: 'DISMISS_TRADER'\n};\n\nexport function buyGood(goodToBuy, amount, atPrice) {\n  return { type: ACTIONS.BUY_GOODS, payload: { product: goodToBuy, amount: amount, atPrice: atPrice }};\n};\n\nexport function sellGood(goodToSell, amount, atPrice) {\n  return { type: ACTIONS.SELL_GOODS, payload: { product: goodToSell, amount: amount, atPrice: atPrice }};\n};\n\nexport function dismissTrader(dismissCost) {\n  return { type: ACTIONS.DISMISS_TRADER, payload: { cost: { gold: dismissCost }}};\n}\n","const ResourceDefinitions = {\n  gold: {\n    name: 'Gold',\n    baseTradePrice: 1\n  },\n  tool: {\n    name: 'Tool',\n    baseTradePrice: 15\n  },\n  fish: {\n    name: 'Fish',\n    baseTradePrice: 3\n  },\n  wood: {\n    name: 'Wood',\n    baseTradePrice: 1\n  },\n  apple: {\n    name: 'Apple',\n    baseTradePrice: 0.2\n  },\n  cider: {\n    name: 'Cider',\n    baseTradePrice: 3\n  },\n  spice: {\n    name: 'Spice',\n    baseTradePrice: 6\n  },\n  hemp: {\n    name: 'Hemp',\n    baseTradePrice: 4\n  },\n  linen: {\n    name: 'Clothing',\n    baseTradePrice: 27\n  },\n  stone: {\n    name: 'Stone Brick',\n    baseTradePrice: 8\n  },\n  ore: {\n    name: 'Iron Ore',\n    baseTradePrice: 4\n  },\n  charcoal: {\n    name: 'Charcoal',\n    baseTradePrice: 8\n  },\n  iron: {\n    name: 'Iron',\n    baseTradePrice: 16\n  },\n  rope: {\n    name: 'Rope',\n    baseTradePrice: 18\n  },\n  wheat: {\n    name: 'Wheat',\n    baseTradePrice: 1\n  },\n  flour: {\n    name: 'Flour',\n    baseTradePrice: 24\n  },\n  bread: {\n    name: 'Bread',\n    baseTradePrice: 34\n  },\n  weapon: {\n    name: 'Weapons',\n    baseTradePrice: 24\n  },\n  hop: {\n    name: 'Hops',\n    baseTradePrice: 2\n  },\n  ale: {\n    name: 'Ale',\n    baseTradePrice: 14\n  },\n  potash: {\n    name: 'Potash',\n    baseTradePrice: 10\n  },\n  quartz: {\n    name: 'Quartz',\n    baseTradePrice: 4\n  },\n  glass: {\n    name: 'Glass',\n    baseTradePrice: 16\n  },\n  brine: {\n    name: 'Brine',\n    baseTradePrice: 1\n  },\n  salt: {\n    name: 'Salt',\n    baseTradePrice: 4\n  },\n  hide: {\n    name: 'Hide',\n    baseTradePrice: 33\n  },\n  leather: {\n    name: 'Leather',\n    baseTradePrice: 87\n  },\n  paper: {\n    name: 'Paper',\n    baseTradePrice: 12\n  },\n  book: {\n    name: 'Books',\n    baseTradePrice: 30\n  },\n  ink: {\n    name: 'Ink',\n    baseTradePrice: 9\n  }\n};\n\nexport default ResourceDefinitions;\n","import { ACTIONS } from '../actions/warehouse';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as tradeActions } from '../actions/trade';\nimport BuildingDefinitions from '../data/building-definitions';\nimport Resources from '../data/resource-definitions';\n\nconst resourceDecorations = {\n  reserved: 0,\n  pending: 0\n}\n\nconst initResourceState = {\n  owned: 0,\n  unlocked: false\n}\n\nexport default function(warehouse = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case gameActions.INIT: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      const resources = {...warehouseCopy.resources};\n\n      // Add each resource and add it to the warehouse if not already added\n      Object.keys(Resources).forEach(resourceId => {\n        if (!resources.hasOwnProperty(resourceId)) {\n          resources[resourceId] = {...initResourceState, id: resourceId};\n        }\n      });\n\n      // go through each resource and add the decorator, because I don't wanna copy and paste it a billion times\n      const newResources = Object.entries(resources).reduce((accumulator, [resourceId, resource]) => {\n        const newResource = Object.assign({}, resource, resourceDecorations);\n        accumulator[resourceId] = newResource;\n        return accumulator;\n      }, resources);\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case housingActions.BUILD_HOUSE:\n    case housingActions.ASCEND_HOUSE:\n    case constructionActions.CONSTRUCT_BUILDING: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case ACTIONS.BUILD_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      const warehouseToBuild = BuildingDefinitions[payload.toConstruct.id];\n\n      warehouseCopy.totalCapacity += warehouseToBuild.capacity;\n\n      return warehouseCopy;\n    }\n    case ACTIONS.UPDGRADE_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      const currentWarehouse = BuildingDefinitions[warehouse.type];\n      const nextWarehouse = BuildingDefinitions[currentWarehouse.upgradesTo];\n      if (!nextWarehouse) {\n        return warehouse;\n      }\n\n      const cost = currentWarehouse.upgradeCost;\n      const newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      warehouseCopy.totalCapacity += nextWarehouse.capacity;\n      warehouseCopy.type = BuildingDefinitions[warehouse.type].upgradesTo;\n\n      return warehouseCopy;\n    }\n    case ACTIONS.UPGRADE_STOREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      const currentWarehouse = BuildingDefinitions[payload.toUpgrade.buildingId];\n      const nextWarehouse = BuildingDefinitions[currentWarehouse.upgradesTo];\n      if (!nextWarehouse) {\n        return warehouse;\n      }\n\n      const cost = currentWarehouse.upgradeCost;\n      const newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      warehouseCopy.totalCapacity += nextWarehouse.capacity;\n\n      return warehouseCopy;\n    }\n    case tradeActions.DISMISS_TRADER: {\n      const cost = payload.cost;\n      const updatedResources = deductCost(warehouse.resources, cost);\n      return {...warehouse, resources: updatedResources};\n    }\n    case tradeActions.BUY_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned -= amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned += amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    case tradeActions.SELL_GOODS: {\n      const good = payload.product;\n      const amount = payload.amount;\n      const atPrice = payload.atPrice;\n\n      const gold = {...warehouse.resources.gold};\n      gold.owned += amount * atPrice;\n\n      const goodBought = {...warehouse.resources[good]};\n      goodBought.owned -= amount;\n\n      const resources = {...warehouse.resources, gold: gold, [good]: goodBought};\n      return {...warehouse, resources: resources};\n    }\n    default:\n      return warehouse;\n  }\n}\n\nfunction deductCost(resources, cost) {\n  let resourceCopy = Object.assign({}, resources);\n  for (let [ingredient, amount] of Object.entries(cost)) {\n    let ingredientCopy = Object.assign({}, resourceCopy[ingredient]);\n    ingredientCopy.owned -= amount;\n    resourceCopy[ingredient] = ingredientCopy;\n  }\n  return resourceCopy;\n}\n","import { ACTIONS } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\n\nexport default function(constructions = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case warehouseActions.BUILD_WAREHOUSE:\n    case housingActions.BUILD_HOUSE:\n    case ACTIONS.CONSTRUCT_BUILDING:\n      let toConstructId = payload.toConstruct.id;\n      let toConstruct = constructions[toConstructId];\n      let newOwned = Object.assign({}, toConstruct, {owned: toConstruct.owned+1});\n      return Object.assign({}, constructions, {[toConstructId]: newOwned});\n    case ACTIONS.DESTROY_BUILDING:\n      const toDestroyId = payload.toDestroy.buildingId;\n      const toDestroy = {...constructions[toDestroyId]};\n      toDestroy.owned--;\n      return {...constructions, [toDestroyId]: toDestroy};\n    default:\n      return constructions;\n  }\n}\n","export const ACTIONS = {\n  DISABLE_BUILDING: 'DISABLE_BUILDING',\n  ENABLE_BUILDING: 'ENABLE_BUILDING'\n}\n\nexport function disableBuilding(id) {\n  return { type: ACTIONS.DISABLE_BUILDING, payload: { id: id }};\n}\n\nexport function enableBuilding(id) {\n  return { type: ACTIONS.ENABLE_BUILDING, payload: { id: id }};\n}\n","import uuidv4 from 'uuid/v4';\nimport { ACTIONS } from '../actions/building';\nimport { ACTIONS as CONSTRUCTION_ACTIONS } from '../actions/construction';\nimport { ACTIONS as GAME_ACTIONS } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport BuildingDefinitions, { BUILDING_CATEGORY, buildingStatus } from '../data/building-definitions';\n\nconst initialProducerState = {\n  status: buildingStatus.AWAITING_RESOURCES,\n  progress: 0,\n  efficiency: 1,\n  efficiencyTimer: 0,\n  efficiencySupplied: false,\n  inbox: {},\n  outbox: {}\n}\n\nconst EFFICIENCY_FACTOR = 1 / 100.0;\nconst EFFICIENCY_TIMER = 2;\nconst EFFICIENCY_MINIMUM = 1;\nconst BASE_EFFICIENCY_MAXIMUM = 100;\nexport const BASE_IN_OUT_BOX_CAPACITY = 5;\n\nexport default function(buildings = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case GAME_ACTIONS.TICK: {\n      if (!buildings.owned) {\n        return buildings;\n      }\n      const newState = Object.assign({}, buildings);\n      const newOwned = Object.assign({}, newState.owned);\n      newState.owned = newOwned;\n\n      const timeIntervalS = payload.tickIntervalSeconds;\n      Object.values(buildings.owned).forEach((building) => {\n        const buildingInfo = BuildingDefinitions[building.buildingId];\n        let updatedBuilding = null;\n        if (buildingInfo.category === BUILDING_CATEGORY.PRODUCER) {\n          updatedBuilding = doProductionTick(building, timeIntervalS);\n        } else {\n          updatedBuilding = building;\n        }\n        newOwned[updatedBuilding.id] = updatedBuilding;\n      });\n      return newState;\n    }\n    case warehouseActions.BUILD_WAREHOUSE:\n    case CONSTRUCTION_ACTIONS.CONSTRUCT_BUILDING:\n      const buildingToBuild = BuildingDefinitions[payload.toConstruct.id];\n      let newBuilding = Object.assign({}, {id: uuidv4(), buildingId: payload.toConstruct.id, enabled: true});\n      if (buildingToBuild.category === BUILDING_CATEGORY.PRODUCER) {\n        newBuilding = Object.assign(newBuilding, initialProducerState);\n        initializeInOutBox(newBuilding);\n      }\n      const newBuildings = Object.assign({}, buildings.owned);\n      newBuildings[newBuilding.id] = newBuilding;\n      return Object.assign({}, buildings, {owned: newBuildings});\n    case warehouseActions.UPGRADE_STOREHOUSE: {\n      const newStorehouse = {...buildings.owned[payload.toUpgrade.id]};\n      newStorehouse.buildingId = BuildingDefinitions[payload.toUpgrade.buildingId].upgradesTo;\n      const owned = {...buildings.owned, [payload.toUpgrade.id]: newStorehouse};\n      return {...buildings, owned: owned};\n    }\n    case CONSTRUCTION_ACTIONS.DESTROY_BUILDING:\n      const buildingToDestroy = payload.toDestroy;\n      const newOwned = {...buildings.owned};\n      delete newOwned[buildingToDestroy.id];\n      return {...buildings, owned: newOwned};\n    case ACTIONS.DISABLE_BUILDING: {\n      const toDisable = payload.id;\n      const disabled = {...buildings.owned[toDisable], enabled: false};\n      const owned = {...buildings.owned, [toDisable]: disabled};\n      return {...buildings, owned: owned};\n    }\n    case ACTIONS.ENABLE_BUILDING: {\n      const toEnable = payload.id;\n      const enabled = {...buildings.owned[toEnable], enabled: true};\n      const owned = {...buildings.owned, [toEnable]: enabled};\n      return {...buildings, owned: owned};\n    }\n    default:\n      return buildings;\n  }\n}\n\nfunction initializeInOutBox(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  building.inbox = {};\n  for (let ingredient of Object.keys(buildingInfo.consumes)) {\n    building.inbox[ingredient] = 0;\n  }\n\n  building.outbox = {};\n  for (let good of Object.keys(buildingInfo.produces)) {\n    building.outbox[good] = 0;\n  }\n}\n\nfunction doProductionTick(building, timeIntervalS) {\n  let buildingCopy = Object.assign({}, building);\n  const buildingInfo = BuildingDefinitions[buildingCopy.buildingId];\n\n  if (!building.enabled) {\n    buildingCopy.status = buildingStatus.DISABLED;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  if (!canAfford(buildingCopy)) {\n    buildingCopy.status = buildingStatus.AWAITING_RESOURCES;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  if (!outboxHasRoom(buildingCopy)) {\n    buildingCopy.status = buildingStatus.OUTBOX_FULL;\n    if (buildingCopy.efficiencySupplied) {\n      buildingCopy.efficiencySupplied = false;\n      buildingCopy.efficiencyTimer = 0;\n    }\n    buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n    return buildingCopy;\n  }\n\n  buildingCopy.status = buildingStatus.WORKING;\n  if (!buildingCopy.efficiencySupplied) {\n    buildingCopy.efficiencySupplied = true;\n    buildingCopy.efficiencyTimer = 0;\n  }\n  buildingCopy = progressEfficiency(buildingCopy, timeIntervalS);\n\n  buildingCopy.progress += timeIntervalS * buildingCopy.efficiency * EFFICIENCY_FACTOR;\n  if (buildingCopy.progress > buildingInfo.produceTime) {\n    buildingCopy.progress -= buildingInfo.produceTime;\n    let inboxCopy = Object.assign({}, buildingCopy.inbox);\n    let outboxCopy = Object.assign({}, buildingCopy.outbox);\n\n    for (let [ingredient, consumed] of Object.entries(buildingInfo.consumes)) {\n      inboxCopy[ingredient] -= consumed;\n    }\n\n    for (let [good, produced] of Object.entries(buildingInfo.produces)) {\n      outboxCopy[good] += produced;\n    }\n\n    buildingCopy.inbox = inboxCopy;\n    buildingCopy.outbox = outboxCopy;\n  }\n\n  return buildingCopy;\n}\n\nfunction canAfford(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  for (let [ingredient, consumed] of Object.entries(buildingInfo.consumes)) {\n    if (building.inbox[ingredient] < consumed) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction outboxHasRoom(building) {\n  const buildingInfo = BuildingDefinitions[building.buildingId];\n  for (let [good, produced] of Object.entries(buildingInfo.produces)) {\n    let outboxGood = building.outbox[good];\n    if (outboxGood + produced > BASE_IN_OUT_BOX_CAPACITY) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction progressEfficiency(building, timeIntervalS) {\n  building.efficiencyTimer += timeIntervalS;\n  if (building.efficiencyTimer > EFFICIENCY_TIMER) {\n    building.efficiencyTimer -= EFFICIENCY_TIMER;\n    if (building.efficiencySupplied) {\n      // efficiency going up\n      building.efficiency = Math.min(BASE_EFFICIENCY_MAXIMUM, building.efficiency + 1);\n    } else {\n      // efficiency going down\n      building.efficiency = Math.max(EFFICIENCY_MINIMUM, building.efficiency - 1);\n    }\n  }\n  return building;\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../data/building-definitions';\nimport { BASE_IN_OUT_BOX_CAPACITY } from './building';\n\nconst courierState = {\n  IDLE: 'IDLE',\n  PICKING_UP: 'PICKING_UP',\n  EN_ROUTE: 'EN_ROUTE',\n  DROPPING_OFF: 'DROPPING_OFF'\n}\n\nconst BASE_TRAVEL_TIME_SECONDS = 20;\nconst BASE_PICK_UP_DROP_OFF_TIME_SECONDS = 8;\n\nconst initCourier = {\n  status: courierState.IDLE,\n  progress: 0,\n  timeThreshold: 0,\n  jobDescription: {},\n  payload: {},\n  markedForDeath: false\n}\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  const couriers = state.couriers;\n  if (!couriers) {\n    return state;\n  }\n  switch(action.type) {\n    case gameActions.INIT:\n      const startingWarehouse = BuildingDefinitions[state.warehouse.type];\n      const courierArrayCopy = couriers.couriers.slice(0);\n      addCouriers(courierArrayCopy, startingWarehouse.couriers);\n      const courierObjCopy = Object.assign({}, couriers);\n      courierObjCopy.couriers = courierArrayCopy;\n      return Object.assign({}, state, {couriers: courierObjCopy});\n    case warehouseActions.UPGRADE_STOREHOUSE: {\n      const thisWarehouse = BuildingDefinitions[payload.toUpgrade.buildingId]\n      const nextWarehouse = BuildingDefinitions[thisWarehouse.upgradesTo];\n      const couriersToAdd = nextWarehouse.couriers - thisWarehouse.couriers;\n      const courierList = [...state.couriers.couriers];\n      addCouriers(courierList, couriersToAdd);\n      const courierState = {...state.couriers, couriers: courierList};\n      return {...state, couriers: courierState};\n    }\n    case warehouseActions.UPDGRADE_WAREHOUSE: {\n      const nextWarehouse = BuildingDefinitions[payload.toUpgrade].upgradesTo;\n      const courierList = [...state.couriers.couriers];\n      addCouriers(courierList, nextWarehouse.couriers);\n      const courierState = {...state.couriers, couriers: courierList};\n      return {...state, couriers: courierState};\n    }\n    case warehouseActions.BUILD_WAREHOUSE: {\n      const builtWarehouse = BuildingDefinitions[payload.toConstruct.id];\n      const addedCouriers = builtWarehouse.couriers;\n      const newState = Object.assign({}, state);\n      const newCouriers = Object.assign({}, newState.couriers);\n      newState.couriers = newCouriers;\n      const newArray = newCouriers.couriers.slice(0);\n      addCouriers(newArray, addedCouriers);\n      newCouriers.couriers = newArray;\n      return newState;\n    }\n    case constructionActions.DESTROY_BUILDING: {\n      const toDestroy = BuildingDefinitions[payload.toDestroy.buildingId];\n      if (toDestroy.category !== BUILDING_CATEGORY.WAREHOUSE) {\n        return state;\n      }\n\n      const courierList = [...state.couriers.couriers];\n      const couriers = {...state.couriers, couriers: courierList};\n      const newState = {...state, couriers: couriers};\n\n      const couriersToRemove = toDestroy.couriers;\n      let couriersRemoved = 0;\n\n      // try to find a courier that's idle\n      for (let courierIndex = 0; courierIndex < courierList.length; courierIndex++) {\n        const courier = courierList[courierIndex];\n        if (courier.status === courierState.IDLE && !courier.markmarkedForDeath) {\n          courierList.splice(courierIndex, 1);\n          couriersRemoved++;\n          if (couriersRemoved === couriersToRemove) {\n            return newState;\n          }\n        }\n      }\n\n      // if not, mark the last one for death that isn't already marked\n      for (let courierIndex = courierList.length-1; courierIndex >= 0; courierIndex--) {\n        const courier = courierList[courierIndex];\n        if (!courier.markmarkedForDeath) {\n          courier.markedForDeath = true;\n          couriersRemoved++;\n          if (couriersRemoved === couriersToRemove) {\n            return newState;\n          }\n        }\n      }\n\n      // no idle couriers, and all active ones are already marked for death so...uh...\n      return newState;\n    }\n    case gameActions.TICK: {\n      const stateCopy = Object.assign({}, state);\n      const couriersCopy = Object.assign({}, stateCopy.couriers);\n      const warehouse = Object.assign({}, stateCopy.warehouse);\n      const warehouseMax = warehouse.totalCapacity;\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const buildings = Object.assign({}, stateCopy.buildings);\n      const buildingRefCopy = Object.assign({}, buildings.owned);\n      buildings.owned = buildingRefCopy;\n      stateCopy.warehouse = warehouse;\n      stateCopy.buildings = buildings;\n      stateCopy.couriers = couriersCopy;\n\n      // add new jobs\n      const newJobs = findJobs(couriers, warehouse, buildingRefCopy);\n      let jobArrayCopy = couriers.jobQueue.slice(0).concat(newJobs.jobList);\n      const jobRefCopy = Object.assign({}, couriers.jobQueueMap, newJobs.jobRef);\n\n      // if any couriers are available, pick from the top of the queue\n      const courierListCopy = couriersCopy.couriers.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          const newCourier = Object.assign({}, courier);\n\n          let nextJobIndex = getNextAvailableJob(jobArrayCopy, buildingRefCopy);\n          const nextJob = jobArrayCopy[nextJobIndex];\n          jobArrayCopy = jobArrayCopy.slice(nextJobIndex+1);\n          if (!nextJob) {\n            return courier;\n          }\n\n          const pickupFromId = nextJob.from;\n          const deliverToId = nextJob.to;\n          const good = nextJob.carrying;\n          let pickupFrom = null;\n          let deliverTo = null;\n          let amount = 0;\n\n          if (pickupFromId !== 'warehouse') {\n            pickupFrom = buildings.owned[pickupFromId];\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (deliverToId !== 'warehouse') {\n            deliverTo = buildings.owned[deliverToId];\n          } else {\n            deliverTo = warehouse;\n          }\n\n          if (pickupFromId === 'warehouse') {\n            const inboxRoom = BASE_IN_OUT_BOX_CAPACITY - deliverTo.inbox[good];\n            const currentSupply = Math.floor(resources[good].owned - resources[good].reserved);\n            amount = Math.min(inboxRoom, currentSupply);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.reserved += amount;\n            resources[good] = resourceCopy;\n          } else {\n            const currentOutbox = pickupFrom.outbox[good];\n            const warehouseRoom = Math.floor(warehouseMax - resources[good].owned - resources[good].pending);\n            amount = Math.min(currentOutbox, warehouseRoom);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.pending += amount;\n            resources[good] = resourceCopy;\n          }\n\n          nextJob.amount = amount;\n\n          newCourier.status = courierState.PICKING_UP;\n          newCourier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n          newCourier.jobDescription = nextJob;\n\n          return newCourier;\n        } else {\n          return courier;\n        }\n      });\n\n      couriersCopy.jobQueue = jobArrayCopy;\n      couriersCopy.jobQueueMap = jobRefCopy;\n\n      // work the couriers already on the job (look into merging with the map function up above)\n      courierListCopy.forEach((courier) => {\n        if (courier.status === courierState.IDLE) {\n          return;\n        }\n\n        courier.progress += payload.tickIntervalSeconds;\n        if (courier.progress >= courier.timeThreshold) {\n          courier.progress -= courier.timeThreshold;\n          const jobDescription = courier.jobDescription;\n          const fromId = jobDescription.from;\n          const toId = jobDescription.to;\n          const product = jobDescription.carrying;\n          const amount = jobDescription.amount;\n          let pickupFrom = null;\n          let deliverTo = null;\n\n          if (fromId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(fromId)) {\n              pickupFrom = Object.assign({}, buildingRefCopy[fromId]);\n              buildingRefCopy[fromId] = pickupFrom;\n            }\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (toId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(toId)) {\n              deliverTo = Object.assign({}, buildingRefCopy[toId]);\n              buildingRefCopy[toId] = deliverTo;\n            }\n          } else {\n            deliverTo = warehouse;\n          }\n\n          switch (courier.status) {\n            case courierState.PICKING_UP: {\n              const payload = Object.assign({}, courier.payload);\n              courier.payload = payload;\n\n              if (fromId === 'warehouse') {\n                const resourceToTake = Object.assign({}, resources[product]);\n                resources[product] = resourceToTake;\n                resourceToTake.owned -= amount;\n                resourceToTake.reserved -= amount;\n                payload[product] = amount;\n              } else {\n                if (!pickupFrom) { // building got deleted...\n                  courier.payload = {};\n                  courier.status = courierState.IDLE;\n                  courier.jobDescription = {};\n                  courier.progress = 0;\n                  courier.timeThreshold = 0;\n\n                  delete jobRefCopy[courier.jobDescription.id];\n                  break;\n                }\n                const outbox = Object.assign({}, pickupFrom.outbox);\n                pickupFrom.outbox = outbox;\n                outbox[product] -= amount;\n                payload[product] = amount;\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.status = courierState.EN_ROUTE;\n              courier.timeThreshold = BASE_TRAVEL_TIME_SECONDS;\n              break;\n            }\n            case courierState.EN_ROUTE:\n              courier.status = courierState.DROPPING_OFF;\n              courier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n              break;\n            case courierState.DROPPING_OFF: {\n              // drop off goods\n              const payload = Object.assign({}, courier.payload);\n\n              if (toId === 'warehouse') {\n                const resourceToDeliver = Object.assign({}, resources[product]);\n                resources[product] = resourceToDeliver;\n                resourceToDeliver.owned += payload[product];\n                resourceToDeliver.pending -= amount;\n              } else {\n                if (!deliverTo) { // building got deleted...\n                  // return to warehouse\n                  const resourceToDeliver = Object.assign({}, resources[product]);\n                  resources[product] = resourceToDeliver;\n                  resourceToDeliver.owned += payload[product];\n                } else {\n                  const inbox = Object.assign({}, deliverTo.inbox);\n                  deliverTo.inbox = inbox;\n                  inbox[product] += amount;\n                }\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.payload = {};\n              courier.status = courierState.IDLE;\n              courier.jobDescription = {};\n              courier.progress = 0;\n              courier.timeThreshold = 0;\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      });\n\n      // check for any idle couriers marked for death\n      const killedCouriers = courierListCopy.filter((courier) => courier.status !== courierState.IDLE || !courier.markedForDeath);\n\n      couriersCopy.couriers = killedCouriers;\n\n      stateCopy.couriers = couriersCopy;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n}\n\nfunction addCouriers(courierArray, numToAdd) {\n  for (let i=0; i<numToAdd; i++) {\n    const newCourier = Object.assign({}, initCourier, {id: uuidv4()});\n    courierArray.push(newCourier);\n  }\n}\n\nconst SUPPLY_SUFFIX = '_SUPPLY';\nconst PICKUP_SUFFIX = '_PICKUP';\nfunction findJobs(courier, warehouse, buildings) {\n  const existingJobs = courier.jobQueueMap;\n  const warehouseMax = warehouse.totalCapacity;\n  const resources = warehouse.resources;\n\n  // check buildings that need input fed\n  const supplies = {\n    jobList: [],\n    jobRef: {}\n  }\n  for (let building of Object.values(buildings)) {\n    const buildingInfo = BuildingDefinitions[building.buildingId];\n    if (buildingInfo.category !== BUILDING_CATEGORY.PRODUCER) {\n      continue;\n    }\n    for (let [ingredient, amount] of Object.entries(building.inbox)) {\n      const supplyKey = building.id + '_' + ingredient + '_' + SUPPLY_SUFFIX;\n      if (amount < BASE_IN_OUT_BOX_CAPACITY && !existingJobs[supplyKey]) {\n        const resource = resources[ingredient];\n        const supplyRemaining = Math.floor(resource.owned - resource.reserved);\n        if (supplyRemaining > 0) {\n          const newJob = {\n            id: supplyKey,\n            from: 'warehouse',\n            to: building.id,\n            carrying: ingredient\n          };\n          supplies.jobList.push(newJob);\n          supplies.jobRef[supplyKey] = newJob;\n        }\n      }\n    }\n  }\n\n  // check buildings that need outbox picked up\n  const pickups = Object.values(buildings).reduce((accumulator, building) => {\n    const buildingInfo = BuildingDefinitions[building.buildingId];\n    if (buildingInfo.category !== BUILDING_CATEGORY.PRODUCER) {\n      return accumulator;\n    }\n    for (let [product, amount] of Object.entries(building.outbox)) {\n      const pickupKey = building.id + PICKUP_SUFFIX;\n      if (amount > 0 && !existingJobs[pickupKey]) {\n        const resource = resources[product];\n        const spaceRemaining = Math.floor(warehouseMax - resource.owned - resource.pending);\n        if (spaceRemaining > 0) {\n          const newJob = {\n            id: pickupKey,\n            from: building.id,\n            to: 'warehouse',\n            carrying: product\n          };\n          accumulator.jobList.push(newJob);\n          accumulator.jobRef[pickupKey] = newJob;\n        }\n      }\n    }\n    return accumulator;\n  }, {jobList: [], jobRef: {}});\n\n  const jobList = supplies.jobList.concat(pickups.jobList);\n  const jobRefs = Object.assign({}, supplies.jobRef, pickups.jobRef);\n  return {jobList: jobList, jobRef: jobRefs}; // TODO, this will need to be changed to include supply jobs\n}\n\n// The way a job is invalid is if one of the buildings has since been destroyed\nfunction getNextAvailableJob(jobArray, buildings) {\n  for (let jobIndex = 0; jobIndex < jobArray.length; jobIndex++) {\n    const nextJob = jobArray[jobIndex];\n\n    const pickupFromId = nextJob.from;\n    const deliverToId = nextJob.to;\n\n    if (pickupFromId !== 'warehouse' && !buildings.hasOwnProperty(pickupFromId)) {\n      continue;\n    }\n\n    if (deliverToId !== 'warehouse' && !buildings.hasOwnProperty(deliverToId)) {\n      continue;\n    }\n\n    return jobIndex;\n  }\n}\n","import { ACTIONS } from '../actions/housing';\nimport BuildingDefinitions from '../data/building-definitions';\n\nconst initHouseState = {\n  popProgress: 0,\n  currentPop: 1\n};\n\nconst ascensionFactors = {\n  peasanthouse: .8,\n  citizenhouse: .6,\n  patrician: .4,\n  noblehouse: 0\n}\n\n// precomputed list of current house and up because I'm lazy\nconst rightsLists = {\n  peasanthouse: ['peasanthouse', 'citizenhouse', 'patricianhouse', 'noblehouse'],\n  citizenhouse: ['citizenhouse', 'patricianhouse', 'noblehouse'],\n  patricianhouse: ['patricianhouse', 'noblehouse'],\n  noblehouse: ['noblehouse']\n}\n\nexport default function(housing = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUILD_HOUSE: {\n      const newState = Object.assign({}, housing);\n      const types = Object.assign({}, newState.types);\n      const abodes = newState.abodes.slice(0);\n      newState.types = types;\n      newState.abodes = abodes;\n\n      const toBuild = payload.toConstruct.id; // should really just be peasanthouse\n      const type = Object.assign({}, types[toBuild]);\n      types[toBuild] = type;\n      const houseData = BuildingDefinitions[toBuild];\n      const abode = {...initHouseState, houseId: toBuild, populationCap: houseData.populationCap};\n\n      type.owned += 1;\n      abodes.push(abode);\n\n      calculateAscensionRights(types, type, toBuild);\n\n      return newState;\n    }\n    case ACTIONS.ASCEND_HOUSE: {\n      const fromHouseId = payload.fromHouse;\n      const toHouseId = BuildingDefinitions[fromHouseId].ascendsTo;\n\n      const fromType = {...housing.types[fromHouseId]};\n      const toType = {...housing.types[toHouseId]};\n      const types = {...housing.types, [fromHouseId]: fromType, [toHouseId]: toType};\n      const abodes = [...housing.abodes];\n      const newState = {...housing, types: types, abodes: abodes};\n      const nextHouse = BuildingDefinitions[toHouseId];\n\n      // find the first house that's able to be ascended\n      const ascendIndex = abodes.findIndex((house) => house.houseId === fromHouseId);\n      abodes.splice(ascendIndex, 1);\n      abodes.push({...nextHouse, ...initHouseState, houseId: toHouseId});\n      fromType.owned -= 1;\n      toType.owned += 1;\n\n      calculateAscensionRights(types, fromType, fromHouseId);\n      calculateAscensionRights(types, toType, toHouseId);\n\n      return newState;\n    }\n    default:\n      return housing;\n  }\n};\n\nfunction calculateAscensionRights(allTypes, type, toCheck) {\n  const totalHouses = rightsLists[toCheck].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.totalAscensionRights = Math.floor(ascensionFactors[toCheck] * totalHouses);\n  const ascendTo = BuildingDefinitions[toCheck].ascendsTo;\n  const alreadyAscended = rightsLists[ascendTo].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.remainingAscensionRights = type.totalAscensionRights - alreadyAscended;\n}\n","import { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport BuildingDefinitions from '../data/building-definitions';\n\nconst POP_ASCENSION_HAPPINESS_THRESHOLD = 97;\n\nconst initValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  canAscend: false,\n  consumeInfo: ''\n}\n\nconst beggarValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  unhoused: 0,\n  beggarTimer: 0\n}\n\nexport default function(populationState = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.INIT: {\n      const newState = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(newState)) {\n        if (popType === 'beggar') {\n          newState[popType] = {...beggarValues, ...pop};\n        } else {\n          const newPop = Object.assign({}, pop, initValues);\n          newState[popType] = newPop;\n        }\n      }\n\n      return newState;\n    }\n    case housingActions.BUILD_HOUSE: {\n      const houseBuilt = BuildingDefinitions[payload.toConstruct.id];\n      const newState = Object.assign({}, populationState);\n\n      const modifiedPop = Object.assign({}, newState[houseBuilt.populationCategory]);\n      newState[modifiedPop.id] = modifiedPop;\n\n      modifiedPop.maxPopulation += houseBuilt.populationCap;\n\n      return newState;\n    }\n    case gameActions.TICK: {\n      const population = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(population)) {\n        if (pop.happiness > POP_ASCENSION_HAPPINESS_THRESHOLD && pop.owned === pop.maxPopulation) {\n          population[popType] = { ...pop, canAscend: true };\n        } else {\n          population[popType] = { ...pop, canAscend: false}\n        }\n      }\n\n      return population;\n    }\n    case housingActions.ASCEND_HOUSE: {\n      const currentHouse = BuildingDefinitions[payload.fromHouse];\n      const nextHouse = BuildingDefinitions[currentHouse.ascendsTo];\n\n      const oldPop = {...populationState[currentHouse.populationCategory]};\n      const nextPop = {...populationState[nextHouse.populationCategory]};\n\n      oldPop.owned -= currentHouse.populationCap;\n      nextPop.owned += currentHouse.populationCap;\n      oldPop.maxPopulation -= currentHouse.populationCap;\n      nextPop.maxPopulation += nextHouse.populationCap;\n\n      const newState = {...populationState, [currentHouse.populationCategory]: oldPop, [nextHouse.populationCategory]: nextPop};\n\n      // adjust max beggar population\n      const maxBeggars = calculateBeggarCount(newState);\n      newState['beggar'] = {...newState['beggar'], maxPopulation: maxBeggars};\n\n      return newState;\n    }\n    default:\n      return populationState;\n  }\n};\n\nfunction calculateBeggarCount(population) {\n  return Math.floor(population['citizen'].maxPopulation * 0.1 +\n                    population['patrician'].maxPopulation * 0.2 +\n                    population['noble'].maxPopulation * 0.3);\n}\n","// this could probably be done with thunk instead\nimport { ACTIONS } from '../actions/game';\nimport Buildings, { BUILDING_CATEGORY } from '../data/building-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const buildings = state.buildings;\n\n      const amenities = {};\n      for (let building of Object.values(buildings.owned)) {\n        const buildingInfo = Buildings[building.buildingId];\n        if (buildingInfo.category !== BUILDING_CATEGORY.AMENITY) {\n          continue;\n        }\n\n        for (let [amenity, amount] of Object.entries(buildingInfo.produces)) {\n          if (!amenities[amenity]) {\n            amenities[amenity] = 0;\n          }\n\n          amenities[amenity] += amount * timeIntervalS * TIME_FACTOR;\n        }\n      }\n\n      newState.amenities = amenities;\n      return newState;\n    default:\n      return state;\n  }\n}\n","const PopulationDefinitions = {\n  beggar: {\n    name: 'Beggar',\n    taxRate: 0,\n    consumes: {\n      fish: {\n        quantity: .7,\n        weight: 0\n      },\n      cider: {\n        quantity: .3,\n        weight: 0\n      }\n    }\n  },\n  peasant: {\n    name: 'Peasant',\n    taxRate: 0.8,\n    consumes: {\n      community: {\n        quantity: 1,\n        weight: 25\n      },\n      fish: {\n        quantity: 1,\n        weight: 25\n      },\n      cider: {\n        quantity: 0.44,\n        weight: 25\n      },\n      faith: {\n        quantity: 1,\n        weight: 25\n      }\n    }\n  },\n  citizen: {\n    name: 'Citizen',\n    taxRate: 0.95,\n    consumes: {\n      fish: {\n        quantity: .4,\n        weight: 8\n      },\n      spice: {\n        quantity: .4,\n        weight: 12\n      },\n      cider: {\n        quantity: .44,\n        weight: 16\n      },\n      linen: {\n        quantity: 0.42,\n        weight: 16\n      },\n      community: {\n        quantity: 1,\n        weight: 16\n      },\n      faith: {\n        quantity: 1,\n        weight: 16\n      },\n      entertainment: {\n        quantity: 1,\n        weight: 16\n      }\n    }\n  },\n  patrician: {\n    name: 'Patrician',\n    taxRate: 1.05,\n    consumes: {\n      fish: {\n        quantity: .22,\n        weight: 2.8\n      },\n      spice: {\n        quantity: .22,\n        weight: 4.9\n      },\n      bread: {\n        quantity: .55,\n        weight: 6.3\n      },\n      cider: {\n        quantity: .23,\n        weight: 4\n      },\n      ale: {\n        quantity: .24,\n        weight: 9\n      },\n      linen: {\n        quantity: .19,\n        weight: 4.5\n      },\n      leather: {\n        quantity: .28,\n        weight: 8.5\n      },\n      community: {\n        quantity: 1,\n        weight: 12\n      },\n      faith: {\n        quantity: 1,\n        weight: 12\n      },\n      entertainment: {\n        quantity: 1,\n        weight: 12\n      },\n      book: {\n        quantity: .16,\n        weight: 12\n      },\n      security: {\n        quantity: 1,\n        weight: 12\n      }\n    }\n  },\n  noble: {\n    name: 'Noble',\n    taxRate: 1.15,\n    consumes: {}\n  }\n};\n\nexport default PopulationDefinitions;\n","import { ACTIONS } from '../actions/game';\nimport PopulationDefinitions from '../data/population-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\nconst CONSUME_FACTOR = 1 / 100.0;\nconst MIN_HAPPINESS_DELTA = 0.001;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const amenities = newState.amenities;\n      const population = Object.assign({}, newState.population);\n      newState.warehouse = warehouse;\n      newState.population = population;\n\n      for (const [popType, popOriginal] of Object.entries(state.population)) {\n        const pop = Object.assign({}, popOriginal);\n        pop.consumeInfo = null;\n        let currentHappiness = 0;\n        if (popOriginal.owned !== 0) {\n          for (const [product, consumeInfo] of Object.entries(PopulationDefinitions[popType].consumes)) {\n            const consumed = consumeInfo.quantity * pop.owned * timeIntervalS * TIME_FACTOR * CONSUME_FACTOR;\n            let pctSatisfied = 1;\n\n            if (amenities[product]) {\n              if (amenities[product] < consumed) {\n                pctSatisfied = amenities[product] / consumed;\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              amenities[product] -= consumed;\n              if (amenities[product] < 0) {\n                amenities[product] = 0;\n              }\n            } else if (resources[product]) {\n              const resource = Object.assign({}, resources[product]);\n              resources[product] = resource;\n\n              if (resource.owned < consumed) {\n                pctSatisfied = resource.owned / consumed\n                if (!pop.consumeInfo) {\n                  pop.consumeInfo = 'Need ' + product;\n                }\n              }\n              resource.owned -= consumed;\n              if (resource.owned < 0) {\n                resource.owned = 0;\n              }\n            } else {\n              pctSatisfied = 0;\n              if (!pop.consumeInfo) {\n                pop.consumeInfo = 'Need ' + product;\n              }\n            }\n\n            currentHappiness += consumeInfo.weight * pctSatisfied;\n          }\n        }\n\n        let happinessDiff = (currentHappiness - pop.happiness) / 100.0;\n        if (Math.abs(happinessDiff) < MIN_HAPPINESS_DELTA) {\n          happinessDiff = MIN_HAPPINESS_DELTA;\n        }\n        pop.happiness += happinessDiff;\n        population[popType] = pop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import rn from 'random-number';\n\nimport { ACTIONS } from '../actions/game';\nimport Buildings from '../data/building-definitions';\n\nconst POP_GROWTH_TIME_SECONDS = 10;\nconst POP_GROWTH_THRESHOLD = 40;\nconst POP_DECLINE_THRESHOLD = 20;\nconst BEGGAR_ARRIVAL_TIMER = 1200; // 20 minutes\nconst BEGGAR_ARRIVAL_MIN = 20;\nconst BEGGAR_ARRIVAL_MAX = 200;\n\nexport default function(state = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const houses = Object.assign({}, newState.housing);\n      const population = Object.assign({}, newState.population);\n      newState.housing = houses;\n      newState.population = population;\n\n      const populationCounts = {};\n      // go house by house, increment growth timer\n      const newAbodes = houses.abodes.map((abodeOriginal) => {\n        const abode = Object.assign({}, abodeOriginal);\n        const curHappiness = population[Buildings[abode.houseId].populationCategory].happiness;\n        let growthFactor = 0;\n\n        if (curHappiness >= POP_GROWTH_THRESHOLD && abode.currentPop < abode.populationCap) {\n          growthFactor = 1;\n        }\n        if (curHappiness <= POP_DECLINE_THRESHOLD && abode.currentPop > 0) {\n          growthFactor = -1;\n        }\n\n        abode.popProgress += timeIntervalS * growthFactor;\n        if (abode.popProgress > POP_GROWTH_TIME_SECONDS || abode.popProgress < -POP_GROWTH_TIME_SECONDS) {\n          abode.popProgress -= POP_GROWTH_TIME_SECONDS * growthFactor;\n          abode.currentPop += growthFactor;\n        }\n\n        if (abode.currentPop < 1) {\n          abode.currentPop = 1;\n        }\n\n        const popCategory = Buildings[abode.houseId].populationCategory;\n        if (!populationCounts[popCategory]) {\n          populationCounts[popCategory] = 0;\n        }\n\n        populationCounts[popCategory] += abode.currentPop;\n\n        return abode;\n      });\n      houses.abodes = newAbodes;\n\n      for (let [popType, popCount] of Object.entries(populationCounts)) {\n        const newPop = Object.assign({}, population[popType]);\n        newPop.owned = popCount;\n        population[popType] = newPop;\n      }\n\n      // Increment beggar timer\n      const beggar = {...population['beggar']};\n      if (beggar.owned < beggar.maxPopulation) {\n        beggar.beggarTimer += timeIntervalS;\n        if (beggar.beggarTimer > BEGGAR_ARRIVAL_TIMER) {\n          beggar.beggarTimer -= BEGGAR_ARRIVAL_TIMER;\n          const incomingBeggars = getIncomingBeggars(beggar.maxPopulation - beggar.owned);\n          beggar.owned += incomingBeggars;\n        }\n      }\n      population['beggar'] = beggar;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n\nfunction getIncomingBeggars(beggarDeficit) {\n  const lowerBound = Math.max(beggarDeficit, BEGGAR_ARRIVAL_MIN);\n  const upperBound = Math.min(lowerBound, BEGGAR_ARRIVAL_MAX);\n\n  return rn({min: lowerBound, max: upperBound, integer: true});\n}\n","import { ACTIONS } from '../actions/game';\nimport BuildingDefinitions from '../data/building-definitions';\nimport PopulationDefinitions from '../data/population-definitions';\n\nconst TIME_FACTOR = 1/60.0;\nconst TAX_HAPPINESS_FACTOR = 1 / 100.0;\nconst TAX_HAPPINESS_MINIMUM = 0.01;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      const gold = Object.assign({}, resources.gold);\n      newState.warehouse = warehouse;\n      warehouse.resources = resources;\n      resources.gold = gold;\n\n      const financeInfo = {\n        maintenanceCost: 0,\n        taxRevenue: 0\n      }\n\n      // start with Warehouse maintenance\n      const warehouseMaintenance = BuildingDefinitions[warehouse.type].upkeep * timeIntervalS * TIME_FACTOR;\n      const totalMaintenance = Object.values(state.buildings.owned).reduce((sum, building) => {\n        let upkeep = building.enabled ?\n          BuildingDefinitions[building.buildingId].upkeep :\n          BuildingDefinitions[building.buildingId].disabledUpkeep;\n        return sum + (upkeep * timeIntervalS * TIME_FACTOR);\n      }, warehouseMaintenance);\n\n      const totalTaxes = Object.values(state.population).reduce((sum, population) => {\n        let happinessFactor = population.happiness * TAX_HAPPINESS_FACTOR;\n        if (happinessFactor < TAX_HAPPINESS_MINIMUM) {\n          happinessFactor = TAX_HAPPINESS_MINIMUM;\n        }\n        return sum + (PopulationDefinitions[population.id].taxRate * population.owned * timeIntervalS * TIME_FACTOR * happinessFactor);\n      }, 0);\n\n      financeInfo.maintenanceCost = totalMaintenance;\n      financeInfo.taxRevenue = totalTaxes;\n      newState.financeInfo = financeInfo;\n\n      gold.owned = gold.owned + totalTaxes - totalMaintenance;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","export const unlockThresholds = [\n  ['peasant', 60],\n  ['peasant', 90],\n  ['citizen', 1],\n  ['citizen', 240],\n  ['citizen', 355],\n  ['patrician', 1],\n  ['patrician', 510],\n  ['patrician', 690],\n  ['patrician', 940],\n  ['patrician', 1190],\n  ['noble', 950],\n  ['noble', 2200],\n  ['noble', 3500],\n  ['noble', 7500]\n];\n\nexport const unlocks = [\n  // initial state\n  {\n    title: 'Small Settlement',\n    buildings: ['marketplace', 'fishinghut', 'lumberjackhut'],\n    population: 'peasant',\n    resources: ['gold', 'wood', 'tool', 'fish']\n  },\n  // 60 peasants\n  {\n    buildings: ['orchard', 'ciderfarm'],\n    resources: ['apple', 'cider']\n  },\n  // 90 peasants\n  {\n    title: 'Settlement',\n    buildings: ['chapel']\n  },\n  // 1 citizen\n  {\n    population: 'citizen',\n    resources: ['hemp', 'linen', 'stone', 'spice'],\n    buildings: ['hempfarm', 'weavers', 'stonemason'],\n    housing: ['citizenhouse']\n  },\n  // 240 citizen\n  {\n    resources: ['ore', 'charcoal', 'iron', 'rope'],\n    buildings: ['oremine', 'charcoalhut', 'smelter', 'toolmaker', 'ropeyard', 'smallshipyard']\n  },\n  // 355 citizen\n  {\n    title: 'Village',\n    buildings: ['smallstorehouse', 'repaircrane', 'tavern', 'alms']\n  },\n  // 1 patrician\n  {\n    population: 'patrician',\n    resources: ['wheat', 'flour', 'bread', 'weapon'],\n    buildings: ['wheatfield', 'mill', 'bakery', 'weaponsmith', 'largeshipyard'],\n    housing: ['patricianhouse']\n  },\n  // 510 patrician\n  {\n    title: 'Small Town',\n    resources: ['hop', 'ale', 'potash', 'quartz', 'glass'],\n    buildings: ['hopsfield', 'brewery', 'potashpit', 'glasssmelter', 'church']\n  },\n  // 690 patrician\n  {\n    resources: ['brine', 'salt', 'hide', 'leather'],\n    buildings: ['saltmine', 'saltworks', 'pigfarm', 'tannery']\n  },\n  // 940 patrician\n  {\n    resources: ['paper', 'book', 'ink'],\n    buildings: ['papermill', 'printingpress']\n  },\n  // 1190 patrician\n  {\n    title: 'City',\n    buildings: ['prison']\n  },\n  // 950 noble\n  {\n    title: 'Major City'\n  },\n  // 2200 noble\n  {\n    title: 'Commercial Center'\n  },\n  // 3500 noble\n  {\n    title: 'Metropolis'\n  },\n  // 7500 noble\n  {\n    title: 'Cosmopolitan City'\n  }\n];\n","import { ACTIONS } from '../actions/game';\nimport { unlockThresholds, unlocks } from '../data/level-up-definitions'\n\nexport default function(state = {}, action) {\n  switch (action.type) {\n    case ACTIONS.TICK: {\n      const [unlockPopType, popRequired] = unlockThresholds[state.island.level - 1];\n      const currentPop = state.population[unlockPopType].owned;\n      if (currentPop >= popRequired) {\n        const newState = Object.assign({}, state);\n        const island = Object.assign({}, newState.island);\n        newState.island = island;\n        island.level++;\n\n        const unlocked = unlocks[island.level - 1];\n        if (unlocked.title) {\n          island.title = unlocked.title;\n        }\n        if (unlocked.buildings) {\n          const constructions = Object.assign({}, newState.construction);\n          newState.construction = constructions;\n          unlocked.buildings.forEach(conId => {\n            const construction = Object.assign({}, constructions[conId]);\n            construction.unlocked = true;\n            constructions[conId] = construction;\n          });\n        }\n        if (unlocked.resources) {\n          const warehouse = Object.assign({}, newState.warehouse);\n          const resources = Object.assign({}, warehouse.resources);\n          newState.warehouse = warehouse;\n          warehouse.resources = resources;\n          unlocked.resources.forEach(resId => {\n            const resource = Object.assign({}, resources[resId]);\n            resources[resId] = resource;\n            resource.unlocked = true;\n          });\n        }\n        if (unlocked.population) {\n          const population = Object.assign({}, newState.population);\n          newState.population = population;\n          const popUnlocked = Object.assign({}, population[unlocked.population]);\n          popUnlocked.unlocked = true;\n          population[unlocked.population] = popUnlocked;\n        }\n        if (unlocked.housing) {\n          const types = {...newState.housing.types}\n          const housing = {...newState.housing, types: types};\n          newState.housing = housing;\n          unlocked.housing.forEach(houseId => {\n            const unlockedHouse = {...types[houseId], unlocked: true};\n            types[houseId] = unlockedHouse;\n          });\n        }\n\n        return newState;\n      }\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","export const ACTIONS = {\n  SET_TIME_FACTOR: 'SET_TIME_FACTOR'\n}\n\nexport function setTimeFactor(timeFactor) {\n  return { type: ACTIONS.SET_TIME_FACTOR, payload: { timeFactor: timeFactor }};\n}\n","import { ACTIONS } from '../actions/cheats';\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.SET_TIME_FACTOR:\n      return {\n        ...state,\n        cheat: {\n          timeFactor: payload.timeFactor\n        }\n      }\n    default:\n      return state;\n  }\n}\n","const Traders = {\n  lord: {\n    name: 'Lord Farquaad',\n    rates: {\n      wood: {\n        buy: .5,\n        sell: 1.2\n      },\n      tool: {\n        buy: .5,\n        sell: 1.2\n      },\n      stone: {\n        buy: .5,\n        sell: 1.2\n      },\n      spice: {\n        buy: 1,\n        sell: 0\n      }\n    },\n    baseCapacity: 30\n  },\n  prince: {\n    name: 'Prince Ali',\n    rates: {\n      wood: {\n        buy: 1,\n        sell: 1\n      },\n      tool: {\n        buy: 1,\n        sell: 1.2\n      },\n      spice: {\n        buy: 0,\n        sell: 1.25\n      }\n    },\n    baseCapacity: 40\n  }\n};\n\nexport default Traders;\n","import { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS } from '../actions/trade';\nimport Traders from '../data/trader-info';\nimport ResourceDefinitions from '../data/resource-definitions';\n\nconst BASE_TRADER_STAY_TIME_SECONDS = 360;\nconst BASE_TRADER_VACANCY_TIME_SECONDS = 180;\nconst BASE_DISMISS_COST = 100;\n\nconst INIT_STATE = {\n  traderId: 0,\n  timer: 0,\n  timeToLeave: BASE_TRADER_STAY_TIME_SECONDS,\n  wares: {},\n  newGame: true,\n  dismissCost: BASE_DISMISS_COST\n};\n\nexport default function(trader=INIT_STATE, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUY_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held -= amount;\n\n      return newState;\n    }\n    case ACTIONS.SELL_GOODS: {\n      const toBuy = payload.product;\n      const amount = payload.amount;\n      const wares = {...trader.wares};\n      const newState = {...trader, wares: wares};\n\n      wares[toBuy].held += amount;\n\n      return newState;\n    }\n    case gameActions.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = {...trader};\n      newState.timer += timeIntervalS;\n      if (newState.timer > newState.timeToLeave) {\n        newState.timer -= newState.timeToLeave;\n        return newTrader(newState);\n      }\n      return newState;\n    case ACTIONS.DISMISS_TRADER: {\n      const newState = {...trader};\n      newState.traderId = 0;\n      newState.wares = {};\n      newState.time = 0;\n      newState.timeToLeave = BASE_TRADER_VACANCY_TIME_SECONDS;\n      return newState;\n    }\n    default:\n      return trader;\n  }\n};\n\nfunction newTrader(currentState) { // atm, more like \"restock goods\"\n  const traders = Object.keys(Traders);\n  let selectedTrader = traders[Math.floor(Math.random() * traders.length)];\n  if (currentState.newGame) {\n    currentState.newGame = false;\n    selectedTrader = 'lord';\n  }\n  const traderInfo = Traders[selectedTrader];\n  const wares = {};\n  const maxCapacity = traderInfo.baseCapacity;\n  const timeToLeave = BASE_TRADER_STAY_TIME_SECONDS;\n  const newState = {\n    ...currentState,\n    traderId: selectedTrader,\n    wares: wares,\n    maxCapacity: maxCapacity,\n    timeToLeave: timeToLeave\n  };\n\n  for (let [good, rates] of Object.entries(traderInfo.rates)) {\n    const goodBasePrice = ResourceDefinitions[good].baseTradePrice;\n    const buyPrice = rates.buy * goodBasePrice;\n    const sellPrice = rates.sell * goodBasePrice;\n\n    wares[good] = {\n      buyPrice: buyPrice,\n      sellPrice: sellPrice,\n      held: 0\n    }\n    if (sellPrice > 0) {\n      wares[good].held = Math.floor(maxCapacity * 0.75);\n    }\n  }\n\n  return newState;\n}\n","const INITIAL_STATE = {\n  island: {\n    level: 1,\n    title: 'Small Settlement',\n    name: 'New Island'\n  },\n  construction: {\n    peasanthouse: {\n      id: 'peasanthouse',\n      owned: 0,\n      cost: {\n        wood: 2\n      },\n      unlocked: true\n    },\n    marketplace: {\n      id: 'marketplace',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      },\n      unlocked: true\n    },\n    fishinghut: {\n      id: 'fishinghut',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 3,\n        tool: 2\n      },\n      unlocked: true\n    },\n    lumberjackhut: {\n      id: 'lumberjackhut',\n      owned: 0,\n      cost: {\n        gold: 50,\n        tool: 2\n      },\n      unlocked: true\n    },\n    smallstockpile: {\n      id: 'smallstockpile',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 2,\n        tool: 3\n      },\n      unlocked: true\n    },\n    orchard: {\n      id: 'orchard',\n      owned: 0,\n      cost: {\n        gold: 25\n      },\n      unlocked: false\n    },\n    ciderfarm: {\n      id: 'ciderfarm',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 5,\n        tool: 1\n      },\n      unlocked: false\n    },\n    chapel: {\n      id: 'chapel',\n      owned: 0,\n      cost: {\n        gold: 800,\n        wood: 12,\n        tool: 5\n      },\n      unlocked: false\n    },\n    hempfarm: {\n      id: 'hempfarm',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 2\n      },\n      unlocked: false\n    },\n    weavers: {\n      id: 'weavers',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      }\n    },\n    stonemason: {\n      id: 'stonemason',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    },\n    oremine: {\n      id: 'oremine',\n      owned: 0,\n      cost: {\n        gold: 900,\n        wood: 12,\n        tool: 2,\n        stone: 2\n      }\n    },\n    charcoalhut: {\n      id: 'charcoalhut',\n      owned: 0,\n      cost: {\n        gold: 250,\n        wood: 3,\n        tool: 2,\n        stone: 2\n      }\n    },\n    smelter: {\n      id: 'smelter',\n      owned: 0,\n      cost: {\n        gold: 600,\n        wood: 10,\n        tool: 5,\n        stone: 2\n      }\n    },\n    toolmaker: {\n      id: 'toolmaker',\n      owned: 0,\n      cost: {\n        gold: 500,\n        wood: 8,\n        tool: 5,\n        stone: 2\n      }\n    },\n    ropeyard: {\n      id: 'ropeyard',\n      owned: 0,\n      cost: {\n        gold: 700,\n        wood: 12,\n        tool: 5\n      }\n    },\n    smallshipyard: {\n      id: 'smallshipyard',\n      owned: 0,\n      cost: {\n        gold: 680,\n        wood: 10,\n        tool: 5,\n        stone: 4\n      }\n    },\n    smallstorehouse: {\n      id: 'smallstorehouse',\n      owned: 0,\n      cost: {\n        gold: 1020,\n        wood: 4,\n        tool: 4,\n        stone: 1\n      }\n    },\n    repaircrane: {\n      id: 'repaircrane',\n      owned: 0,\n      cost: {\n        gold: 1020,\n        wood: 5,\n        tool: 5,\n        stone: 9\n      }\n    },\n    // defensetower: {\n    //   id: 'defensetower',\n    //   owned: 0,\n    //   cost: {\n    //     gold: 1520,\n    //     wood: 2,\n    //     tool: 8,\n    //     stone: 12\n    //   }\n    // },\n    // carpenter: {\n    //   id: 'carpenter',\n    //   owned: 0,\n    //   cost: {\n    //     gold: 200,\n    //     wood: 5,\n    //     tool: 5\n    //   }\n    // },\n    // firestation: {\n    //   id: 'firestation',\n    //   owned: 0,\n    //   cost: {\n    //     gold: 1000,\n    //     wood: 5,\n    //     tool: 5,\n    //     stone: 10\n    //   }\n    // },\n    tavern: {\n      id: 'tavern',\n      owned: 0,\n      cost: {\n        gold: 1000,\n        tool: 5,\n        stone: 10\n      }\n    },\n    alms: {\n      id: 'alms',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 5,\n        tool: 5\n      }\n    },\n    wheatfield: {\n      id: 'wheatfield',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 3,\n        tool: 2\n      }\n    },\n    mill: {\n      id: 'mill',\n      owned: 0,\n      cost: {\n        gold: 800,\n        wood: 8,\n        tool: 4,\n        stone: 4\n      }\n    },\n    bakery: {\n      id: 'bakery',\n      owned: 0,\n      cost: {\n        gold: 700,\n        wood: 5,\n        tool: 5,\n        stone: 5\n      }\n    },\n    weaponsmith: {\n      id: 'weaponsmith',\n      owned: 0,\n      cost: {\n        gold: 1500,\n        wood: 3,\n        tool: 5,\n        stone: 10\n      }\n    },\n    largeshipyard: {\n      id: 'largeshipyard',\n      owned: 0,\n      cost: {\n        gold: 2120,\n        wood: 20,\n        tool: 25,\n        stone: 46\n      }\n    },\n    hopsfield: {\n      id: 'hopsfield',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 5,\n        tool: 2,\n        stone: 4\n      }\n    },\n    brewery: {\n      id: 'brewery',\n      owned: 0,\n      cost: {\n        gold: 600,\n        wood: 5,\n        tool: 4,\n        stone: 6\n      }\n    },\n    potashpit: {\n      id: 'potashpit',\n      owned: 0,\n      cost: {\n        gold: 500,\n        wood: 6,\n        tool: 4,\n        stone: 8\n      }\n    },\n    glasssmelter: {\n      id: 'glasssmelter',\n      owned: 0,\n      cost: {\n        gold: 1200,\n        wood: 10,\n        tool: 5,\n        stone: 12\n      }\n    },\n    church: {\n      id: 'church',\n      owned: 0,\n      cost: {\n        gold: 5000,\n        wood: 30,\n        tool: 10,\n        stone: 40,\n        glass: 25\n      }\n    },\n    saltmine: {\n      id: 'saltmine',\n      owned: 0,\n      cost: {\n        gold: 800,\n        wood: 11,\n        tool: 4,\n        stone: 5\n      }\n    },\n    saltworks: {\n      id: 'saltworks',\n      owned: 0,\n      cost: {\n        gold: 900,\n        wood: 3,\n        tool: 5,\n        stone: 6\n      }\n    },\n    pigfarm: {\n      id: 'pigfarm',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 4,\n        tool: 4,\n        stone: 3\n      }\n    },\n    tannery: {\n      id: 'tannery',\n      owned: 0,\n      cost: {\n        gold: 700,\n        wood: 7,\n        tool: 3,\n        stone: 8\n      }\n    },\n    papermill: {\n      id: 'papermill',\n      owned: 0,\n      cost: {\n        gold: 1500,\n        wood: 5,\n        tool: 5,\n        stone: 12\n      }\n    },\n    printingpress: {\n      id: 'printingpress',\n      owned: 0,\n      cost: {\n        gold: 1800,\n        wood: 5,\n        tool: 5,\n        stone: 12,\n        glass: 10\n      }\n    },\n    prison: {\n      id: 'prison',\n      owned: 0,\n      cost: {\n        gold: 7000,\n        wood: 20,\n        tool: 30,\n        stone: 60,\n        glass: 24\n      }\n    }\n\n  },\n  buildings: {\n    owned: {}\n  },\n  warehouse: {\n    type: 'smallwarehouse',\n    totalCapacity: 40,\n    resources: {\n      gold: {\n        id: 'gold',\n        owned: 5000,\n        unlocked: true\n      },\n      tool: {\n        id: 'tool',\n        owned: 40,\n        unlocked: true\n      },\n      fish: {\n        id: 'fish',\n        owned: 2,\n        unlocked: true\n      },\n      wood: {\n        id: 'wood',\n        owned: 40,\n        unlocked: true\n      }\n    },\n  },\n  couriers: {\n    couriers:[],\n    jobQueue: [],\n    jobQueueMap: {}\n  },\n  housing: {\n    types: {\n      peasanthouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: true,\n      },\n      citizenhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      patricianhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      noblehouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      }\n    },\n    abodes: []\n  },\n  population: {\n    beggar: {\n      id: 'beggar',\n      unlocked: true\n    },\n    peasant: {\n      id: 'peasant',\n      unlocked: true\n    },\n    citizen: {\n      id: 'citizen',\n      unlocked: false\n    },\n    patrician: {\n      id: 'patrician',\n      unlocked: false\n    },\n    noble: {\n      id: 'noble',\n      unlocked: false\n    }\n  }\n};\n\nexport default INITIAL_STATE;\n","import { ACTIONS } from '../actions/game';\nimport { combineReducers } from 'redux';\nimport island from './island';\nimport warehouse from './warehouse';\nimport construction from './construction';\nimport buildings from './building';\nimport couriers from './couriers';\nimport housing from './housing';\nimport population from './population';\nimport amenity from './amenities';\nimport consume from './consume';\nimport growth from './growth';\nimport finance from './finance';\nimport levelUp from './level-up';\nimport cheat from './cheat';\nimport trader from './trader';\nimport INITIAL_STATE from '../store/initial-state';\n\nconst combinedReducer = combineReducers({\n  cheat: (state = {}) => { return state },\n  island: island,\n  warehouse: warehouse,\n  construction: construction,\n  buildings: buildings,\n  couriers: (state = {}) => { return state }, // no op\n  housing: housing,\n  population: population,\n  trader: trader\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === ACTIONS.SAVE_GAME) {\n    localStorage.setItem('save', btoa(JSON.stringify(state)));\n    return state;\n  }\n  if (action.type === ACTIONS.RESET_SAVE) {\n    let initState = INITIAL_STATE;\n    initState = rootReducer(initState, { type: ACTIONS.INIT }); // probably smelly\n    return initState;\n  }\n\n  if (action.type === ACTIONS.LOAD_GAME) {\n    return action.payload.saveState;\n  }\n  if (action.type === ACTIONS.TICK) {\n    let timeFactor = state.cheat.timeFactor;\n    if (!timeFactor) {\n      timeFactor = 1;\n    }\n    action.payload.tickIntervalSeconds *= timeFactor;\n  }\n  const cheatState = cheat(state, action);\n  const intermediateState = combinedReducer(cheatState, action);\n  const courierState = couriers(intermediateState, action);\n  const amenityState = amenity(courierState, action);\n  const consumptionState = consume(amenityState, action);\n  const growthState = growth(consumptionState, action);\n  const financeState = finance(growthState, action);\n  const levelUpState = levelUp(financeState, action);\n  return levelUpState;\n}\n\nexport default rootReducer;\n","export default class Scheduler {\n  constructor(functionToRun, targetInterval) {\n    this.targetFunction = functionToRun;\n    this.targetInterval = targetInterval;\n    this.running = false;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n    let lastTick = Date.now();\n    this.running = true;\n    let repeater = () => {\n      if (!this.running) {\n          return;\n      }\n      let currentTime = Date.now();\n      let elapsedTime = currentTime - lastTick;\n      this.targetFunction(elapsedTime);\n      lastTick = currentTime;\n      setTimeout(repeater.bind(this), this.targetInterval);\n    }\n    setTimeout(repeater.bind(this), this.targetInterval);\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeName } from '../actions/game';\n\nconst IslandNameView = () => {\n  const name = useSelector(state => state.island.name);\n  const title = useSelector(state => state.island.title);\n  const dispatch = useDispatch();\n\n  const changeFn = () => {\n    const toName = prompt('Enter name');\n    if (toName) {\n      dispatch(changeName(toName.substring(0, 100)));\n    }\n  }\n\n  return (\n    <div className='title'>\n      <h2>{name} <button onClick={changeFn}>Change Name</button></h2>\n      <h4>{title}</h4>\n    </div>\n  )\n};\n\nexport default IslandNameView;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setTimeFactor } from '../../actions/cheats';\n\nconst TimeFactor = () => {\n  const dispatch = useDispatch();\n  const [timeFactor, setTf] = useState(1);\n\n  const handleSubmit = (event) => {\n    dispatch(setTimeFactor(timeFactor));\n    event.preventDefault();\n  }\n\n  return (\n    <div className='time-factor'>\n      <form onSubmit={handleSubmit}>\n        <input type='number' name='timeFactor' onChange={e => setTf(e.target.value)} required></input>\n        <input type='submit' value='Set time factor' />\n      </form>\n    </div>\n  )\n};\n\nexport default TimeFactor;\n","export const filterUnlocked = (collectionObject) => {\n  return Object.entries(collectionObject).reduce((accumulator, [key, value]) => {\n    if (value.unlocked) {\n      accumulator[key] = value;\n    }\n    return accumulator;\n  }, {});\n};\n\nexport const setAffordable = (buyable, resources, costProperty = 'cost') => {\n  for (let [resource, amount] of Object.entries(buyable[costProperty])) {\n    if (!resources[resource]) {\n      // thing costs a resource the player hasn't unlocked\n      return {...buyable, canAfford: false};\n    } else if (resources[resource].owned < amount) {\n      return Object.assign({}, buyable, {canAfford: false});\n    }\n  }\n  return Object.assign({}, buyable, {canAfford: true});\n};\n\nexport const setAllAffordable = (buyableCollection, resources) => {\n  return Object.entries(buyableCollection).reduce((accumulator, [buyableId, buyable]) => {\n    accumulator[buyableId] = setAffordable(buyable, resources);\n    return accumulator;\n  }, {});\n};\n","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\n\nimport ResourceDefinitions from '../data/resource-definitions';\n\nconst PriceTooltip = (props) => {\n  const cost = props.cost;\n\n  const ingredientsList = Object.entries(cost).map(([ingredient, quantity]) => (\n    <div className='construction-ingredient' key={ingredient}>{ResourceDefinitions[ingredient].name}: {quantity}</div>\n  ));\n\n  const headerText = props.header ? props.header : 'Cost';\n  const popover =\n  <Popover id='Price'>\n    <Popover.Title as='h3'>{headerText}</Popover.Title>\n    <Popover.Content>{ingredientsList}</Popover.Content>\n  </Popover>;\n\n  return (\n    <OverlayTrigger\n      placement='top'\n      delay={{ show: 500, hide: 250 }}\n      overlay={popover}\n      >\n      {props.children}\n    </OverlayTrigger>\n  )\n}\n\nexport default PriceTooltip;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { upgradeWarehouse } from '../actions/warehouse';\nimport { filterUnlocked, setAffordable } from '../selectors';\nimport Buildings from '../data/building-definitions';\nimport ResourceDefinitions from '../data/resource-definitions';\nimport Button from 'react-bootstrap/Button';\nimport PriceTooltip from './PriceTooltip';\n\nimport '../../style/resource.css';\n\nconst ResourcePanel = () => {\n  const warehouseType = useSelector(state => state.warehouse.type);\n  const resources = useSelector(state => filterUnlocked(state.warehouse.resources), shallowEqual);\n  const max = useSelector(state => state.warehouse.totalCapacity);\n  const warehouseInfo = Buildings[warehouseType];\n  const dispatch = useDispatch();\n\n  const upgradeWarehouseFn = () => {\n    dispatch(upgradeWarehouse(warehouseType));\n  }\n\n  let upgradeButton = null;\n  if (warehouseInfo.upgradesTo) {\n    const canAfford = setAffordable({cost: warehouseInfo.upgradeCost}, resources).canAfford;\n    upgradeButton = (\n      <PriceTooltip cost={warehouseInfo.upgradeCost} header='Upgrade for'>\n        <div>\n          <Button variant='primary' size='sm' onClick={upgradeWarehouseFn} disabled={!canAfford}>Upgrade</Button>\n        </div>\n      </PriceTooltip>\n    );\n  }\n\n  return (\n    <div className='resource-panel'>\n      <h4>{warehouseInfo.name}</h4>\n      {upgradeButton}\n      <div className='resource-list'>\n        {Object.keys(resources).map((item, key) => {\n            const resourceName = ResourceDefinitions[item].name;\n            if (item !== 'gold') {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)} / {max}</div>;\n            } else {\n              return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)}</div>;\n            }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ResourcePanel;\n","import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport ResourceDefinitions from '../data/resource-definitions';\n\nimport '../../style/courier.css';\n\nconst CourierMonitor = () => {\n  const couriers = useSelector(state => state.couriers, shallowEqual);\n  const buildings = useSelector(state => state.buildings, shallowEqual);\n\n  function jobDescriptionToString(jobDescription) {\n    if (!jobDescription.id) {\n      return 'Sitting idly';\n    }\n    const what = ResourceDefinitions[jobDescription.carrying].name;\n    const howMuch = jobDescription.amount;\n    const fromWhereId = jobDescription.from;\n    let fromWhere = 'nowhere?!';\n    if (fromWhereId === 'warehouse') {\n      fromWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[fromWhereId];\n      if (!building) {\n        fromWhere = '???';\n      } else {\n        fromWhere = building.name;\n      }\n    }\n    const toWhereId = jobDescription.to;\n    let toWhere = 'nowhere?!';\n    if (toWhereId === 'warehouse') {\n      toWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[toWhereId];\n      if (!building) {\n        toWhere = '???';\n      } else {\n        toWhere = building.name;\n      }\n    }\n    return `Delivering ${howMuch} ton of ${what} from ${fromWhere} to ${toWhere}`;\n  }\n\n  const courierList = couriers.couriers.map((courier) => {\n    return (\n      <div className='courier' key={courier.id}>\n        <div>{courier.status}</div>\n        <div>{courier.progress.toFixed(1)}</div>\n        {/**<div>{jobDescriptionToString(courier.jobDescription)}</div>**/}\n        <div>{JSON.stringify(courier.payload)}</div>\n      </div>\n    );\n  });\n\n  return (\n    <div className='courier-monitor'>\n      {courierList}\n    </div>\n  );\n};\n\nexport default CourierMonitor;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked, setAllAffordable } from '../selectors';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../data/building-definitions';\nimport { constructBuilding } from '../actions/construction';\nimport { buildHouse } from '../actions/housing';\nimport { buildWarehouse } from '../actions/warehouse';\nimport PriceTooltip from './PriceTooltip';\n\nimport '../../style/construction.css';\n\nconst ConstructionPanel = () => {\n  const resources = useSelector(state => state.warehouse.resources);\n  const construction = useSelector(state => setAllAffordable(filterUnlocked(state.construction), resources), shallowEqual);\n  const dispatch = useDispatch();\n\n  const constructionList = Object.entries(construction).map(([buildingId, construction]) => {\n    const buildingInfo = BuildingDefinitions[buildingId];\n\n    let buyFunction = null;\n    if (buildingInfo.category === BUILDING_CATEGORY.HOUSE) {\n      buyFunction = () => dispatch(buildHouse(construction));\n    } else if (buildingInfo.category === BUILDING_CATEGORY.WAREHOUSE) {\n      buyFunction = () => dispatch(buildWarehouse(construction));\n    } else {\n      buyFunction = () => dispatch(constructBuilding(construction));\n    }\n\n    return (\n      <div className='construction' key={buildingId}>\n        <div className='construction-header'><p>{buildingInfo.name} {buildingInfo.abbreviation && '(' + buildingInfo.abbreviation + ')'}</p></div>\n        <div>Built: {construction.owned}</div>\n        <PriceTooltip cost={construction.cost} header={buildingInfo.description}>\n          <div>\n            <Button variant='primary' size='sm' className='purchase' onClick={buyFunction} disabled={!construction.canAfford}>Buy</Button>\n          </div>\n        </PriceTooltip>\n      </div>\n    )\n  });\n  return (\n    <Container className='construction-panel'>\n      {constructionList}\n    </Container>\n  )\n};\n\nexport default ConstructionPanel;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport PriceTooltip from './PriceTooltip';\nimport Buildings, {BUILDING_CATEGORY} from '../data/building-definitions';\n\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { destroyBuilding } from '../actions/construction';\nimport { disableBuilding, enableBuilding } from '../actions/building';\nimport { upgradeStorehouse } from '../actions/warehouse';\nimport { setAffordable } from '../selectors';\n\nconst BuildingDetails = (props) => {\n  const resources = useSelector(state => state.warehouse.resources, shallowEqual)\n  const dispatch = useDispatch();\n  const building = props.building;\n  let buildingInfo = Buildings[building.buildingId];\n\n  if (buildingInfo.upgradesTo) {\n    buildingInfo = setAffordable(buildingInfo, resources, 'upgradeCost');\n  }\n\n  const destroyBuildingFn = (toDestroy) => {\n    dispatch(destroyBuilding(toDestroy));\n  }\n\n  const toggleEnableFn = (building) => {\n    if (building.enabled) {\n      dispatch(disableBuilding(building.id));\n    } else {\n      dispatch(enableBuilding(building.id));\n    }\n  }\n\n  const upgradeWarehouseFn = (building) => {\n    dispatch(upgradeStorehouse(building));\n  }\n\n  return (\n    <Modal show={props.show} onHide={props.onClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>{buildingInfo.name}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>{buildingInfo.description}</p>\n        {\n          buildingInfo.category === BUILDING_CATEGORY.PRODUCER &&\n            <>\n              <div>{building.status}</div>\n              <div>Efficiency: {building.efficiency}</div>\n              <div className='inbox'>Inbox: {JSON.stringify(building.inbox)}</div>\n              <div className='outbox'>Outbox: {JSON.stringify(building.outbox)}</div>\n            </>\n        }\n      </Modal.Body>\n      <Modal.Footer>\n        {\n          buildingInfo.category === BUILDING_CATEGORY.PRODUCER &&\n          <Button variant='warning' size='sm' onClick={() => toggleEnableFn(building)}>{ building.enabled ? 'Disable' : 'Enable'}</Button>\n        }\n        {\n          buildingInfo.upgradesTo &&\n          <PriceTooltip cost={buildingInfo.upgradeCost}>\n            <div>\n              <Button variant='primary' size='sm' disabled={!buildingInfo.canAfford} onClick={() => upgradeWarehouseFn(building)}>Upgrade</Button>\n            </div>\n          </PriceTooltip>\n        }\n        <Button variant='danger' size='sm' onClick={() => destroyBuildingFn(building)}>Destroy</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default BuildingDetails;\n","import React, { useState } from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport BuildingDetails from './BuildingDetails';\n\nimport Buildings, { BUILDING_CATEGORY, buildingStatus } from '../data/building-definitions';\n\nconst BuildingIcon = (props) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const handleClose = () => setShowDetails(false);\n  const handleShow = () => setShowDetails(true);\n\n  const building = props.building;\n\n  let toolTipContent = Buildings[building.buildingId].name;\n  let statusColor = null;\n  if (Buildings[building.buildingId].category !== BUILDING_CATEGORY.PRODUCER) {\n    statusColor = 'working';\n  } else {\n    switch (building.status) {\n      case buildingStatus.DISABLED:\n        statusColor = 'disabled';\n        toolTipContent += ' (Disabled)'\n        break;\n      case buildingStatus.AWAITING_RESOURCES:\n        statusColor = 'awaiting';\n        toolTipContent += ' - Awaiting resources!'\n        break;\n      case buildingStatus.OUTBOX_FULL:\n        statusColor = 'outbox-full';\n        toolTipContent += ' - Outbox full!'\n        break;\n      case buildingStatus.WORKING:\n        statusColor = 'working';\n        break;\n      default:\n        break;\n    }\n  }\n\n\n  return (\n    <>\n      <BuildingDetails show={showDetails} onClose={handleClose} building={building}></BuildingDetails>\n      <OverlayTrigger\n        placement='top'\n        delay={{ show: 250, hide: 250 }}\n        overlay={(props) => <Tooltip {...props} id={toolTipContent}>{toolTipContent}</Tooltip>}\n        >\n        <div className={'building-icon ' + statusColor} onClick={handleShow}>\n          {Buildings[building.buildingId].abbreviation}\n        </div>\n      </OverlayTrigger>\n    </>\n  )\n}\n\nexport default BuildingIcon;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport BuildingIcon from './BuildingIcon';\n\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport '../../style/building.css';\n\nconst BuildingPanel = () => {\n  const buildings = useSelector(state => state.buildings.owned, shallowEqual);\n\n  const buildingIcons = Object.values(buildings).map((building) =>\n    <BuildingIcon building={building} key={building.id}></BuildingIcon>\n  );\n\n  return (\n    <Container>\n      <div className='building-panel'>\n        {buildingIcons}\n      </div>\n    </Container>\n  );\n};\n\nexport default BuildingPanel;\n","import React from 'react';\nimport PopulationDefinitions from '../data/population-definitions';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/population.css';\n\nconst PopulationPanel = () => {\n  const populationState = useSelector(state => filterUnlocked(state.population), shallowEqual);\n\n  const populationList = Object.values(populationState).map((pop) => {\n      const popName = PopulationDefinitions[pop.id].name;\n      const happiness = pop.happiness ? pop.happiness.toFixed() : 0;\n      let beggarTimer = null;\n      if (pop.id === 'beggar') {\n        beggarTimer = 1200 - pop.beggarTimer;\n      }\n      return <div className='population' key={pop.id}>\n        {popName}: {pop.owned} / {pop.maxPopulation} Happiness: {happiness} {pop.consumeInfo} --- {beggarTimer}\n      </div>\n  });\n\n  return (\n    <div className='population-panel'>\n      {populationList}\n    </div>\n  )\n}\n\nexport default PopulationPanel;\n","import React from 'react';\nimport BuildingDefinitions from '../data/building-definitions';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked, setAffordable } from '../selectors';\nimport PriceTooltip from './PriceTooltip';\nimport Button from 'react-bootstrap/Button';\n\nimport { ascendHouse } from '../actions/housing';\n\nimport '../../style/housing.css';\n\nconst HousingPanel = () => {\n  const resources = useSelector(state => state.warehouse.resources, shallowEqual);\n  const dispatch = useDispatch();\n\n  const houses = useSelector((state) => filterUnlocked(state.housing.types), shallowEqual);\n  const population = useSelector((state) => state.population, shallowEqual);\n  let housingList = Object.keys(houses).map((houseId) => {\n    const houseInfo = BuildingDefinitions[houseId];\n    let nextHouseInfo = BuildingDefinitions[houseInfo.ascendsTo];\n    if (nextHouseInfo) {\n      nextHouseInfo = setAffordable(nextHouseInfo, resources);\n    }\n    const housedPopulation = population[houseInfo.populationCategory];\n    const canAscend = (houses[houseId].remainingAscensionRights > 0) && housedPopulation.canAscend && nextHouseInfo.canAfford;\n    const availableAscensions = canAscend ? houses[houseId].remainingAscensionRights : 0;\n    return <div className='housing' key={houseId}>\n      <div className='housing-data'>{houseInfo.name}: {houses[houseId].owned}</div>\n      {\n        nextHouseInfo &&\n        <PriceTooltip cost={nextHouseInfo.cost} header={availableAscensions + ' ascensions available'}>\n          <div>\n            <Button variant='primary' size='sm' onClick={() => {dispatch(ascendHouse(houseId, houseInfo.ascendsTo))}} disabled={!canAscend}>Ascend</Button>\n          </div>\n        </PriceTooltip>\n      }\n    </div>\n  });\n\n  return (\n    <div className='housing-panel'>\n      {housingList}\n    </div>\n  )\n};\n\nexport default HousingPanel;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { saveGame, loadGame, resetSave } from '../actions/game';\n\nconst SaveLoad = () => {\n  const dispatch = useDispatch();\n\n  const copyState = () => {\n    dispatch(saveGame());\n    const saveState = localStorage.getItem('save');\n    navigator.clipboard.writeText(saveState).then(() => {\n      alert('Saved to clipboard');\n    });\n  }\n\n  const loadState = () => {\n    const loadState = JSON.parse(atob(prompt('Enter load data')));\n    if (!loadState) {\n      alert('Invalid save state');\n    } else {\n      dispatch(loadGame(loadState));\n    }\n  }\n\n  const resetSaveFn = () => {\n    const response = window.confirm('Are you sure you want to clear your save?');\n    if (response) {\n      dispatch(resetSave());\n    }\n  }\n\n  return (\n    <div className='save-load'>\n      <button onClick={copyState}>Save</button>\n      <button onClick={loadState}>Load</button>\n      <button onClick={resetSaveFn}>RESET</button>\n    </div>\n  )\n}\n\nexport default SaveLoad;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport Resources from '../data/resource-definitions';\nimport Traders from '../data/trader-info';\nimport { buyGood, sellGood, dismissTrader } from '../actions/trade';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/trade.css';\n\nconst TradePanel = () => {\n  const traderState = useSelector(state => state.trader, shallowEqual);\n  const warehouse = useSelector(state => state.warehouse, shallowEqual);\n  const dispatch = useDispatch();\n\n  if (traderState.traderId === 0) {\n    return (\n      <div className='trade-panel'>\n        <h4>Your port is empty</h4>\n        Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      </div>\n    );\n  }\n\n  const resources = filterUnlocked(warehouse.resources);\n  const goldOnHand = resources.gold.owned;\n\n  const goodsToTrade = Object.entries(traderState.wares).map(([good, tradeData]) => {\n    const goodInWarehouse = resources[good];\n    if (!goodInWarehouse) {\n      // not unlocked, can't sell\n      return null;\n    }\n    const canBuy = (goldOnHand >= tradeData.sellPrice) && (tradeData.held > 0) && (goodInWarehouse.owned + goodInWarehouse.pending - goodInWarehouse.reserved < warehouse.totalCapacity);\n    const canSell = (tradeData.held < traderState.maxCapacity) && (goodInWarehouse.owned > 0);\n    return <div className='trade-good' key={good}>\n      {Resources[good].name} available: {tradeData.held}\n      <button onClick={() => dispatch(buyGood(good, 1, tradeData.sellPrice))} disabled={!canBuy}>Buy for {tradeData.sellPrice} Gold</button>\n      <button onClick={() => dispatch(sellGood(good, 1, tradeData.buyPrice))} disabled={!canSell}>Sell for {tradeData.buyPrice} Gold</button>\n    </div>\n  });\n\n  const dismissFn = () => {\n    dispatch(dismissTrader(traderState.dismissCost));\n  }\n\n  return (\n    <div className='trade-panel'>\n      <h4>{Traders[traderState.traderId].name} has visited your island!</h4>\n      Timer: {(traderState.timeToLeave - traderState.timer).toFixed()}\n      <button onClick={dismissFn}>Dismiss for {traderState.dismissCost} Gold</button>\n      {goodsToTrade}\n    </div>\n  );\n};\n\nexport default TradePanel;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { tick as dispatchTick, saveGame } from './actions/game';\nimport Scheduler from './scheduler';\n\nimport IslandNameView from './components/IslandNameView';\nimport TimeFactor from './components/cheats/TimeFactor';\nimport ResourcePanel from './components/ResourcePanel';\nimport CourierMonitor from './components/CourierMonitor';\nimport ConstructionPanel from './components/ConstructionPanel';\nimport BuildingPanel from './components/BuildingPanel';\nimport PopulationPanel from './components/PopulationPanel';\nimport HousingPanel from './components/HousingPanel';\nimport SaveLoad from './components/SaveLoad';\nimport TradePanel from './components/TradePanel';\n\nconst MS_TO_S = 1/1000.0;\n\nfunction Game() {\n  const [scheduler] = useState(new Scheduler(tick, 100));\n  const [autoSaveScheduler] = useState(new Scheduler(autoSave, 30000));\n  const dispatch = useDispatch();\n\n  function tick(timeIntervalMs) {\n    dispatch(dispatchTick(timeIntervalMs * MS_TO_S));\n  }\n\n  function autoSave() {\n    dispatch(saveGame());\n    console.log('Saved');\n  }\n\n  useEffect(() => {\n    scheduler.start();\n    autoSaveScheduler.start();\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <SaveLoad></SaveLoad>\n      <TimeFactor></TimeFactor>\n      <IslandNameView></IslandNameView>\n      <ResourcePanel></ResourcePanel>\n      <TradePanel></TradePanel>\n      <PopulationPanel></PopulationPanel>\n      <HousingPanel></HousingPanel>\n      <CourierMonitor></CourierMonitor>\n      <ConstructionPanel></ConstructionPanel>\n      <BuildingPanel></BuildingPanel>\n    </div>\n  );\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './js/store/store';\n\nimport './style/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Game from './js/Game';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(\n<Provider store={configureStore()}>\n  <Game></Game>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root-reducer';\nimport INITIAL_STATE from './initial-state';\n\nexport default function configureStore(initialState=INITIAL_STATE) {\n  const saveState = localStorage.getItem('save');\n  let loaded = false;\n  if (saveState) {\n    initialState = JSON.parse(atob(saveState));\n    loaded = true;\n  }\n  if (!loaded) {\n    initialState = rootReducer(null, {type: 'RESET_SAVE'});\n  }\n  return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk) && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n}\n"],"sourceRoot":""}