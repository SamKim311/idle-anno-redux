{"version":3,"sources":["js/actions/game.js","js/reducers/island.js","js/actions/warehouse.js","js/actions/construction.js","js/reducers/building-definitions.js","js/actions/housing.js","js/reducers/warehouse.js","js/reducers/construction.js","js/reducers/building.js","js/reducers/couriers.js","js/reducers/housing.js","js/reducers/population.js","js/reducers/amenities.js","js/reducers/population-definitions.js","js/reducers/consume.js","js/reducers/growth.js","js/reducers/finance.js","js/reducers/level-up-definitions.js","js/reducers/level-up.js","js/actions/cheats.js","js/reducers/cheat.js","js/reducers/root-reducer.js","js/store/initial-state.js","js/scheduler.js","js/components/cheats/TimeFactor.js","js/selectors.js","js/reducers/resource-definitions.js","js/components/ResourcePanel.js","js/components/CourierMonitor.js","js/components/ConstructionPanel.js","js/components/BuildingPanel.js","js/components/PopulationPanel.js","js/components/HousingPanel.js","js/components/SaveLoad.js","js/Game.js","js/serviceWorker.js","index.js","js/store/store.js"],"names":["ACTIONS","INIT","TICK","LOAD_GAME","BUILD_WAREHOUSE","CONSTRUCT_BUILDING","DESTROY_BUILDING","BUILDING_CATEGORY","AMENITY","PRODUCER","HOUSE","WAREHOUSE","BuildingDefinitions","marketplace","name","description","category","produces","community","upkeep","chapel","faith","fishinghut","consumes","fish","produceTime","lumberjackhut","wood","orchard","apple","ciderfarm","cider","hempfarm","hemp","weavers","linen","quarry","stone","stonemason","stonebrick","peasanthouse","populationCategory","populationCap","ascendsTo","citizenhouse","cost","tool","smallwarehouse","couriers","capacity","smallstockpile","BUILD_HOUSE","ASCEND_HOUSE","resourceDecorations","reserved","pending","deductCost","resources","resourceCopy","Object","assign","entries","ingredient","amount","ingredientCopy","owned","buildingStatus","AWAITING_RESOURCES","WORKING","OUTBOX_FULL","DISABLED","initialProducerState","status","progress","efficiency","inbox","outbox","BASE_IN_OUT_BOX_CAPACITY","initializeInOutBox","building","keys","good","doProductionTick","timeIntervalS","buildingCopy","consumed","canAfford","produced","outboxHasRoom","inboxCopy","outboxCopy","courierState","initCourier","timeThreshold","jobDescription","payload","markedForDeath","state","action","type","gameActions","startingWarehouse","warehouse","courierArrayCopy","slice","addCouriers","courierObjCopy","warehouseActions","builtWarehouse","toConstruct","id","addedCouriers","newState","newCouriers","newArray","constructionActions","toDestroy","courierList","courierIndex","length","courier","markmarkedForDeath","splice","stateCopy","couriersCopy","warehouseMax","totalCapacity","buildings","buildingRefCopy","newJobs","findJobs","jobArrayCopy","jobQueue","concat","jobList","jobRefCopy","jobQueueMap","jobRef","courierListCopy","map","newCourier","nextJobIndex","getNextAvailableJob","nextJob","pickupFromId","from","deliverToId","to","carrying","pickupFrom","deliverTo","inboxRoom","currentSupply","Math","floor","min","currentOutbox","warehouseRoom","tickIntervalSeconds","fromId","toId","product","hasOwnProperty","resourceToTake","resourceToDeliver","killedCouriers","filter","courierArray","numToAdd","i","uuidv4","push","SUPPLY_SUFFIX","PICKUP_SUFFIX","existingJobs","supplies","values","supplyKey","resource","newJob","pickups","reduce","accumulator","pickupKey","jobArray","jobIndex","initHouseState","popProgress","currentPop","ascensionFactors","rightsLists","patricianhouse","calculateAscensionRights","allTypes","toCheck","totalHouses","sum","pop","totalAscensionRights","ascendTo","alreadyAscended","remainingAscensionRights","initValues","maxPopulation","happiness","canAscend","consumeInfo","amenities","amenity","PopulationDefinitions","peasant","taxRate","quantity","weight","citizen","spice","population","popType","popOriginal","currentHappiness","pctSatisfied","happinessDiff","abs","houses","housing","populationCounts","newAbodes","abodes","abodeOriginal","abode","curHappiness","growthFactor","popCount","newPop","gold","financeInfo","maintenanceCost","taxRevenue","warehouseMaintenance","totalMaintenance","construction","totalTaxes","happinessFactor","unlockThresholds","unlocks","title","island","level","unlockPopType","popRequired","unlocked","constructions","forEach","conId","resId","popUnlocked","types","houseId","unlockedHouse","SET_TIME_FACTOR","cheat","timeFactor","combinedReducer","combineReducers","warehouseCopy","newResources","resourceId","newResource","housingActions","warehouseToBuild","toConstructId","newOwned","toDestroyId","buildingId","GAME_ACTIONS","updatedBuilding","CONSTRUCTION_ACTIONS","buildingToBuild","newBuilding","newBuildings","buildingToDestroy","toBuild","fromHouseId","fromHouse","toHouseId","fromType","toType","nextHouse","ascendIndex","findIndex","house","populationState","houseBuilt","modifiedPop","currentHouse","oldPop","nextPop","rootReducer","saveState","cheatState","intermediateState","amenityState","consumptionState","consume","growthState","growth","financeState","finance","levelUp","INITIAL_STATE","noblehouse","Scheduler","functionToRun","targetInterval","this","targetFunction","running","lastTick","Date","now","setTimeout","repeater","currentTime","elapsedTime","bind","TimeFactor","dispatch","useDispatch","useState","setTf","className","onSubmit","event","setTimeFactor","preventDefault","onChange","e","target","value","required","filterUnlocked","collectionObject","key","setAllAffordable","buyableCollection","buyableId","buyable","setAffordable","ResourceDefinitions","baseTradePrice","connect","max","item","resourceName","toFixed","CourierMonitor","useSelector","shallowEqual","JSON","stringify","ConstructionPanel","constructionList","buildingInfo","ingredientPanel","buyFunction","onClick","disabled","Building","props","destroyFunc","BuildingPanel","buildingState","destroyBuildingFn","destroyBuilding","buildingList","PopulationPanel","populationList","popName","HousingPanel","housingList","housedPopulation","availableAscensions","toHouse","toBuilding","ascendHouse","SaveLoad","btoa","navigator","clipboard","writeText","then","alert","loadState","parse","atob","prompt","MS_TO_S","Game","timeIntervalMs","scheduler","useEffect","start","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","localStorage","getItem","createStore","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a277fed.chunk.js","sourcesContent":["export const ACTIONS = {\n  INIT: 'INIT',\n  TICK: 'TICK',\n  LOAD_GAME: 'LOAD_GAME'\n};\n\nexport function init() {\n  return { type: ACTIONS.INIT };\n}\n\nexport function tick(tickIntervalSeconds) {\n  return { type: ACTIONS.TICK, payload: { tickIntervalSeconds: tickIntervalSeconds }};\n}\n\nexport function loadGame(saveState) {\n  return { type: ACTIONS.LOAD_GAME, payload: { saveState: saveState }};\n}\n","export default function(island={}, action) {\n  return island;\n}\n","export const ACTIONS = {\n  BUILD_WAREHOUSE: 'BUILD_WAREHOUSE'\n};\n\nexport function buildWarehouse(warehouse) {\n  return { type: ACTIONS.BUILD_WAREHOUSE, payload: { toConstruct: warehouse }};\n}\n","export const ACTIONS = {\n  CONSTRUCT_BUILDING: 'CONSTRUCT_BUILDING',\n  DESTROY_BUILDING: 'DESTROY_BUILDING'\n};\n\nexport function constructBuilding(toConstruct) {\n  return { type: ACTIONS.CONSTRUCT_BUILDING, payload: { toConstruct: toConstruct } };\n};\n\nexport function destroyBuilding(toDestroy) {\n  return { type: ACTIONS.DESTROY_BUILDING, payload: { toDestroy: toDestroy }};\n};\n","export const BUILDING_CATEGORY = {\n  AMENITY: 'AMENITY',\n  PRODUCER: 'PRODUCER',\n  HOUSE: 'HOUSE',\n  WAREHOUSE: 'WAREHOUSE'\n}\n\nconst BuildingDefinitions = {\n  // Amenities\n  marketplace: {\n    name: 'Marketplace',\n    description: 'Provides a place for villagers to meet',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      community: 2.5\n    },\n    upkeep: 10\n  },\n  chapel: {\n    name: 'Chapel',\n    description: 'A basic building for villagers to worship',\n    category: BUILDING_CATEGORY.AMENITY,\n    produces: {\n      faith: 1.5\n    },\n    upkeep: 15\n  },\n\n  // Producers\n  fishinghut: {\n    name: 'Fisherman\\'s Hut',\n    description: 'Gathers fish',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      fish: 1\n    },\n    produceTime: 30,\n    upkeep: 15\n  },\n  lumberjackhut: {\n    name: 'Lumberjack\\'s Hut',\n    description: 'Gathers wood',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      wood: 1\n    },\n    produceTime: 40,\n    upkeep: 5\n  },\n  orchard: {\n    name: 'Orchard',\n    description: 'Grows apples to be turned into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      apple: 1\n    },\n    produceTime: 80,\n    upkeep: 0\n  },\n  ciderfarm: {\n    name: 'Cider Farm',\n    description: 'Processes apples into cider',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      apple: 1\n    },\n    produces: {\n      cider: 1\n    },\n    produceTime: 40,\n    upkeep: 15\n  },\n  hempfarm: {\n    name: 'Hemp Plantation',\n    description: 'Grows hemp',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      hemp: 1\n    },\n    produceTime: 60,\n    upkeep: 20\n  },\n  weavers: {\n    name: 'Weaver\\'s Hut',\n    description: 'Uses hemp to create clothing',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      hemp: 1\n    },\n    produces: {\n      linen: 1\n    },\n    produceTime: 30,\n    upkeep: 25\n  },\n  quarry: {\n    name: 'Stone Quarry',\n    description: 'Gathers raw stone',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {},\n    produces: {\n      stone: 1\n    },\n    produceTime: 30,\n    upkeep: 20\n  },\n  stonemason: {\n    name: 'Stonemason',\n    description: 'Turns raw stone into useable bricks',\n    category: BUILDING_CATEGORY.PRODUCER,\n    consumes: {\n      stone: 1\n    },\n    produces: {\n      stonebrick: 1\n    },\n    produceTime: 30,\n    upkeep: 20\n  },\n\n  // Houses\n  peasanthouse: {\n    name: 'Peasant Shack',\n    description: 'Basic home for villagers. Houses 8',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'peasant',\n    populationCap: 8,\n    ascendsTo: 'citizenhouse'\n  },\n  citizenhouse: {\n    name: 'Citizen House',\n    description: 'Home for citizens',\n    category: BUILDING_CATEGORY.HOUSE,\n    upkeep: 0,\n    populationCategory: 'citizen',\n    populationCap: 15,\n    ascendsTo: 'patricianhouse',\n    cost: {\n      wood: 1,\n      tool: 1\n    }\n  },\n\n  // Warehouses\n  smallwarehouse: {\n    name: 'Small Warehouse',\n    description: 'Basic warehouse for your island',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 3,\n    capacity: 40\n  },\n  smallstockpile: {\n    name: 'Small Stockpile',\n    description: 'Small depot. Provides 1 courier',\n    category: BUILDING_CATEGORY.WAREHOUSE,\n    upkeep: 10,\n    couriers: 1,\n    capacity: 0\n  }\n};\n\nexport default BuildingDefinitions;\n","import BuildingDefinitions from '../reducers/building-definitions';\n\nexport const ACTIONS = {\n  BUILD_HOUSE: 'BUILD_HOUSE',\n  ASCEND_HOUSE: 'ASCEND_HOUSE'\n};\n\nexport function buildHouse(house) {\n  return { type: ACTIONS.BUILD_HOUSE, payload: { toConstruct: house } };\n}\n\nexport function ascendHouse(fromHouse, toHouse) {\n  const toBuilding = BuildingDefinitions[toHouse];\n  return { type: ACTIONS.ASCEND_HOUSE, payload: { toConstruct: toBuilding, fromHouse: fromHouse }};\n}\n","import { ACTIONS } from '../actions/warehouse';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport BuildingDefinitions from './building-definitions';\n\nconst resourceDecorations = {\n  reserved: 0,\n  pending: 0\n}\n\nexport default function(warehouse = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case gameActions.INIT: {\n      // go through each resource and add the decorator, because I don't wanna copy and paste it a billion times\n      const warehouseCopy = Object.assign({}, warehouse);\n      const newResources = Object.entries(warehouseCopy.resources).reduce((accumulator, [resourceId, resource]) => {\n        const newResource = Object.assign({}, resource, resourceDecorations);\n        accumulator[resourceId] = newResource;\n        return accumulator;\n      }, {});\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case housingActions.BUILD_HOUSE:\n    case housingActions.ASCEND_HOUSE:\n    case constructionActions.CONSTRUCT_BUILDING: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n      return warehouseCopy;\n    }\n    case ACTIONS.BUILD_WAREHOUSE: {\n      const warehouseCopy = Object.assign({}, warehouse);\n      let cost = payload.toConstruct.cost;\n      let newResources = deductCost(warehouseCopy.resources, cost);\n      warehouseCopy.resources = newResources;\n\n      const warehouseToBuild = BuildingDefinitions[payload.toConstruct.id];\n\n      warehouseCopy.totalCapacity += warehouseToBuild.capacity;\n\n      return warehouseCopy;\n    }\n    default:\n      return warehouse;\n  }\n}\n\nfunction deductCost(resources, cost) {\n  let resourceCopy = Object.assign({}, resources);\n  for (let [ingredient, amount] of Object.entries(cost)) {\n    let ingredientCopy = Object.assign({}, resourceCopy[ingredient]);\n    ingredientCopy.owned -= amount;\n    resourceCopy[ingredient] = ingredientCopy;\n  }\n  return resourceCopy;\n}\n","import { ACTIONS } from '../actions/construction';\nimport { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\n\nexport default function(constructions = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case warehouseActions.BUILD_WAREHOUSE:\n    case housingActions.BUILD_HOUSE:\n    case ACTIONS.CONSTRUCT_BUILDING:\n      let toConstructId = payload.toConstruct.id;\n      let toConstruct = constructions[toConstructId];\n      let newOwned = Object.assign({}, toConstruct, {owned: toConstruct.owned+1});\n      return Object.assign({}, constructions, {[toConstructId]: newOwned});\n    case ACTIONS.DESTROY_BUILDING:\n      const toDestroyId = payload.toDestroy.buildingId;\n      const toDestroy = {...constructions[toDestroyId]};\n      toDestroy.owned--;\n      return {...constructions, [toDestroyId]: toDestroy};\n    default:\n      return constructions;\n  }\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as CONSTRUCTION_ACTIONS } from '../actions/construction';\nimport { ACTIONS as GAME_ACTIONS } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from './building-definitions';\n\nconst buildingStatus = {\n  AWAITING_RESOURCES: 'AWAITING_RESOURCES',\n  WORKING: 'WORKING',\n  OUTBOX_FULL: 'OUTBOX_FULL',\n  DISABLED: 'DISABLED'\n}\n\nconst initialProducerState = {\n  status: buildingStatus.AWAITING_RESOURCES,\n  progress: 0,\n  efficiency: 0,\n  inbox: {},\n  outbox: {}\n}\n\nexport const BASE_IN_OUT_BOX_CAPACITY = 5;\n\nexport default function(buildings = {}, action) {\n  const payload = action.payload;\n  switch(action.type) {\n    case GAME_ACTIONS.TICK: {\n      if (!buildings.owned) {\n        return buildings;\n      }\n      const newState = Object.assign({}, buildings);\n      const newOwned = Object.assign({}, newState.owned);\n      newState.owned = newOwned;\n\n      const timeIntervalS = payload.tickIntervalSeconds;\n      Object.values(buildings.owned).forEach((building) => {\n        let updatedBuilding = null;\n        if (building.category === BUILDING_CATEGORY.PRODUCER) {\n          updatedBuilding = doProductionTick(building, timeIntervalS);\n        } else {\n          updatedBuilding = building;\n        }\n        newOwned[updatedBuilding.id] = updatedBuilding;\n      });\n      return newState;\n    }\n    case warehouseActions.BUILD_WAREHOUSE:\n    case CONSTRUCTION_ACTIONS.CONSTRUCT_BUILDING:\n      const buildingToBuild = BuildingDefinitions[payload.toConstruct.id];\n      let newBuilding = Object.assign({}, buildingToBuild, {id: uuidv4(), buildingId: payload.toConstruct.id});\n      if (buildingToBuild.category === BUILDING_CATEGORY.PRODUCER) {\n        newBuilding = Object.assign(newBuilding, initialProducerState);\n        initializeInOutBox(newBuilding);\n      }\n      const newBuildings = Object.assign({}, buildings.owned);\n      newBuildings[newBuilding.id] = newBuilding;\n      return Object.assign({}, buildings, {owned: newBuildings});\n    case CONSTRUCTION_ACTIONS.DESTROY_BUILDING:\n      const buildingToDestroy = payload.toDestroy;\n      const newOwned = {...buildings.owned};\n      delete newOwned[buildingToDestroy.id];\n      return {...buildings, owned: newOwned};\n    default:\n      return buildings;\n  }\n}\n\nfunction initializeInOutBox(building) {\n  building.inbox = {};\n  for (let ingredient of Object.keys(building.consumes)) {\n    building.inbox[ingredient] = 0;\n  }\n\n  building.outbox = {};\n  for (let good of Object.keys(building.produces)) {\n    building.outbox[good] = 0;\n  }\n}\n\nfunction doProductionTick(building, timeIntervalS) {\n  let buildingCopy = Object.assign({}, building);\n\n  if (!canAfford(buildingCopy)) {\n    buildingCopy.status = buildingStatus.AWAITING_RESOURCES;\n    return buildingCopy;\n  }\n\n  if (!outboxHasRoom(buildingCopy)) {\n    buildingCopy.status = buildingStatus.OUTBOX_FULL;\n    return buildingCopy;\n  }\n\n  buildingCopy.status = buildingStatus.WORKING;\n\n  buildingCopy.progress += timeIntervalS;\n  if (buildingCopy.progress > buildingCopy.produceTime) {\n    buildingCopy.progress -= buildingCopy.produceTime;\n    let inboxCopy = Object.assign({}, buildingCopy.inbox);\n    let outboxCopy = Object.assign({}, buildingCopy.outbox);\n\n    for (let [ingredient, consumed] of Object.entries(buildingCopy.consumes)) {\n      inboxCopy[ingredient] -= consumed;\n    }\n\n    for (let [good, produced] of Object.entries(buildingCopy.produces)) {\n      outboxCopy[good] += produced;\n    }\n\n    buildingCopy.inbox = inboxCopy;\n    buildingCopy.outbox = outboxCopy;\n  }\n\n  return buildingCopy;\n}\n\nfunction canAfford(building) {\n  for (let [ingredient, consumed] of Object.entries(building.consumes)) {\n    if (building.inbox[ingredient] < consumed) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction outboxHasRoom(building) {\n  for (let [good, produced] of Object.entries(building.produces)) {\n    let outboxGood = building.outbox[good];\n    if (outboxGood + produced > BASE_IN_OUT_BOX_CAPACITY) {\n      return false;\n    }\n  }\n  return true;\n}\n","import uuidv4 from 'uuid/v4';\n\nimport { ACTIONS as gameActions } from '../actions/game';\nimport { ACTIONS as warehouseActions } from '../actions/warehouse';\nimport { ACTIONS as constructionActions } from '../actions/construction';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from './building-definitions';\nimport { BASE_IN_OUT_BOX_CAPACITY } from './building';\n\nconst courierState = {\n  IDLE: 'IDLE',\n  PICKING_UP: 'PICKING_UP',\n  EN_ROUTE: 'EN_ROUTE',\n  DROPPING_OFF: 'DROPPING_OFF'\n}\n\nconst BASE_TRAVEL_TIME_SECONDS = 20;\nconst BASE_PICK_UP_DROP_OFF_TIME_SECONDS = 8;\n\nconst initCourier = {\n  status: courierState.IDLE,\n  progress: 0,\n  timeThreshold: 0,\n  jobDescription: {},\n  payload: {},\n  markedForDeath: false\n}\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  const couriers = state.couriers;\n  if (!couriers) {\n    return state;\n  }\n  switch(action.type) {\n    case gameActions.INIT:\n      const startingWarehouse = BuildingDefinitions[state.warehouse.type];\n      const courierArrayCopy = couriers.couriers.slice(0);\n      addCouriers(courierArrayCopy, startingWarehouse.couriers);\n      const courierObjCopy = Object.assign({}, couriers);\n      courierObjCopy.couriers = courierArrayCopy;\n      return Object.assign({}, state, {couriers: courierObjCopy});\n    case warehouseActions.BUILD_WAREHOUSE: {\n      const builtWarehouse = BuildingDefinitions[payload.toConstruct.id];\n      const addedCouriers = builtWarehouse.couriers;\n      const newState = Object.assign({}, state);\n      const newCouriers = Object.assign({}, newState.couriers);\n      newState.couriers = newCouriers;\n      const newArray = newCouriers.couriers.slice(0);\n      addCouriers(newArray, addedCouriers);\n      newCouriers.couriers = newArray;\n      return newState;\n    }\n    case constructionActions.DESTROY_BUILDING: {\n      const toDestroy = payload.toDestroy;\n      if (toDestroy.category !== BUILDING_CATEGORY.WAREHOUSE) {\n        return state;\n      }\n\n      const courierList = [...state.couriers.couriers];\n      const couriers = {...state.couriers, couriers: courierList};\n      const newState = {...state, couriers: couriers};\n\n      // try to find a courier that's idle\n      for (let courierIndex = 0; courierIndex < courierList.length; courierIndex++) {\n        const courier = courierList[courierIndex];\n        if (courier.status === courierState.IDLE && !courier.markmarkedForDeath) {\n          courierList.splice(courierIndex, 1);\n          return newState;\n        }\n      }\n\n      // if not, mark the last one for death that isn't already marked\n      for (let courierIndex = courierList.length-1; courierIndex >= 0; courierIndex--) {\n        const courier = courierList[courierIndex];\n        if (!courier.markmarkedForDeath) {\n          courier.markedForDeath = true;\n          return newState;\n        }\n      }\n\n      // no idle couriers, and all active ones are already marked for death so...uh...\n      return newState;\n    }\n    case gameActions.TICK: {\n      const stateCopy = Object.assign({}, state);\n      const couriersCopy = Object.assign({}, stateCopy.couriers);\n      const warehouse = Object.assign({}, stateCopy.warehouse);\n      const warehouseMax = warehouse.totalCapacity;\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const buildings = Object.assign({}, stateCopy.buildings);\n      const buildingRefCopy = Object.assign({}, buildings.owned);\n      buildings.owned = buildingRefCopy;\n      stateCopy.warehouse = warehouse;\n      stateCopy.buildings = buildings;\n      stateCopy.couriers = couriersCopy;\n\n      // add new jobs\n      const newJobs = findJobs(couriers, warehouse, buildingRefCopy);\n      let jobArrayCopy = couriers.jobQueue.slice(0).concat(newJobs.jobList);\n      const jobRefCopy = Object.assign({}, couriers.jobQueueMap, newJobs.jobRef);\n\n      // if any couriers are available, pick from the top of the queue\n      const courierListCopy = couriersCopy.couriers.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          const newCourier = Object.assign({}, courier);\n\n          let nextJobIndex = getNextAvailableJob(jobArrayCopy, buildingRefCopy);\n          const nextJob = jobArrayCopy[nextJobIndex];\n          jobArrayCopy = jobArrayCopy.slice(nextJobIndex+1);\n          if (!nextJob) {\n            return courier;\n          }\n\n          const pickupFromId = nextJob.from;\n          const deliverToId = nextJob.to;\n          const good = nextJob.carrying;\n          let pickupFrom = null;\n          let deliverTo = null;\n          let amount = 0;\n\n          if (pickupFromId !== 'warehouse') {\n            pickupFrom = buildings.owned[pickupFromId];\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (deliverToId !== 'warehouse') {\n            deliverTo = buildings.owned[deliverToId];\n          } else {\n            deliverTo = warehouse;\n          }\n\n          if (pickupFromId === 'warehouse') {\n            const inboxRoom = BASE_IN_OUT_BOX_CAPACITY - deliverTo.inbox[good];\n            const currentSupply = Math.floor(resources[good].owned - resources[good].reserved);\n            amount = Math.min(inboxRoom, currentSupply);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.reserved += amount;\n            resources[good] = resourceCopy;\n          } else {\n            const currentOutbox = pickupFrom.outbox[good];\n            const warehouseRoom = Math.floor(warehouseMax - resources[good].owned - resources[good].pending);\n            amount = Math.min(currentOutbox, warehouseRoom);\n            const resourceCopy = Object.assign({}, resources[good]);\n            resourceCopy.pending += amount;\n            resources[good] = resourceCopy;\n          }\n\n          nextJob.amount = amount;\n\n          newCourier.status = courierState.PICKING_UP;\n          newCourier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n          newCourier.jobDescription = nextJob;\n\n          return newCourier;\n        } else {\n          return courier;\n        }\n      });\n\n      couriersCopy.jobQueue = jobArrayCopy;\n      couriersCopy.jobQueueMap = jobRefCopy;\n\n      // work the couriers already on the job (look into merging with the map function up above)\n      const progressedCouriers = courierListCopy.map((courier) => {\n        if (courier.status === courierState.IDLE) {\n          return courier;\n        }\n\n        courier.progress += payload.tickIntervalSeconds;\n        if (courier.progress >= courier.timeThreshold) {\n          courier.progress -= courier.timeThreshold;\n          const jobDescription = courier.jobDescription;\n          const fromId = jobDescription.from;\n          const toId = jobDescription.to;\n          const product = jobDescription.carrying;\n          const amount = jobDescription.amount;\n          let pickupFrom = null;\n          let deliverTo = null;\n\n          if (fromId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(fromId)) {\n              pickupFrom = Object.assign({}, buildingRefCopy[fromId]);\n              buildingRefCopy[fromId] = pickupFrom;\n            }\n          } else {\n            pickupFrom = warehouse;\n          }\n\n          if (toId !== 'warehouse') {\n            if (buildingRefCopy.hasOwnProperty(toId)) {\n              deliverTo = Object.assign({}, buildingRefCopy[toId]);\n              buildingRefCopy[toId] = deliverTo;\n            }\n          } else {\n            deliverTo = warehouse;\n          }\n\n          switch (courier.status) {\n            case courierState.PICKING_UP: {\n              const payload = Object.assign({}, courier.payload);\n              courier.payload = payload;\n\n              if (fromId === 'warehouse') {\n                const resourceToTake = Object.assign({}, resources[product]);\n                resources[product] = resourceToTake;\n                resourceToTake.owned -= amount;\n                resourceToTake.reserved -= amount;\n                payload[product] = amount;\n              } else {\n                if (!pickupFrom) { // building got deleted...\n                  courier.payload = {};\n                  courier.status = courierState.IDLE;\n                  courier.jobDescription = {};\n                  courier.progress = 0;\n                  courier.timeThreshold = 0;\n\n                  delete jobRefCopy[courier.jobDescription.id];\n                  break;\n                }\n                const outbox = Object.assign({}, pickupFrom.outbox);\n                pickupFrom.outbox = outbox;\n                outbox[product] -= amount;\n                payload[product] = amount;\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.status = courierState.EN_ROUTE;\n              courier.timeThreshold = BASE_TRAVEL_TIME_SECONDS;\n              break;\n            }\n            case courierState.EN_ROUTE:\n              courier.status = courierState.DROPPING_OFF;\n              courier.timeThreshold = BASE_PICK_UP_DROP_OFF_TIME_SECONDS;\n              break;\n            case courierState.DROPPING_OFF: {\n              // drop off goods\n              const payload = Object.assign({}, courier.payload);\n\n              if (toId === 'warehouse') {\n                const resourceToDeliver = Object.assign({}, resources[product]);\n                resources[product] = resourceToDeliver;\n                resourceToDeliver.owned += payload[product];\n                resourceToDeliver.pending -= amount;\n              } else {\n                if (!deliverTo) { // building got deleted...\n                  // return to warehouse\n                  const resourceToDeliver = Object.assign({}, resources[product]);\n                  resources[product] = resourceToDeliver;\n                  resourceToDeliver.owned += payload[product];\n                } else {\n                  const inbox = Object.assign({}, deliverTo.inbox);\n                  deliverTo.inbox = inbox;\n                  inbox[product] += amount;\n                }\n                delete jobRefCopy[courier.jobDescription.id];\n              }\n\n              courier.payload = {};\n              courier.status = courierState.IDLE;\n              courier.jobDescription = {};\n              courier.progress = 0;\n              courier.timeThreshold = 0;\n              break;\n            }\n            default:\n              break;\n          }\n        }\n        return courier;\n      });\n\n      // check for any idle couriers marked for death\n      const killedCouriers = courierListCopy.filter((courier) => courier.status !== courierState.IDLE || !courier.markedForDeath);\n\n      couriersCopy.couriers = killedCouriers;\n\n      stateCopy.couriers = couriersCopy;\n      return stateCopy;\n    }\n    default:\n      return state;\n  }\n}\n\nfunction addCouriers(courierArray, numToAdd) {\n  for (let i=0; i<numToAdd; i++) {\n    const newCourier = Object.assign({}, initCourier, {id: uuidv4()});\n    courierArray.push(newCourier);\n  }\n}\n\nconst SUPPLY_SUFFIX = '_SUPPLY';\nconst PICKUP_SUFFIX = '_PICKUP';\nfunction findJobs(courier, warehouse, buildings) {\n  const existingJobs = courier.jobQueueMap;\n  const warehouseMax = warehouse.totalCapacity;\n  const resources = warehouse.resources;\n\n  // check buildings that need input fed\n  const supplies = {\n    jobList: [],\n    jobRef: {}\n  }\n  for (let building of Object.values(buildings)) {\n    if (building.category !== BUILDING_CATEGORY.PRODUCER) {\n      continue;\n    }\n    for (let [ingredient, amount] of Object.entries(building.inbox)) {\n      const supplyKey = building.id + '_' + ingredient + '_' + SUPPLY_SUFFIX;\n      if (amount < BASE_IN_OUT_BOX_CAPACITY && !existingJobs[supplyKey]) {\n        const resource = resources[ingredient];\n        const supplyRemaining = Math.floor(resource.owned - resource.reserved);\n        if (supplyRemaining > 0) {\n          const newJob = {\n            id: supplyKey,\n            from: 'warehouse',\n            to: building.id,\n            carrying: ingredient\n          };\n          supplies.jobList.push(newJob);\n          supplies.jobRef[supplyKey] = newJob;\n        }\n      }\n    }\n  }\n\n  // check buildings that need outbox picked up\n  const pickups = Object.values(buildings).reduce((accumulator, building) => {\n    if (building.category !== BUILDING_CATEGORY.PRODUCER) {\n      return accumulator;\n    }\n    for (let [product, amount] of Object.entries(building.outbox)) {\n      const pickupKey = building.id + PICKUP_SUFFIX;\n      if (amount > 0 && !existingJobs[pickupKey]) {\n        const resource = resources[product];\n        const spaceRemaining = Math.floor(warehouseMax - resource.owned - resource.pending);\n        if (spaceRemaining > 0) {\n          const newJob = {\n            id: pickupKey,\n            from: building.id,\n            to: 'warehouse',\n            carrying: product\n          };\n          accumulator.jobList.push(newJob);\n          accumulator.jobRef[pickupKey] = newJob;\n        }\n      }\n    }\n    return accumulator;\n  }, {jobList: [], jobRef: {}});\n\n  const jobList = supplies.jobList.concat(pickups.jobList);\n  const jobRefs = Object.assign({}, supplies.jobRef, pickups.jobRef);\n  return {jobList: jobList, jobRef: jobRefs}; // TODO, this will need to be changed to include supply jobs\n}\n\n// The way a job is invalid is if one of the buildings has since been destroyed\nfunction getNextAvailableJob(jobArray, buildings) {\n  for (let jobIndex = 0; jobIndex < jobArray.length; jobIndex++) {\n    const nextJob = jobArray[jobIndex];\n\n    const pickupFromId = nextJob.from;\n    const deliverToId = nextJob.to;\n\n    if (pickupFromId !== 'warehouse' && !buildings.hasOwnProperty(pickupFromId)) {\n      continue;\n    }\n\n    if (deliverToId !== 'warehouse' && !buildings.hasOwnProperty(deliverToId)) {\n      continue;\n    }\n\n    return jobIndex;\n  }\n}\n","import { ACTIONS } from '../actions/housing';\nimport BuildingDefinitions from './building-definitions';\n\nconst initHouseState = {\n  popProgress: 0,\n  currentPop: 1\n};\n\nconst ascensionFactors = {\n  peasanthouse: .8,\n  citizenhouse: .6\n}\n\n// precomputed list of current house and up because I'm lazy\nconst rightsLists = {\n  peasanthouse: ['peasanthouse', 'citizenhouse'],\n  citizenhouse: ['citizenhouse'],\n  patricianhouse: []\n}\n\nexport default function(housing = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.BUILD_HOUSE: {\n      const newState = Object.assign({}, housing);\n      const types = Object.assign({}, newState.types);\n      const abodes = newState.abodes.slice(0);\n      newState.types = types;\n      newState.abodes = abodes;\n\n      const toBuild = payload.toConstruct.id; // should really just be peasanthouse\n      const type = Object.assign({}, types[toBuild]);\n      types[toBuild] = type;\n      const abode = Object.assign({}, BuildingDefinitions[toBuild], initHouseState, {houseId: toBuild});\n\n      type.owned += 1;\n      abodes.push(abode);\n\n      calculateAscensionRights(types, type, toBuild);\n\n      return newState;\n    }\n    case ACTIONS.ASCEND_HOUSE: {\n      const fromHouseId = payload.fromHouse;\n      const toHouseId = BuildingDefinitions[fromHouseId].ascendsTo;\n\n      const fromType = {...housing.types[fromHouseId]};\n      const toType = {...housing.types[toHouseId]};\n      const types = {...housing.types, [fromHouseId]: fromType, [toHouseId]: toType};\n      const abodes = [...housing.abodes];\n      const newState = {...housing, types: types, abodes: abodes};\n      const nextHouse = BuildingDefinitions[toHouseId];\n\n      // find the first house that's able to be ascended\n      const ascendIndex = abodes.findIndex((house) => house.houseId === fromHouseId);\n      abodes.splice(ascendIndex, 1);\n      abodes.push({...nextHouse, ...initHouseState, houseId: toHouseId});\n      fromType.owned -= 1;\n      toType.owned += 1;\n\n      calculateAscensionRights(types, fromType, fromHouseId);\n      calculateAscensionRights(types, toType, toHouseId);\n\n      return newState;\n    }\n    default:\n      return housing;\n  }\n};\n\nfunction calculateAscensionRights(allTypes, type, toCheck) {\n  const totalHouses = rightsLists[toCheck].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.totalAscensionRights = Math.floor(ascensionFactors[toCheck] * totalHouses);\n  const ascendTo = BuildingDefinitions[toCheck].ascendsTo;\n  const alreadyAscended = rightsLists[ascendTo].reduce((sum, pop) => sum + allTypes[pop].owned, 0);\n  type.remainingAscensionRights = type.totalAscensionRights - alreadyAscended;\n}\n","import { ACTIONS as housingActions } from '../actions/housing';\nimport { ACTIONS as gameActions } from '../actions/game';\nimport BuildingDefinitions from './building-definitions';\n\nconst POP_ASCENSION_HAPPINESS_THRESHOLD = 97;\n\nconst initValues = {\n  owned: 0,\n  maxPopulation: 0,\n  happiness: 0,\n  canAscend: false,\n  consumeInfo: ''\n}\n\nexport default function(populationState = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case gameActions.INIT: {\n      const newState = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(newState)) {\n        const newPop = Object.assign({}, pop, initValues);\n        newState[popType] = newPop;\n      }\n\n      return newState;\n    }\n    case housingActions.BUILD_HOUSE: {\n      const houseBuilt = BuildingDefinitions[payload.toConstruct.id];\n      const newState = Object.assign({}, populationState);\n\n      const modifiedPop = Object.assign({}, newState[houseBuilt.populationCategory]);\n      newState[modifiedPop.id] = modifiedPop;\n\n      modifiedPop.maxPopulation += houseBuilt.populationCap;\n\n      return newState;\n    }\n    case gameActions.TICK: {\n      const population = Object.assign({}, populationState);\n\n      for (let [popType, pop] of Object.entries(population)) {\n        if (pop.happiness > POP_ASCENSION_HAPPINESS_THRESHOLD && pop.owned === pop.maxPopulation) {\n          population[popType] = { ...pop, canAscend: true };\n        } else {\n          population[popType] = { ...pop, canAscend: false}\n        }\n      }\n\n      return population;\n    }\n    case housingActions.ASCEND_HOUSE: {\n      const currentHouse = BuildingDefinitions[payload.fromHouse];\n      const nextHouse = BuildingDefinitions[currentHouse.ascendsTo];\n\n      const oldPop = {...populationState[currentHouse.populationCategory]};\n      const nextPop = {...populationState[nextHouse.populationCategory]};\n\n      oldPop.owned -= currentHouse.populationCap;\n      nextPop.owned += currentHouse.populationCap;\n      oldPop.maxPopulation -= currentHouse.populationCap;\n      nextPop.maxPopulation += nextHouse.populationCap;\n\n      return {...populationState, [currentHouse.populationCategory]: oldPop, [nextHouse.populationCategory]: nextPop};\n    }\n    default:\n      return populationState;\n  }\n};\n","// this could probably be done with thunk instead\nimport { ACTIONS } from '../actions/game';\nimport { BUILDING_CATEGORY } from './building-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const buildings = state.buildings;\n\n      const amenities = {};\n      for (let building of Object.values(buildings.owned)) {\n        if (building.category !== BUILDING_CATEGORY.AMENITY) {\n          continue;\n        }\n\n        for (let [amenity, amount] of Object.entries(building.produces)) {\n          if (!amenities[amenity]) {\n            amenities[amenity] = 0;\n          }\n\n          amenities[amenity] += amount * timeIntervalS * TIME_FACTOR;\n        }\n      }\n\n      newState.amenities = amenities;\n      return newState;\n    default:\n      return state;\n  }\n}\n","const PopulationDefinitions = {\n  peasant: {\n    name: 'Peasant',\n    taxRate: 0.8,\n    consumes: {\n      fish: {\n        quantity: 1,\n        weight: 25\n      },\n      cider: {\n        quantity: 0.44,\n        weight: 25\n      },\n      community: {\n        quantity: 1,\n        weight: 25\n      },\n      faith: {\n        quantity: 1,\n        weight: 25\n      }\n    }\n  },\n  citizen: {\n    name: 'Citizen',\n    taxRate: 0.95,\n    consumes: {\n      fish: {\n        quantity: .4,\n        weight: 8\n      },\n      spice: {\n        quantity: .4,\n        weight: 12\n      },\n      cider: {\n        quantity: .44,\n        weight: 20\n      },\n      linen: {\n        quantity: 0.42,\n        weight: 20\n      },\n      community: {\n        quantity: 1,\n        weight: 20\n      },\n      faith: {\n        quantity: 1,\n        weight: 20\n      }\n    }\n  }\n};\n\nexport default PopulationDefinitions;\n","import { ACTIONS } from '../actions/game';\nimport PopulationDefinitions from './population-definitions';\n\nconst TIME_FACTOR = 1 / 60.0;\nconst CONSUME_FACTOR = 1 / 100.0;\nconst MIN_HAPPINESS_DELTA = 0.001;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      warehouse.resources = resources;\n      const amenities = newState.amenities;\n      const population = Object.assign({}, newState.population);\n      newState.warehouse = warehouse;\n      newState.population = population;\n\n      for (const [popType, popOriginal] of Object.entries(state.population)) {\n\n        const pop = Object.assign({}, popOriginal);\n        let currentHappiness = 0;\n        if (popOriginal.owned !== 0) {\n          for (const [product, consumeInfo] of Object.entries(PopulationDefinitions[popType].consumes)) {\n            const consumed = consumeInfo.quantity * pop.owned * timeIntervalS * TIME_FACTOR * CONSUME_FACTOR;\n            let pctSatisfied = 1;\n\n            if (amenities[product]) {\n              if (amenities[product] < consumed) {\n                pctSatisfied = amenities[product] / consumed;\n                pop.consumeInfo = 'Short on ' + product;\n              }\n              amenities[product] -= consumed;\n              if (amenities[product] < 0) {\n                amenities[product] = 0;\n              }\n            } else if (resources[product]) {\n              const resource = Object.assign({}, resources[product]);\n              resources[product] = resource;\n\n              if (resource.owned < consumed) {\n                pctSatisfied = resource.owned / consumed\n                pop.consumeInfo = 'Short on ' + product;\n              }\n              resource.owned -= consumed;\n              if (resource.owned < 0) {\n                resource.owned = 0;\n              }\n            } else {\n              pctSatisfied = 0;\n            }\n\n            currentHappiness += consumeInfo.weight * pctSatisfied;\n          }\n        }\n\n        let happinessDiff = (currentHappiness - pop.happiness) / 100.0;\n        if (Math.abs(happinessDiff) < MIN_HAPPINESS_DELTA) {\n          happinessDiff = MIN_HAPPINESS_DELTA;\n        }\n        pop.happiness += happinessDiff;\n        population[popType] = pop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import { ACTIONS } from '../actions/game';\n\nconst POP_GROWTH_TIME_SECONDS = 10;\nconst POP_GROWTH_THRESHOLD = 40;\nconst POP_DECLINE_THRESHOLD = 20;\n\nexport default function(state = {}, action) {\n  let payload = action.payload;\n  switch(action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const houses = Object.assign({}, newState.housing);\n      const population = Object.assign({}, newState.population);\n      newState.housing = houses;\n      newState.population = population;\n\n      const populationCounts = {};\n      // go house by house, increment growth timer\n      const newAbodes = houses.abodes.map((abodeOriginal) => {\n        const abode = Object.assign({}, abodeOriginal);\n        const curHappiness = population[abode.populationCategory].happiness;\n        let growthFactor = 0;\n\n        if (curHappiness >= POP_GROWTH_THRESHOLD && abode.currentPop < abode.populationCap) {\n          growthFactor = 1;\n        }\n        if (curHappiness <= POP_DECLINE_THRESHOLD && abode.currentPop > 0) {\n          growthFactor = -1;\n        }\n\n        abode.popProgress += timeIntervalS * growthFactor;\n        if (abode.popProgress > POP_GROWTH_TIME_SECONDS || abode.popProgress < -POP_GROWTH_TIME_SECONDS) {\n          abode.popProgress -= POP_GROWTH_TIME_SECONDS * growthFactor;\n          abode.currentPop += growthFactor;\n        }\n\n        if (abode.currentPop < 1) {\n          abode.currentPop = 1;\n        }\n\n        if (!populationCounts[abode.populationCategory]) {\n          populationCounts[abode.populationCategory] = 0;\n        }\n\n        populationCounts[abode.populationCategory] += abode.currentPop;\n\n        return abode;\n      });\n      houses.abodes = newAbodes;\n\n      for (let [popType, popCount] of Object.entries(populationCounts)) {\n        const newPop = Object.assign({}, population[popType]);\n        newPop.owned = popCount;\n        population[popType] = newPop;\n      }\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","import { ACTIONS } from '../actions/game';\nimport BuildingDefinitions from './building-definitions';\nimport PopulationDefinitions from './population-definitions';\n\nconst TIME_FACTOR = 1/60.0;\nconst TAX_HAPPINESS_FACTOR = 1 / 100.0;\nconst TAX_HAPPINESS_MINIMUM = 0.01;\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.TICK:\n      const timeIntervalS = payload.tickIntervalSeconds;\n      const newState = Object.assign({}, state);\n      const warehouse = Object.assign({}, newState.warehouse);\n      const resources = Object.assign({}, warehouse.resources);\n      const gold = Object.assign({}, resources.gold);\n      newState.warehouse = warehouse;\n      warehouse.resources = resources;\n      resources.gold = gold;\n\n      const financeInfo = {\n        maintenanceCost: 0,\n        taxRevenue: 0\n      }\n\n      // start with Warehouse maintenance\n      const warehouseMaintenance = BuildingDefinitions[warehouse.type].upkeep * timeIntervalS * TIME_FACTOR;\n      const totalMaintenance = Object.values(state.construction).reduce((sum, construction) => {\n        return sum + (BuildingDefinitions[construction.id].upkeep * construction.owned * timeIntervalS * TIME_FACTOR);\n      }, warehouseMaintenance);\n\n      const totalTaxes = Object.values(state.population).reduce((sum, population) => {\n        let happinessFactor = population.happiness * TAX_HAPPINESS_FACTOR;\n        if (happinessFactor < TAX_HAPPINESS_MINIMUM) {\n          happinessFactor = TAX_HAPPINESS_MINIMUM;\n        }\n        return sum + (PopulationDefinitions[population.id].taxRate * population.owned * timeIntervalS * TIME_FACTOR * happinessFactor);\n      }, 0);\n\n      financeInfo.maintenanceCost = totalMaintenance;\n      financeInfo.taxRevenue = totalTaxes;\n      newState.financeInfo = financeInfo;\n\n      gold.owned = gold.owned + totalTaxes - totalMaintenance;\n\n      return newState;\n    default:\n      return state;\n  }\n}\n","export const unlockThresholds = [\n  ['peasant', 60],\n  ['peasant', 90],\n  ['citizen', 1],\n  ['citizen', 355],\n  ['patrician', 510],\n  ['patrician', 1190],\n  ['nobleman', 950],\n  ['nobleman', 2200],\n  ['nobleman', 3500],\n  ['nobleman', 7500]\n];\n\nexport const unlocks = [\n  // initial state\n  {\n    title: 'Small Settlement',\n    buildings: ['marketplace', 'fishinghut', 'lumberjackhut'],\n    population: 'peasant',\n    resources: ['gold', 'wood', 'tool', 'fish']\n  },\n  // 60 peasants\n  {\n    buildings: ['orchard', 'ciderfarm'],\n    resources: ['apple', 'cider']\n  },\n  // 90 peasants\n  {\n    title: 'Settlement',\n    buildings: ['chapel']\n  },\n  // 1 citizen\n  {\n    population: 'citizen',\n    resources: ['hemp', 'linen', 'stone', 'stonebrick', 'spice'],\n    buildings: ['hempfarm', 'weavers', 'quarry', 'stonemason'],\n    housing: ['citizenhouse']\n  }\n];\n","import { ACTIONS } from '../actions/game';\nimport { unlockThresholds, unlocks } from './level-up-definitions'\n\nexport default function(state = {}, action) {\n  switch (action.type) {\n    case ACTIONS.TICK: {\n      const [unlockPopType, popRequired] = unlockThresholds[state.island.level - 1];\n      const currentPop = state.population[unlockPopType].owned;\n      if (currentPop >= popRequired) {\n        const newState = Object.assign({}, state);\n        const island = Object.assign({}, newState.island);\n        newState.island = island;\n        island.level++;\n\n        const unlocked = unlocks[island.level - 1];\n        if (unlocked.title) {\n          island.title = unlocked.title;\n        }\n        if (unlocked.buildings) {\n          const constructions = Object.assign({}, newState.construction);\n          newState.construction = constructions;\n          unlocked.buildings.forEach(conId => {\n            const construction = Object.assign({}, constructions[conId]);\n            construction.unlocked = true;\n            constructions[conId] = construction;\n          });\n        }\n        if (unlocked.resources) {\n          const warehouse = Object.assign({}, newState.warehouse);\n          const resources = Object.assign({}, warehouse.resources);\n          newState.warehouse = warehouse;\n          warehouse.resources = resources;\n          unlocked.resources.forEach(resId => {\n            const resource = Object.assign({}, resources[resId]);\n            resources[resId] = resource;\n            resource.unlocked = true;\n          });\n        }\n        if (unlocked.population) {\n          const population = Object.assign({}, newState.population);\n          newState.population = population;\n          const popUnlocked = Object.assign({}, population[unlocked.population]);\n          popUnlocked.unlocked = true;\n          population[unlocked.population] = popUnlocked;\n        }\n        if (unlocked.housing) {\n          const types = {...newState.housing.types}\n          const housing = {...newState.housing, types: types};\n          newState.housing = housing;\n          unlocked.housing.forEach(houseId => {\n            const unlockedHouse = {...types[houseId], unlocked: true};\n            types[houseId] = unlockedHouse;\n          });\n        }\n\n        return newState;\n      }\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","export const ACTIONS = {\n  SET_TIME_FACTOR: 'SET_TIME_FACTOR'\n}\n\nexport function setTimeFactor(timeFactor) {\n  return { type: ACTIONS.SET_TIME_FACTOR, payload: { timeFactor: timeFactor }};\n}\n","import { ACTIONS } from '../actions/cheats';\n\nexport default function(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case ACTIONS.SET_TIME_FACTOR:\n      return {\n        ...state,\n        cheat: {\n          timeFactor: payload.timeFactor\n        }\n      }\n    default:\n      return state;\n  }\n}\n","import { ACTIONS } from '../actions/game';\nimport { combineReducers } from 'redux';\nimport island from './island';\nimport warehouse from './warehouse';\nimport construction from './construction';\nimport buildings from './building';\nimport couriers from './couriers';\nimport housing from './housing';\nimport population from './population';\nimport amenity from './amenities';\nimport consume from './consume';\nimport growth from './growth';\nimport finance from './finance';\nimport levelUp from './level-up';\nimport cheat from './cheat';\n\nconst combinedReducer = combineReducers({\n  cheat: (state = {}) => { return state },\n  island: island,\n  warehouse: warehouse,\n  construction: construction,\n  buildings: buildings,\n  couriers: (state = {}) => { return state }, // no op\n  housing: housing,\n  population: population\n});\n\nfunction rootReducer(state, action) {\n  if (action.type === ACTIONS.LOAD_GAME) {\n    return action.payload.saveState;\n  }\n  if (action.type === ACTIONS.TICK) {\n    let timeFactor = state.cheat.timeFactor;\n    if (!timeFactor) {\n      timeFactor = 1;\n    }\n    action.payload.tickIntervalSeconds *= timeFactor;\n  }\n  const cheatState = cheat(state, action);\n  const intermediateState = combinedReducer(cheatState, action);\n  const courierState = couriers(intermediateState, action);\n  if (action.type === ACTIONS.TICK) {\n    const amenityState = amenity(courierState, action);\n    const consumptionState = consume(amenityState, action);\n    const growthState = growth(consumptionState, action);\n    const financeState = finance(growthState, action);\n    const levelUpState = levelUp(financeState, action);\n    return levelUpState;\n  } else {\n    return courierState;\n  }\n}\n\nexport default rootReducer;\n","const INITIAL_STATE = {\n  island: {\n    level: 1,\n    title: 'Small Settlement',\n    name: 'New Island'\n  },\n  construction: {\n    peasanthouse: {\n      id: 'peasanthouse',\n      owned: 0,\n      cost: {\n        wood: 2\n      },\n      unlocked: true\n    },\n    marketplace: {\n      id: 'marketplace',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      },\n      unlocked: true\n    },\n    fishinghut: {\n      id: 'fishinghut',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 3,\n        tool: 2\n      },\n      unlocked: true\n    },\n    lumberjackhut: {\n      id: 'lumberjackhut',\n      owned: 0,\n      cost: {\n        gold: 50,\n        tool: 2\n      },\n      unlocked: true\n    },\n    smallstockpile: {\n      id: 'smallstockpile',\n      owned: 0,\n      cost: {\n        gold: 200,\n        wood: 2,\n        tool: 3\n      },\n      unlocked: true\n    },\n    orchard: {\n      id: 'orchard',\n      owned: 0,\n      cost: {\n        gold: 25\n      },\n      unlocked: false\n    },\n    ciderfarm: {\n      id: 'ciderfarm',\n      owned: 0,\n      cost: {\n        gold: 100,\n        wood: 5,\n        tool: 1\n      },\n      unlocked: false\n    },\n    chapel: {\n      id: 'chapel',\n      owned: 0,\n      cost: {\n        gold: 1500,\n        wood: 12,\n        tool: 5\n      },\n      unlocked: false\n    },\n    hempfarm: {\n      id: 'hempfarm',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 2\n      },\n      unlocked: false\n    },\n    weavers: {\n      id: 'weavers',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 5,\n        tool: 3\n      }\n    },\n    quarry: {\n      id: 'quarry',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    },\n    stonemason: {\n      id: 'stonemason',\n      owned: 0,\n      cost: {\n        gold: 400,\n        wood: 2,\n        tool: 2\n      }\n    }\n  },\n  buildings: {\n    owned: {}\n  },\n  warehouse: {\n    type: 'smallwarehouse',\n    totalCapacity: 40,\n    resources: {\n      gold: {\n        id: 'gold',\n        owned: 5000,\n        unlocked: true\n      },\n      tool: {\n        id: 'tool',\n        owned: 40,\n        unlocked: true\n      },\n      fish: {\n        id: 'fish',\n        owned: 2,\n        unlocked: true\n      },\n      wood: {\n        id: 'wood',\n        owned: 40,\n        unlocked: true\n      },\n      apple: {\n        id: 'apple',\n        owned: 0,\n        unlocked: false\n      },\n      cider: {\n        id: 'cider',\n        owned: 0,\n        unlocked: false\n      },\n      hemp: {\n        id: 'hemp',\n        owned: 0,\n        unlocked: false\n      },\n      spice: {\n        id: 'spice',\n        owned: 0,\n        unlocked: false\n      },\n      linen: {\n        id: 'linen',\n        owned: 0,\n        unlocked: false\n      },\n      stone: {\n        id: 'stone',\n        owned: 0,\n        unlocked: false\n      },\n      stonebrick: {\n        id: 'stonebrick',\n        owned: 0,\n        unlocked: false\n      }\n    },\n  },\n  couriers: {\n    couriers:[],\n    jobQueue: [],\n    jobQueueMap: {}\n  },\n  housing: {\n    types: {\n      peasanthouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: true,\n      },\n      citizenhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      patricianhouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      },\n      noblehouse: {\n        owned: 0,\n        totalAscensionRights: 0,\n        remainingAscensionRights: 0,\n        unlocked: false,\n      }\n    },\n    abodes: []\n  },\n  population: {\n    peasant: {\n      id: 'peasant',\n      unlocked: true\n    },\n    citizen: {\n      id: 'citizen',\n      unlocked: false\n    }\n  }\n};\n\nexport default INITIAL_STATE;\n","export default class Scheduler {\n  constructor(functionToRun, targetInterval) {\n    this.targetFunction = functionToRun;\n    this.targetInterval = targetInterval;\n    this.running = false;\n  }\n\n  start() {\n    if (this.running) {\n      return;\n    }\n    let lastTick = Date.now();\n    this.running = true;\n    let repeater = () => {\n      if (!this.running) {\n          return;\n      }\n      let currentTime = Date.now();\n      let elapsedTime = currentTime - lastTick;\n      this.targetFunction(elapsedTime);\n      lastTick = currentTime;\n      setTimeout(repeater.bind(this), this.targetInterval);\n    }\n    setTimeout(repeater.bind(this), this.targetInterval);\n  }\n\n  stop() {\n    this.running = false;\n  }\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setTimeFactor } from '../../actions/cheats';\n\nconst TimeFactor = () => {\n  const dispatch = useDispatch();\n  const [timeFactor, setTf] = useState(1);\n\n  const handleSubmit = (event) => {\n    dispatch(setTimeFactor(timeFactor));\n    event.preventDefault();\n  }\n\n  return (\n    <div className='time-factor'>\n      <form onSubmit={handleSubmit}>\n        <input type='number' name='timeFactor' onChange={e => setTf(e.target.value)} required></input>\n        <input type='submit' value='Set time factor' />\n      </form>\n    </div>\n  )\n};\n\nexport default TimeFactor;\n","export const filterUnlocked = (collectionObject) => {\n  return Object.entries(collectionObject).reduce((accumulator, [key, value]) => {\n    if (value.unlocked) {\n      accumulator[key] = value;\n    }\n    return accumulator;\n  }, {});\n};\n\nexport const setAffordable = (buyable, resources) => {\n  for (let [resource, amount] of Object.entries(buyable.cost)) {\n    if (resources[resource].owned < amount) {\n      return Object.assign({}, buyable, {canAfford: false});\n    }\n  }\n  return Object.assign({}, buyable, {canAfford: true});\n};\n\nexport const setAllAffordable = (buyableCollection, resources) => {\n  return Object.entries(buyableCollection).reduce((accumulator, [buyableId, buyable]) => {\n    accumulator[buyableId] = setAffordable(buyable, resources);\n    return accumulator;\n  }, {});\n};\n","const ResourceDefinitions = {\n  gold: {\n    name: 'Gold',\n    baseTradePrice: 1\n  },\n  tool: {\n    name: 'Tool',\n    baseTradePrice: 15\n  },\n  fish: {\n    name: 'Fish',\n    baseTradePrice: 3\n  },\n  wood: {\n    name: 'Wood',\n    baseTradePrice: 1\n  },\n  apple: {\n    name: 'Apple',\n    baseTradePrice: 0.2\n  },\n  cider: {\n    name: 'Cider',\n    baseTradePrice: 3\n  },\n  hemp: {\n    name: 'Hemp',\n    baseTradePrice: 4\n  },\n  linen: {\n    name: 'Clothing',\n    baseTradePrice: 27\n  },\n  stone: {\n    name: 'Stone',\n    baseTradePrice: 6\n  },\n  stonebrick: {\n    name: 'Stone Brick',\n    baseTradePrice: 8\n  },\n  spice: {\n    name: 'Spice',\n    baseTradePrice: 6\n  },\n};\n\nexport default ResourceDefinitions;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\nimport ResourceDefinitions from '../reducers/resource-definitions';\n\nimport '../../style/resource.css';\n\nconst mapStateToProps = (state) => { return {resources: filterUnlocked(state.warehouse.resources),\n                                             max: state.warehouse.totalCapacity}};\n\nconst ResourcePanel = ({resources, max}) => {\n  return (\n    <div className='resource-panel'>\n      {Object.keys(resources).map((item, key) => {\n          const resourceName = ResourceDefinitions[item].name;\n          if (item !== 'gold') {\n            return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)} / {max}</div>;\n          } else {\n            return <div key={item}>{resourceName}: {resources[item].owned.toFixed(1)}</div>;\n          }\n      })}\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(ResourcePanel);\n","import React from 'react';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport ResourceDefinitions from '../reducers/resource-definitions';\n\nimport '../../style/courier.css';\n\nconst CourierMonitor = () => {\n  const couriers = useSelector(state => state.couriers, shallowEqual);\n  const buildings = useSelector(state => state.buildings, shallowEqual);\n\n  function jobDescriptionToString(jobDescription) {\n    if (!jobDescription.id) {\n      return 'Sitting idly';\n    }\n    const what = ResourceDefinitions[jobDescription.carrying].name;\n    const howMuch = jobDescription.amount;\n    const fromWhereId = jobDescription.from;\n    let fromWhere = 'nowhere?!';\n    if (fromWhereId === 'warehouse') {\n      fromWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[fromWhereId];\n      if (!building) {\n        fromWhere = '???';\n      } else {\n        fromWhere = building.name;\n      }\n    }\n    const toWhereId = jobDescription.to;\n    let toWhere = 'nowhere?!';\n    if (toWhereId === 'warehouse') {\n      toWhere = 'the warehouse';\n    } else {\n      const building = buildings.owned[toWhereId];\n      if (!building) {\n        toWhere = '???';\n      } else {\n        toWhere = building.name;\n      }\n    }\n    return `Delivering ${howMuch} ton of ${what} from ${fromWhere} to ${toWhere}`;\n  }\n\n  const courierList = couriers.couriers.map((courier) => {\n    return (\n      <div className='courier' key={courier.id}>\n        <div>{courier.status}</div>\n        <div>{courier.progress.toFixed(1)}</div>\n        {/**<div>{jobDescriptionToString(courier.jobDescription)}</div>**/}\n        <div>{JSON.stringify(courier.payload)}</div>\n      </div>\n    );\n  });\n\n  return (\n    <div className='courier-monitor'>\n      {courierList}\n    </div>\n  );\n};\n\nexport default CourierMonitor;\n","import React from 'react';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked, setAllAffordable } from '../selectors';\nimport BuildingDefinitions, { BUILDING_CATEGORY } from '../reducers/building-definitions';\nimport ResourceDefinitions from '../reducers/resource-definitions';\nimport { constructBuilding } from '../actions/construction';\nimport { buildHouse } from '../actions/housing';\nimport { buildWarehouse } from '../actions/warehouse';\n\nimport '../../style/construction.css';\n\nconst ConstructionPanel = () => {\n  const resources = useSelector(state => state.warehouse.resources);\n  const construction = useSelector(state => setAllAffordable(filterUnlocked(state.construction), resources), shallowEqual);\n  const dispatch = useDispatch();\n\n  const constructionList = Object.entries(construction).map(([buildingId, construction]) => {\n    const buildingInfo = BuildingDefinitions[buildingId];\n    const ingredientPanel = Object.keys(construction.cost).map((ingredient) => (\n      <div className='construction-ingredient' key={ingredient}>{ResourceDefinitions[ingredient].name}: {construction.cost[ingredient]}</div>\n    ));\n\n    let buyFunction = null;\n    if (buildingInfo.category === BUILDING_CATEGORY.HOUSE) {\n      buyFunction = () => dispatch(buildHouse(construction));\n    } else if (buildingInfo.category === BUILDING_CATEGORY.WAREHOUSE) {\n      buyFunction = () => dispatch(buildWarehouse(construction));\n    } else {\n      buyFunction = () => dispatch(constructBuilding(construction));\n    }\n\n    return (\n      <div className='construction' key={buildingId}>\n        <div className='construction-header'><h4>{buildingInfo.name}</h4></div>\n        <div>Owned: {construction.owned}</div>\n        <div className='ingredientList'>{ingredientPanel}</div>\n        <button className='purchase' onClick={buyFunction} disabled={!construction.canAfford}>Buy</button>\n      </div>\n    )\n  });\n  return (\n    <div className='construction-panel'>\n      {constructionList}\n    </div>\n  )\n};\n\nexport default ConstructionPanel;\n","import React from 'react';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { BUILDING_CATEGORY } from '../reducers/building-definitions';\nimport { destroyBuilding } from '../actions/construction';\n\nimport '../../style/building.css';\n\nconst BuildingPanel = () => {\n  const buildingState = useSelector(state => state.buildings, shallowEqual);\n  const dispatch = useDispatch();\n  const buildings = buildingState.owned;\n\n  const destroyBuildingFn = (toDestroy) => {\n    dispatch(destroyBuilding(toDestroy));\n  }\n\n  let buildingList = Object.values(buildings).map((building) => {\n    if (building.category === BUILDING_CATEGORY.PRODUCER) {\n      return <Building building={building} key={building.id} destroyFunc={destroyBuildingFn}></Building>\n    } else {\n      return (\n        <div className='building' key={building.id}>\n          <div className='building-header'><h4>{building.name}</h4></div>\n          <button onClick={() => destroyBuildingFn(building)}>Destroy</button>\n        </div>\n      )\n    }\n  });\n\n  return (\n    <div className='building-panel'>\n      {buildingList}\n    </div>\n  );\n};\n\nconst Building = (props) => {\n  let building = props.building;\n  return (\n    <div className='building'>\n      <div className='building-header'><h4>{building.name}</h4></div>\n      <div className='status'>{building.status}</div>\n      <div>{building.progress.toFixed(1)} / {building.produceTime}</div>\n      <div className='inbox'>Inbox: {JSON.stringify(building.inbox)}</div>\n      <div className='outbox'>Outbox: {JSON.stringify(building.outbox)}</div>\n      <button onClick={() => props.destroyFunc(building)}>Destroy</button>\n    </div>\n  )\n};\n\nexport default BuildingPanel;\n","import React from 'react';\nimport PopulationDefinitions from '../reducers/population-definitions';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport '../../style/population.css';\n\nconst PopulationPanel = () => {\n  const populationState = useSelector(state => filterUnlocked(state.population), shallowEqual);\n\n  const populationList = Object.values(populationState).map((pop) => {\n      const popName = PopulationDefinitions[pop.id].name;\n      const happiness = pop.happiness ? pop.happiness.toFixed() : 0;\n      return <div className='population' key={pop.id}>\n        {popName}: {pop.owned} / {pop.maxPopulation} Happiness: {happiness} {pop.consumeInfo}\n      </div>\n  });\n\n  return (\n    <div className='population-panel'>\n      {populationList}\n    </div>\n  )\n}\n\nexport default PopulationPanel;\n","import React from 'react';\nimport BuildingDefinitions from '../reducers/building-definitions';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { filterUnlocked } from '../selectors';\n\nimport { ascendHouse } from '../actions/housing';\n\nimport '../../style/housing.css';\n\nconst HousingPanel = () => {\n  const dispatch = useDispatch();\n\n  const houses = useSelector((state) => filterUnlocked(state.housing.types), shallowEqual);\n  const population = useSelector((state) => state.population, shallowEqual);\n  let housingList = Object.keys(houses).map((houseId) => {\n    const housedPopulation = population[BuildingDefinitions[houseId].populationCategory];\n    const canAscend = (houses[houseId].remainingAscensionRights > 0) && housedPopulation.canAscend;\n    const availableAscensions = canAscend ? houses[houseId].remainingAscensionRights : 0;\n    return <div className='housing' key={houseId}>\n      <div className='housing-data'>{BuildingDefinitions[houseId].name}: {houses[houseId].owned}</div>\n      <div><button onClick={() => {dispatch(ascendHouse(houseId, BuildingDefinitions[houseId].ascendsTo))}} disabled={!canAscend}>Ascend</button>{availableAscensions}</div>\n    </div>\n  });\n\n  return (\n    <div className='housing-panel'>\n      {housingList}\n    </div>\n  )\n};\n\nexport default HousingPanel;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { loadGame } from '../actions/game';\n\nconst SaveLoad = () => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const copyState = () => {\n    const saveState = btoa(JSON.stringify(state));\n    navigator.clipboard.writeText(saveState).then(() => {\n      alert('Saved to clipboard');\n    });\n  }\n\n  const loadState = () => {\n    const loadState = JSON.parse(atob(prompt('Enter load data')));\n    if (!loadState) {\n      alert('Invalid save state');\n    } else {\n      dispatch(loadGame(loadState));\n    }\n  }\n\n  return (\n    <div className='save-load'>\n      <button onClick={copyState}>Save</button>\n      <button onClick={loadState}>Load</button>\n    </div>\n  )\n}\n\nexport default SaveLoad;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { tick as dispatchTick, init as dispatchInit } from './actions/game';\nimport Scheduler from './scheduler';\n\nimport TimeFactor from './components/cheats/TimeFactor';\nimport ResourcePanel from './components/ResourcePanel';\nimport CourierMonitor from './components/CourierMonitor';\nimport ConstructionPanel from './components/ConstructionPanel';\nimport BuildingPanel from './components/BuildingPanel';\nimport PopulationPanel from './components/PopulationPanel';\nimport HousingPanel from './components/HousingPanel';\nimport SaveLoad from './components/SaveLoad';\n\nconst MS_TO_S = 1/1000.0;\n\nfunction Game() {\n  const [scheduler] = useState(new Scheduler(tick, 100));\n  const dispatch = useDispatch();\n\n  function tick(timeIntervalMs) {\n    dispatch(dispatchTick(timeIntervalMs * MS_TO_S));\n  }\n\n  useEffect(() => {\n    dispatch(dispatchInit());\n    scheduler.start();\n  }, []);\n\n  return (\n    <div className=\"game\">\n      <SaveLoad></SaveLoad>\n      <TimeFactor></TimeFactor>\n      <ResourcePanel></ResourcePanel>\n      <PopulationPanel></PopulationPanel>\n      <HousingPanel></HousingPanel>\n      <CourierMonitor></CourierMonitor>\n      <ConstructionPanel></ConstructionPanel>\n      <BuildingPanel></BuildingPanel>\n    </div>\n  );\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './js/store/store';\n\nimport './style/index.css';\nimport Game from './js/Game';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(\n<Provider store={configureStore()}>\n  <Game></Game>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root-reducer';\nimport INITIAL_STATE from './initial-state';\n\nexport default function configureStore(initialState=INITIAL_STATE) {\n  const saveState = localStorage.getItem('save');\n  if (saveState) {\n    initialState = JSON.parse(atob(prompt('Enter load data')));\n  }\n  if (!initialState) {\n    initialState = INITIAL_STATE;\n  }\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk) && window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n );\n}\n"],"sourceRoot":""}